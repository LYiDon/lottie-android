%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.1.0%%For: (Evgeny Bakal) ()%%Title: (BKG 1.eps)%%CreationDate: 03.10.18 22:48%%Canvassize: 16383%%BoundingBox: -1 -2160 3841 4%%HiResBoundingBox: -0.372559 -2159.9268 3840.0117 3.29004%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1920.5 -1080.5 1920.5 -1080.5%AI3_TileBox: 1524 -1386 2316 -774%AI3_DocumentPreview: Header%AI5_ArtSize: 3840 2160%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -702.4429 327.3223 0.3333 1831 940 18 0 0 6 130 0 0%AI5_OpenViewLayers: 7%%PageOrigin:1520 -1380%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 72 8%%BeginData: 5610 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFCFFD7EFFCACFFD7DFFCFCFCFFD7CFFC9CFFD71FFCFFD0CFF%CFFD5DFFCACFCFFD0BFFC9CFFD04FFCACFFD0AFFCACFC9FD5CFFCACFCFFD%0DFFCACFFFFFFFCFCFFD09FFCFCFCFFD3DFFCFFD05FFCFCFC9FD16FFCFCE%FD10FFCACFFFFFC9FD0BFFCAFD39FFCACFC9CFC9CFC9FFFFFFC9CFCACFFD%0DFFCFFFCFFFCFFD04FFCFCFFD11FFCFCFFFCFFD0AFFCFCFFD37FFCFC9CF%CFFD05FFC9FFC9FFFFCFCFFD0CFFC9CFCACFCACFC9CFFFFFC9FD13FFCAC9%C9FD0AFFCFCAFD37FFCACFCACFC9CFCAFFFFCFC9CFFFFFC9FD14FFCACFCF%CFFD14FFCFFD0BFFC9FD3FFFCAFFFFCFFFFFC9FFCFCFCFFD12FFCAC9CAFD%16FFCEC9CFC9CFC9CFCACFC9CFFD3AFFCAFFCACFCACFC8C9C9FFC9CFCACF%CACFCACFC9CFCFFD0EFFC9FD16FFCFCAFD05FFCFCFCFFD3AFFCFCACFCFFF%CFCFC9CEC9CEC9CFCAFFCFFFCFFFCFCFC9CFFD24FFCFC9FD40FFCFC9CFCA%FFFFFFCAC9C9FFFFC9C8CECACEC9CFCAFFCAFFCACFCFFD1CFFC9CFFD04FF%CFCFCAFD3FFFCFCFCFFFFFFFCFCEC8CFFFFFFFCFC9CEC8CFFFFFCFCFCAFD%20FFCACFCACFC9CFC9CFCAFD3FFFC9C9C9CFC9CFC9CEC9FD04FFCFC8CFC9%CFC8CEFD04FFC9CFFD1DFFCFCFFD04FFCFFD41FFCFCFCFFFCFFFFFCFCFFD%05FFC9CFFFCECFFFC9CFFD04FFC9CFFD1BFFC9CFFD4CFFCFCECAFD04FFCF%C9CFCAFFC9CFFFFFC9C9CAFFFFFFC9CFFD19FFCFCFFD4DFFCFCFFD04FFCF%C9FFCFFFFFCFCFFFFFFFC9CFC9CFFFFFC9FD19FFCFCAFD4CFFC9CAFFFFFF%C9CFCAFFCACFFFFFC9CFFFFFFFCFCFFFCACFC9CFCAFD17FFCFCFFD4CFFCF%CFFFFFCFC9CFFFFFFFCFCFFFFFCFC9FFFFFFCFCFFD04FFC9CFFD12FFCFC9%CFCACFCAFD4DFFC9FFCACFCAFD05FFC9FFFFFFCACFCFFFFFFFC8FD05FFCF%FD12FFC9FFCFFD4FFFCAFFCFCFCFFD06FFCFFFFFFFCFCFCFFFFFFFCFCAFD%0AFFCACFCACFC9CFFD06FFCACFFD50FFCFC9C9CFFD08FFC9FFFFFFC9FFC9%FFFFFFC9CFCFFD08FFCFCFFD04FFCFCFCFFFFFFFCFCFFD51FFCECAFD09FF%CFCFFFFFCFCFFFCFCFFFFFFFCFFD09FFCFCAFD05FFCFCFC9CFC9CFFD52FF%C9FD0BFFCAFFFFCFCAFFCFCFFFFFC9FFCAFD06FFCFCFCAFD09FFCFFD5FFF%CFFFFFFFCAFFFFFFCACFFFCECACFFD05FFCACFCAFD6AFFCFCAFFCFCFFD04%FFC9CFC9CFC9FD72FFCFCFFFFFCAFD05FFC9FFCFCFCFFD72FFC9FFC9FD08%FFCFC9CFFD72FFCFCACFFD09FFCFCAFD72FFCAC9CFFD09FFC9CFCFFD7DFF%CFC9FD77FFCFCAFD05FFCAC9CFFD76FFC9CFFD06FFC9FD76FFCACFC9FD05%FFCACECFFD76FFCFCFFD06FFC9FD76FFC9FFCAFD05FFCACEFD76FFCFFFCF%FD05FFCFC9FD75FFCFCAFFCACFFD04FFC9C9CAFD74FFCFFFFFFFCFFD04FF%CFC9FD75FFCFCFFFCFCFFD04FFCACFCFFD74FFCAFFFFFFC9FFFFFFCACFCF%FD72FFCACFCAC9CACFC9CEC9CFFFCFCACFFD72FFCFC9FFCFFFCFFFFFCFCF%FFCAFFCFFD73FFCFC9CFCACFCACFCAFFFFCFCACFFFFFCAFD78FFCFCFCFFF%C9CFCACFCAFD72FFCACFC9CFC9CFC9FFCACFFD1FFFFD05CFFFCFFFCFFFCF%CFFD48FFCFCFCACFCFFD04FFCFFFCFCFFD1CFFCACFC9CFCAFFCFCFCACFCA%CFCAFFCAFD47FFC9CFCAFD07FFC9FFC9FD1CFFCFCFCFFD51FFCFCFCAFD09%FFCFFFFFCECFFD1AFFC9CFFD51FFCFC9CFCFFD0AFFCEC9CFCAFD16FFCFFF%FFFFC9CFFD50FFCFCFCAFD0DFFCFFD14FFCFCFC9CFCACFC9CFC9CFFD50FF%C9CFCFFD0DFFCFFD14FFCACFCFFD05FFCFCFFD50FFC9CFFD04FFCACFCFFD%05FFCFCFCACFC9FFFFFFCFFFCFFFCFFD0AFFC9CFFD57FFCFC9FFFFFFC9CF%CACFCACFC9FFFFFFC9CFCAFFFFCFC9CFC9CFCACFCACFFD09FFC9FD58FFCF%C9FFFFCFCAFD07FFC9CFCAFD16FFCAFD58FFCFCAFFFFCFCAFD09FFCFFD6F%FFCFCAFD68FFC9CFCAFFFFFFCAFD0EFFCFCAFD13FFCACFC9CFCAFD08FFCF%FFCFFD45FFCACFCFCFC9CFCACFC9FD16FFCFC9CFCFFD07FFCACFFFFFFFCF%C9FD05FFCFCACFCACFC9CFFD0EFFCAFD2DFFCACFCAFD05FFC9FFFFFFCAFF%CFCFFD0AFFCFCFCAFD08FFCFCAFFCACFCAFD05FFC9CFFD05FFCFC9FFCFCF%C9FD06FFCFCFFD04FFCFFD05FFCFCFCACFCFFD2AFFCFCACFCFCFC9CFFFFF%FFCFC9FFFFFFCACFFD09FFCFC9CFCFCFC9FD06FFCFCAFD04FFCFCFFFFFFF%CFCFFD07FFCFC9CFCFFD08FFC9CFC9CFCACFC9CFCAFFCACFCFFD2BFFCFC9%CAFD05FFC9CFFFFFFFCFC9CFC9CFCFFD07FFCACFC9FD05FFC9CFFFFFFFCF%CAFD06FFCFC9CFCACFCFFD1AFFCFCFCACFFD2DFFCFCFFD07FFC9FD04FFCF%CFFD09FFCFCFCFFD07FFFD05CFFD09FFCACFFD31FFCFCFCAFFCFFD0CFFCF%CAFD08FFCFC9FFFFFFCFFD05FFC9FFFFCFC9CFFD08FFCACFCFFD09FFCFCF%CAFD3AFFCFCFC9CFCFCFCACFCACFCAFD07FFCFCFCFFFCACFFD06FFCAFFFF%FFC9CEFD05FFCFC9FD04CFFD07FFCACFFD1CFFCFCFCAFD1EFFCFFFCAFD06%FFCFC9CFCAFD07FFCFCFC9CFCAFFFFFFC9CFCAFFFFFFCAFD06FFCFCAFFFF%CFCAFD07FFCAFFCAFD08FFCFCAFD0DFFCACFC9CFC9CFC9FD06FFCFC9CFCA%CFC9CFCAFFCACFCAFD15FFCFCACFC9CFCACFCFFFCFCFCAFD0EFFCFC9CFC9%CFFD0CFFCAFD05FFCFCFCAFFFFFFCFFFCFFFFFFFCFFD13FFCACFFD06FFC9%CFCFFFFFCFCAFD06FFCFCACFCAFD0BFFCFC9CFC9CFCACFC9FFCFCECAFD05%FFCACFC9CFCFFD11FFCAFD0DFFC9CFC9CFCACFC9CFCFFFCACFC9CFCACFCA%CFC9CFFD10FFCACFCAFD09FFCFCFC9CFCAFD14FFCFCFCAFD07FFCACFFD2A%FFCFFD05FFCFFD1DFFC9CFFD23FFCACFCFFD57FFC9CFFD1FFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Fade To Edge Black)(Fade To Edge Black) 0 3 Bd[0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br[0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Neon Rings Vignette)(Neon Rings Vignette) 1 17 Bd[0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B5B6B8B9BABDBEC0C1C3C4C5C7C8CACBCDCFD0D2D3D4D5D7D7D8DADBDBDDDEDFE0E2E3E4E5E6E7E7E8EAEAEBECECEDEDEEEEEEEFEFF0F0F1F1F1F2F2F2F2F3F3F2F3F4F3F3F4F4F4F4F5F4F4F5F5F4F4F4F4F4F4F4F3F3F4F4F3F3F3F3F2F3F2F2F2F2F2F2F2F1F1F0F1F0EFF0EFEEEEEEEEEDEDEDECECECECEBEAEBEAEAEAE9E8E8E8E7E7E7E6E6E5E5E5E4E3E3E3E2E2E1E1E0E0DFDFDFDEDDDDDCDCDBDBDAD9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D0D0D0CFCECECDCDCCCCCBCACAC9C8C7C7C6C5C5C4C4C3C3C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B8B7B7B6B5B5B4B3B2B2B1><B0B0B1B1B1B0B1B1B1B2B2B2B1B3B3B2B2B4B3B2B4B4B3B3B5B4B4B6B5B4B3B5B5B4B6B6B5B4B6B5B5B4B6B5B4B6B5B4B4B5B5B4B6B5B4B3B4B4B3B4B3B2B1B3B1B0AFB1B0AFB0AFAEADAFADACAEADABAAACAAA9AAA9A8A7A8A7A5A4A5A4A3A4A3A1A0A1A09E9F9E9D9B9C9B999A9997969795949293929091908E8D8E8C8A8B8A888787868485838280817F7D7B7C7A797977767475737172706F6D6D6C6A6A69676565646260615F5D5D5C5A5858565555535250504E4D4D4B4A4848474544444241413F3E3C3C3B393A3837353634323331302E2F2D2C2A2B2928292726242524><A5A5A3A3A3A3A2A1A19F9F9E9E9C9C9C9B999998979796969594949292929290908F8D8D8C8C8A8A8A8A88888886868686848483828281817F7F7F7D7C7C7C7A797979777776757474737271716F6F6E6E6C6C6C6A6A696967676665646363616160605E5D5D5C5B5B5A58585756555554535251514F4E4E4C4B4B4A484847454544444241413F3E3E3D3B3B3A3A3837373534333331302F2E2D2D2C2A2A292727262624232222201F1F1D1C1B1B191817151514131211110F0E0E0D0B0B0A0908070705050404030202000000000000000000000000000000000000000000000000><D5D4D3D2D1D0CFCECDCCCBC9C8C7C5C4C3C2C0BFBDBCBAB8B7B5B3B1AFADABA9A8A6A4A29F9D9B99979593918F8D8B89878583817E7C7A79777573716F6D6B6968666462605E5C5B5957555352504E4C4B494846444342403F3D3C3A383736343332302F2E2C2B2A29272625242221201F1E1D1C1B1A191716151514131211100F0E0E0D0C0B0B0A090908080706060505040404030303030202020202010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><1313131313131212121212121212121212121111111111111111111111111010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0909090909090909090909090808080808080808080808080707070707070707070707070606060606060606060606050505050505050505050505040404040404040404040404030303030303030303030303020202020202020202020202010101010101010101010101000000000000><0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F40414142434344454646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF>4 %_Br<B1B1B0B0B0B0B0B0AFAFAFAFAEAEAEAEADADADADADACACACABABAAAAAAA9A9A8A8A7A7A7A6A6A6A6A5A4A4A4A3A3A3A3A2A2A2A1A1A1A09F9F9E9E9E9D9D9D9C9B9B9A9A99989897969695959494939292919190908F8E8E8D8C8C8B8B8A898988888786868584848382828180807F7E7D7C7C7B7A797878777675747373727170706F6E6D6C6B6B6A69696867666564636261605F5E5D5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484747464544434241403F3F3E3D3C><2424222222222020211F1F201E1E1E1E1C1C1C1B1B1B1919191A17171816161614141414121213111212101010100E0E0F0D0D0D0D0B0B0C0A0A0B0909090A080909080808070708080607070506060505050504040403040403040404030304020303030202030202020101010201010100010100010101010101000101000001010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001010001>00<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC><AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6><EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB>4 %_Br<3C3D3E3F3F40414243444546474748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5D5E5F60616263646566676869696A6B6B6C6D6E6F707071727373747576777878797A7B7C7C7D7E7F808081828283848485868687888889898A8B8B8C8C8D8E8E8F90909191929293949495959696979898999A9A9B9B9C9D9D9D9E9E9E9F9FA0A1A1A1A2A2A2A3A3A3A3A4A4A4A5A6A6A6A6A7A7A7A8A8A9A9AAAAAAABABACACACADADADADADAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1><0100010100000100000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010100000101000101010101010001010001010102010101020202030202030303020403030404040304040304040405050505060605070706080807070808080909080A0909090B0A0A0C0B0B0D0D0D0D0F0E0E10101010121211131212141414141616161817171A1919191B1B1B1C1C1C1E1E1E1E201F1F212020222222222424>00<BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF>4 %_Br<B1B2B2B3B4B5B5B6B7B7B8B9BABABBBCBCBDBEBEBFBFC0C1C1C2C3C3C4C4C5C5C6C7C7C8C9CACACBCCCCCDCDCECECFD0D0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9DADBDBDCDCDDDDDEDFDFDFE0E0E1E1E2E2E3E3E3E4E5E5E5E6E6E7E7E7E8E8E8E9EAEAEAEBEAEBECECECECEDEDEDEEEEEEEEEFF0EFF0F1F0F1F1F2F2F2F2F2F2F2F3F2F3F3F3F3F4F4F3F3F4F4F4F4F4F4F4F5F5F4F4F5F4F4F4F4F3F3F4F3F2F3F3F2F2F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEAEAE8E7E7E6E5E4E3E2E0DFDEDDDBDBDAD8D7D7D5D4D3D2D0CFCDCBCAC8C7C5C4C3C1C0BEBDBAB9B8B6B5B4><24252426272928292B2A2C2D2F2E3031333234363537383A393B3C3C3E3F4141424444454748484A4B4D4D4E5050525355555658585A5C5D5D5F61606264656567696A6A6C6D6D6F707271737574767779797A7C7B7D7F818082838584868787888A8B8A8C8E8D8E9091909293929495979697999A999B9C9B9D9E9F9EA0A1A0A1A3A4A3A4A5A4A5A7A8A7A8A9AAA9AAACAAABADAEACADAFADAEAFB0AFB0B1AFB0B1B3B1B2B3B4B3B4B4B3B4B5B6B4B5B5B4B4B5B6B4B5B6B4B5B5B6B4B5B6B6B4B5B5B3B4B5B6B4B4B5B3B3B4B4B2B3B4B2B2B3B3B1B2B2B2B1B1B1B0B1B1B1B0B0><00000000000000000000000000000000000000000000000002020304040505070708090A0B0B0D0E0E0F111112131415151718191B1B1C1D1F1F202222232426262727292A2A2C2D2D2E2F3031333334353737383A3A3B3B3D3E3E3F414142444445454748484A4B4B4C4E4E4F51515253545555565758585A5B5B5C5D5D5E606061616363646566676769696A6A6C6C6C6E6E6F6F717172737474757677777979797A7C7C7C7D7F7F7F81818282838484868686868888888A8A8A8A8C8C8D8D8F909092929292949495969697979899999B9C9C9C9E9E9F9FA1A1A2A3A3A3A3A5A5><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010202020202030303030404040505060607080809090A0B0B0C0D0E0E0F101112131415151617191A1B1C1D1E1F20212224252627292A2B2C2E2F303233343637383A3C3D3F404243444648494B4C4E5052535557595B5C5E6062646668696B6D6F71737577797A7C7E81838587898B8D8F91939597999B9D9FA2A4A6A8A9ABADAFB1B3B5B7B8BABCBDBFC0C2C3C4C5C7C8C9CBCCCDCECFD0D1D2D3D4D5><00000000000001010101010101010101010102020202020202020202020203030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606060707070707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010111111111111111111111111121212121212121212121212131313131313><AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A59585857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B3B2B0B0AEADABAAA9A9A7A6A4A4A2A2A0A09E9E9D9D9C9C9A9A989896969595939391918F8F8C8C8988868684848383818180807E7F7D7D7C7B7A7A79797777757574747272717170706F6F6E6E6D6D6C6C6B6B6A6A696968686767666665656464636462626162616160605F5F5E5E5D5D5C5C5B5C5A5A5959585857575656555554545353525150504F4F4E4E4D4C4B4B4A4A49494747464645444343424140403F3E3D3D3C3B3A39383837363534333231302F2E2D2C2B2A282726242322201F1E1C1B1A181716141312100F0E0C0B0A080706050403020000><B0B1B2B3B3B4B5B6B8B8BABABCBDBFC0C2C3C5C4C5C5C6C6C7C7C8C8C9C9CBCBCDCCCECFD1D1D3D5D7D7D9DBDDDEDFE0E0E0E1E2E3E3E4E3E4E5E6E6E8E8EAEAEBECEDEEEFEFEFEFF0F1F1F2F3F2F2F2F3F3F4F4F4F4F5F5F6F6F7F7F6F7F7F7F8F8F9F8F8F9F9FAFAFAFAFAFBFBFBFBFCFCFBFCFCFCFCFDFDFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F2F2F1F1><A5A5A3A3A3A3A1A19FA09FA09F9F9E9E9D9D9C9D9C9C9B9B9A9A9A9A999998989798979796979596949594949394939393949293929291929192909190908F908F908E8F8E8F8E8F8E8F8D8E8D8E8D8E8C8D8B8C8B8C8B8C8A8B8A8B8A8B898A898A888A8889888887888788868786868586858684858384838482838182808180807F7F7E7E7D7D7C7D7B7C7A7B797A787977787677757674757373717270706F6F6D6E6C6D6B6B696A686866666464626260615F5F5D5D5B5B595A57575454525250504E4E4B4B49494646444441413F3F3D3D3A3A383836363434><D5D5D4D3D2D2D1D1D0CFCECECDCDCCCBCACAC9C9C7C7C5C5C4C3C2C1C0BFBDBDBBBAB9B8B6B6B4B3B1B0AFAEACABA9A8A6A5A3A2A0A09D9D9B9A9796949391908E8D8B8A8887858482817F7E7C7A7877757472716F6E6C6B696866656362605F5D5C5A595756545351504F4E4C4B49484646444341403E3D3C3B39383736343332312F2E2D2C2A2928272525232221201F1E1D1C1A1A181816161414131211100F0F0E0D0C0B0A0A09090807070606050404030302020202010101010101000000000000000000000000000000000000000000000000000000000000><131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F101010101010101111111111111111121212121212121313131313131314141414141414141515151515151516161616161616171717171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F202020202020202121212121212122222222222222222323232323232324242424242424252525252525252526262626262626272727272727272828282828282828292929292929292A2A2A2A><0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7B7B>4 %_Br<0000000000000000000101010101010101010101010101010102020202020202020202020202030202020304030404040404050505050505050505060606060606060606070707070707070809090909090909090A0A0A0A09090A0A0B0B0B0B0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0D0D0D0D0E0E0E0E0E0E0E0E0E0E101010101011111111><F1F1F0EFEFEEEDEDECECEBEBEAE9E8E8E7E6E6E5E4E3E3E2E1E0DFDFDEDDDDDCDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBCBBBAB9B7B6B5B4B3B2B1B0AEADACAAA9A8A6A5A3A2A19F9E9D9B9A999796949391908E8D8B8A888786848382807E7D7B7A787776747372706F6E6C6B6A686765646261605E5D><343233302E2F2D2E2B292A2826272523232120201F1F1E1C1D1B1A1A1917181617151314131112100F100E0F0D0C0D0C0B0C0B0A0B0A090A090908070807060605040505060504050404040303040304030203020203020102020102010202010101000100000000010000000000000000000000000000000000000000000000000000000000>0<EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6><2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF><7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F9091919293939495959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCDCECFCFD0>4 %_Br<1111111110101010100E0E0E0E0E0E0E0E0E0E0D0D0D0D0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0B0B0B0B0A0A09090A0A0A0A090909090909090908070707070707070606060606060606060505050505050505050404040404030403020202030202020202020202020202020201010101010101010101010101010101000000000000000000><5D5E606162646567686A6B6C6E6F707273747677787A7B7D7E808283848687888A8B8D8E909193949697999A9B9D9E9FA1A2A3A5A6A8A9AAACADAEB0B1B2B3B4B5B6B7B9BABBBCBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDCDDDDDEDFDFE0E1E2E3E3E4E5E6E6E7E8E8E9EAEBEBECECEDEDEEEFEFF0F1F1><0000000000000000000000000000000000000000000000000000000000010000000001000101010202010201020201020302020302030403040303040404050405060505040506060708070809090A090A0B0A0B0C0B0C0D0C0D0F0E100F1012111314131517161817191A1A1B1D1C1E1F1F2020212323252726282A292B2E2D2F2E30333234>0<E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEE><AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A><D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A8988888787868585848383828181807F7F7E7E7D7C7C7B>4 %_Br<0000020304050607080A0B0C0E0F101213141617181A1B1C1E1F202223242627282A2B2C2D2E2F30313233343536373838393A3B3C3D3D3E3F40404142434344454646474749494A4A4B4B4C4D4E4E4F4F5050515253535454555556565757585859595A5A5C5B5C5C5D5D5E5E5F5F606061616261626264636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727274747575777779797A7A7B7C7D7D7F7E8080818183838484868688898C8C8F8F919193939595969698989A9A9C9C9D9D9E9EA0A0A2A2A4A4A6A7A9A9AAABADAEB0B0B2B3B4><F1F1F2F2F3F3F3F4F4F4F4F5F5F5F5F6F6F6F6F7F7F7F7F7F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFDFDFCFCFCFCFBFCFCFBFBFBFBFAFAFAFAFAF9F9F8F8F9F8F8F7F7F7F6F7F7F6F6F5F5F4F4F4F4F3F3F2F2F2F3F2F1F1F0EFEFEFEFEEEDECEBEAEAE8E8E6E6E5E4E3E4E3E3E2E1E0E0E0DFDEDDDBD9D7D7D5D3D1D1CFCECCCDCBCBC9C9C8C8C7C7C6C6C5C5C4C5C3C2C0BFBDBCBABAB8B8B6B5B4B3B3B2B1B0><3434363638383A3A3D3D3F3F41414444464649494B4B4E4E50505252545457575A595B5B5D5D5F5F616062626464666668686A696B6B6D6C6E6D6F6F707072717373757476757776787779787A797B7A7C7B7D7C7D7D7E7E7F7F8080818082818382848384838584868586858686878688878887888889888A888A898A898B8A8B8A8B8A8C8B8C8B8C8B8D8C8E8D8E8D8E8D8F8E8F8E8F8E8F8E908F908F909091909291929192929392949393939493949495949695979697979897989899999A9A9A9A9B9B9C9C9D9C9D9D9E9E9F9FA09FA09FA1A1A3A3A3A3A5A5><000000000000000000000000000000000000000000000000000000000000010101010101020202020303040405060607070809090A0A0B0C0D0E0F0F101112131414161618181A1A1C1D1E1F2021222325252728292A2C2D2E2F31323334363738393B3C3D3E40414344464648494B4C4E4F505153545657595A5C5D5F606263656668696B6C6E6F7172747577787A7C7E7F8182848587888A8B8D8E9091939496979A9B9D9DA0A0A2A3A5A6A8A9ABACAEAFB0B1B3B4B6B6B8B9BABBBDBDBFC0C1C2C3C4C5C5C7C7C9C9CACACBCCCDCDCECECFD0D1D1D2D2D3D4D5D5><EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413><2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A191919191919191818181818181818171717171717171616161616161615151515151515141414141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C><7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B4B5B4B4B4B5B5B4B4B6B6B6B5B7B7B7B7B9B9B9BBBBBBBABCBCBCBCBEBDBDBCBEBEBEBEBFBFBFBFC0C1C0C2C2C1C1C2C2C2C2C3C3C2C2C3C3C3C2C3C3C3C4C4C3C3C4C4C3C3C4C3C3C2C4C3C3C2C3C2C2C1C2C1C0C2C1C0BFC0C0BFBFBFBFBEBDBDBDBCBBBCBBBABABAB9B8B8B8B6B6B6B5B4B3B4B2B1B0B0AFAEADADACAAAAA9A8A6A6A5A3A2A2A09F9D9D9C9A989896><B0B2B1B3B3B5B5B7B8B9B9BCBEBEC0C0C2C2C4C4C6C6C8CACACCCCCECDCFCFD0D0D1D3D3D5D4D6D5D7D7D8D8DADBDBDCDCDDDCDEDDDEDEDFE0DFE1E0E1E1E2E1E2E1E3E4E3E4E3E4E3E4E3E4E4E5E4E5E6E4E5E4E5E4E5E4E5E4E5E5E4E5E4E5E4E4E3E4E3E3E4E3E3E2E3E1E2E1E1E0E0E1DFE0DEDFDEDEDDDDDCDCDDDBDBDADAD9D9D8D8D7D7D7D6D6D4D4D3D3D2D2D1D1><A5A3A3A2A2A0A09E9E9C9C9A9898969594939191908F8E8C8C8A898887868584838281807F7E7D7C7B7B797978777675747373727170706F6D6D6C6B6A6A69686766656463626160605E5E5C5C5B5A595857565554535251504F4E4D4C4A4A48474645444342403F3D3C3B3A383736353331302E2E2C2B292826252321201D1C1A1917151312100E0D0B0A09080605030200><D5D4D3D2D1D0CECDCCCBCAC9C7C6C5C3C2C1BFBEBCBBB9B7B5B3B1AFADABA9A7A5A3A19F9C9A989693918F8D8B888684827F7D7B79777572706E6C6A68666462605E5B59575553514F4D4B4948454442403E3C3A38363533312F2E2C2A292726242221201E1D1B1A181715141312100F0E0D0C0A0A0808070605050403030302020201010101010101000000000000000000><1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E><0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F303030313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F>4 %_Br<96959392908F8D8C8A898786848382807F7D7B7A787775747371706F6D6C6B69686665646261605E5D5C5A59575655545251504F4C4B4A48474645444241403E3D3C3B3A39383735343332302F2D2C2B2928272625242221201F1E1D1C1B1A191817161514131211><D1CFCECCCBC9C8C7C5C5C4C2C1C0BFBDBCBBBAB9B7B6B5B3B2B1B1AFAEACABAAA9A7A6A5A3A2A1A09E9D9C9C9B99989795949391918F8E8D8C8B898887878685848381807F7E7D7C7B7A7977767575747372706F6E6D6C6B6A6968676665646463636261605F5E5D>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6><4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF><9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0>4 %_Br<1112131415161718191A1B1C1D1E1F2021222425262728292B2C2D2F30323334353738393A3B3C3D3E40414244454647484A4B4C4F50515254555657595A5C5D5E60616264656668696B6C6D6F707173747577787A7B7D7F808283848687898A8C8D8F9092939596><5D5E5F6061626363646465666768696A6B6C6D6E6F7072737475757677797A7B7C7D7E7F808183848586878788898B8C8D8E8F91919394959798999B9C9C9D9EA0A1A2A3A5A6A7A9AAABACAEAFB1B1B2B3B5B6B7B9BABBBCBDBFC0C1C2C4C5C5C7C8C9CBCCCECFD1>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E><AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756565554535251504F4E><D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F>4 %_Br<9698989A9C9D9D9FA0A2A2A3A5A6A6A8A9AAAAACADADAEAFB0B0B1B2B4B3B4B5B6B6B6B8B8B8B9BABABABBBCBBBCBDBDBDBEBFBFBFBFC0C0BFC0C1C2C0C1C2C1C2C2C3C2C3C3C4C2C3C3C4C3C3C4C4C3C3C4C4C3C3C3C2C3C3C3C2C2C3C3C2C2C2C2C1C1C2C2C0C1C0BFBFBFBFBEBEBEBEBCBDBDBEBCBCBCBCBABBBBBBB9B9B9B7B7B7B7B5B6B6B6B4B4B5B5B4B4B4B5B4B4><D1D1D2D2D3D3D4D4D6D6D7D7D7D8D8D9D9DADADBDBDDDCDCDDDDDEDEDFDEE0DFE1E0E0E1E1E2E1E3E2E3E3E4E3E3E4E3E4E4E5E4E5E4E5E5E4E5E4E5E4E5E4E5E4E6E5E4E5E4E4E3E4E3E4E3E4E3E4E3E1E2E1E2E1E1E0E1DFE0DFDEDEDDDEDCDDDCDCDBDBDAD8D8D7D7D5D6D4D5D3D3D1D0D0CFCFCDCECCCCCACAC8C6C6C4C4C2C2C0C0BEBEBCB9B9B8B7B5B5B3B3B1B2B0><000203050608090A0B0D0E1012131517191A1C1D202123252628292B2C2E2E303133353637383A3B3C3D3F40424344454647484A4A4C4D4E4F505152535455565758595A5B5C5C5E5E60606162636465666768696A6A6B6C6D6D6F707071727373747576777879797B7B7C7D7E7F808182838485868788898A8C8C8E8F9091919394959698989A9C9C9E9EA0A0A2A2A3A3A5><00000000000000000001010101010101020202030303040505060708080A0A0C0D0E0F101213141517181A1B1D1E202122242627292A2C2E2F31333536383A3C3E4042444548494B4D4F51535557595B5E60626466686A6C6E70727577797B7D7F828486888B8D8F919396989A9C9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBCBEBFC1C2C3C5C6C7C9CACBCCCDCED0D1D2D3D4D5><7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A69696867666665646363626160605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A494847474645444443424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A29282827262525242322222120201F1E1D1D1C1B1A1A191817171615141413><4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A191918181717161616151514141313121211111110100F0F0E0E0D0D0C0C><9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br[0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 Bs0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS%_0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink Radial)(Pink Radial) 1 2 Bd[0<00000102030405060708090B0C0D0E1011121314141617191A1C1D1E202122232426272728292A2C2D2E2F31313234353638393A3A3B3C3E3F414242434546474848494B4C4D4D4E4F51525254555758585A5B5C5D5D5F60616162636565666869696A6B6C6C6E6F6F707273737576767779797A7B7B7D7E7E7F8181828383848585878888898A8A8C8C8D8E8E8F8F91929294939596969898999B9A9C9C9D9D9F9FA0A2A2A3A3A4A4A6A6A7A7A8A8A9A9AAAAACACADADAEAEAFAFB1B1B2B2B3B3B3B4B4B5B5B6B6B6B7B7B9B9BAB9B9BABABBBBBBBCBCBEBDBDBFBFBFC0C0C0C1C1C2C2C2C3C3C3C4C4C4C4C5C5C5C6C6C6C7C7C7C7C8C8C8C9C9C9C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCCCDCDCDCDCDCDCECECECECECECFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1><0000000001010102020303030303040405050606070808090909090A0A0B0C0C0D0E0E0E0F0F10101112121113131415151615161818191A191A1A1C1C1C1C1D1E1F1E1F20212221222324252425262727282829282A2B2C2B2D2D2E2D2F302F3031323132343334363536373837383A393A3C3B3C3E3D3E403F40404142424445454647474847494A4A4B4A4C4D4D4E4D4F4E505150525153525355555756585759585A5A5B5B5D5D5E5E5F5F616162626363646465656767686869696A6A696B6B6D6D6E6E6D6F6F7171707272747473757577777678787A7A797B7B7A7C7C7C7E7D7D7F7F7F8180808282818184838385858587878686888888888A8A8A8A8C8B8B8B8B8D8D8D8D8F8E8E8E8E909090909090919191919191939292929292929294949494949494949494949595959595959595959595959595>01<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A89888887878685858484838382828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F6F6E6E6D6D6C6C6C6B6B6A6A6A69696868686767676666666565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A59595959595858585858585757575757575656565656565656555555555555555555555454545454545454545454545454><FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777776767575747474737372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A6969696868686767676666666665656564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959>4 %_Br[0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 %_BS%_0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 3 Bd[0<A9A9AAAAABABADADAEAEAEAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B8B9B9BABABABBBBBCBCBDBDBDBEBEBFBFC0C0C1C1C1C2C2C3C3C4C4C5C5C5C6C6C7C7C8C8C8C9C9C9C9CACACBCB><080A0B0C0D0F1012131517191B1C1E1F2123242627292B2D2E3032333537383A3C3D3F414244484A4B4E505153545657595B5D5F6062636567696A6C6F70727476787A7C7D7F81838587898B>01<7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A><ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160>4 %_Br0<8282828383838383838585858585858686878787878888888888888A8A8A8A8A8A8C8C8C8C8C8C8D8D8D8D8D8D8F8F8F8F8F8F90909090909192929292929294949494949495959595959797979797979999999999999B9B9B9B9B9B9D9D9D9D9D9D9E9E9E9E9F9FA0A0A0A0A0A0A2A2A2A2A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7A7A7A7A9A9A9><F5F4F4F3F2F1F0EFEEEDECEAE9E8E6E6E5E4E3E2E1E0DFDEDDDBDAD8D7D6D4D3D2D1D0CFCDCCCAC8C6C5C4C2C1C0BFBEBDBCBAB9B7B6B4B3B1AFADACAAA9A7A5A3A2A09F9D9B9998969492908E8C8A88868482817F7D7A78777573716F6D6B69676562605F5D5B59565452504F4D4A484644413F3C3B39373533302E2D2B29272422201E1C1A17151312100E0B0A08>01<9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A89898989898988888888888887878787878686868686868585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B><1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 %_BS%_0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 Bs0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 %_BS%_0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 Bs0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 %_BS%_0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 139)(Unnamed gradient 139) 1 2 Bd[00001114 %_Br[0 0 0 0 1 1 1 2 87 36.6667 %_BS%_0 0 0 0 1 1 1 2 87 36.6667 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F50525354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBBBCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F80818182838384858686878889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACACADADADADADADADAD><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F4041424344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F8081818283848485858687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E80838587898C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Water)(Water) 0 5 Bd[<D5D6D6D7D7D8D9D9D9DADADBDCDCDDDEDEDFDFE0E1E1E1E2E3E3E4E4E5><5253545657595A5A5B5D5E606163646567686A6B6C6C6D6E7071727475><3F3F404141424345454647474848494B4B4C4C4D4D4F4F505151525353><02020203030304040505050606070709090A0A0B0C0C0D0E0F10101112>0<8A89888786858484838281807F7E7D7C7B7A7978777776757473727170><A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C>4 %_Br<B9BABBBBBCBDBDBEBFBFC0C1C1C2C2C3C3C4C4C5C5C6C6C7C8C8C9C9CACBCCCCCDCDCECFD0D0D0D1D2D2D3D4D4D4D5><17181A1A1B1D1E2021212324262829292B2D2E3032313335363838393B3C3E403F414344464747494A4C4D4F4F5052><15161718191A1A1B1B1D1E1E1F1F202223232425252728292B2C2E2E2F30303133343535363738393A3A3B3C3D3E3F><0000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010202>0<B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929191908F8E8D8C8C8B8A><D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9>4 %_Br<7576777879797A7B7C7D7E7E7F808182828384858586878888898A8B8C8C8D8E8E8F9090919293939494959696979899999A9A9B9C9C9D9E9E9E9FA0A1A1A2A2A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAAAABABACACADADADADAEAEAFAFB0B0B0B1B2B2B2B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B8B8B8B8B8B9B9B9B9B9><02020202020102020201020202010202020102020101020201010202010102010101020202010302020203030202030303030404030304040404050404040505040505050506060605070706060707070708080808090909080A0A09090B0B0B0A0C0C0C0C0E0E0E0E10100F0F111111111212121214141414151515151717><10111010121211111111101112121212121211111313121313131212141413141414131315151414141513141516141515151414161614151515141416161414151414161615151515141416161515151615151617161616161515171716161617161618181717171716161717161616161515171716161616151516171515>0<7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B1B1B1B1B0B0><E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9D9D9D9D8D8D8D8>4 %_Br<000001010203040505060708090A0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233343535363738393A3A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F616162636465666768696A6B6B6C6D6E6F70707172737475><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000010100010102010102010102010202010202><000000000000000000010101010102010202010103020202020203030303030403040403040404050405060506050506060606060607060706060707080807080808090808080909090909080A0A09090A0A0B0B0A0B0A0B0C0B0B0C0C0C0C0C0C0B0D0D0C0C0D0D0E0D0D0D0D0E0F0E0E0E0E0F0F0F0F0E101010100F0F111010>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F><FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0><FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8>4 %_Br[0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 %_BS%_0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 Bs0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 %_BS%_0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 Bs0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 %_BS%_0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 Bs0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS%_0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Diamond Cubes)(Diamond Cubes) 6.5605 11.3652 85.3018 79.5596 [%AI3_Tile(0 O 0 R 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 Xa 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR45.9316 56.8281 m39.3691 45.4609 L26.2471 45.4609 L32.8066 56.8281 L45.9316 56.8281 Lf45.9316 34.0957 m39.3691 22.7305 L26.2471 22.7305 L32.8066 34.0957 L45.9316 34.0957 Lf65.6162 22.7305 m59.0537 11.3652 L45.9316 11.3652 L52.4932 22.7305 L65.6162 22.7305 Lf65.6162 45.4609 m59.0537 34.0977 L45.9316 34.0977 L52.4932 45.4609 L65.6162 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L6.5605 11.3652 L13.123 22.7305 L26.2471 22.7305 Lf26.2471 45.4609 m19.6846 34.0977 L6.5605 34.0977 L13.123 45.4609 L26.2471 45.4609 Lf45.9316 79.5586 m39.3691 68.1924 L26.2471 68.1924 L32.8066 79.5586 L45.9316 79.5586 Lf65.6162 68.1934 m59.0537 56.8281 L45.9316 56.8281 L52.4932 68.1924 L65.6162 68.1934 Lf85.3018 56.8281 m78.7402 45.4609 L65.6162 45.4609 L72.1777 56.8281 L85.3018 56.8281 Lf85.3018 34.0957 m78.7402 22.7305 L65.6162 22.7305 L72.1777 34.0957 L85.3018 34.0957 Lf85.3018 79.5586 m78.7402 68.1924 L65.6162 68.1924 L72.1777 79.5586 L85.3018 79.5586 Lf26.2471 68.1924 m19.6846 56.8281 L6.5605 56.8281 L13.123 68.1924 L26.2471 68.1924 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 Xa 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR26.2471 68.1924 m19.6846 56.8281 L26.2471 45.4609 L32.8066 56.8281 L26.2471 68.1924 Lf26.2471 45.4609 m19.6846 34.0957 L26.2471 22.7305 L32.8066 34.0957 L26.2471 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L26.2471 0 L32.8066 11.3652 L26.2471 22.7305 Lf45.9316 34.0957 m39.3691 22.7305 L45.9316 11.3652 L52.4932 22.7305 L45.9316 34.0957 Lf45.9316 56.8281 m39.3691 45.4609 L45.9316 34.0977 L52.4932 45.4609 L45.9316 56.8281 Lf6.5605 34.0957 m0 22.7305 L6.5605 11.3652 L13.123 22.7305 L6.5605 34.0957 Lf6.5605 56.8281 m0 45.4609 L6.5605 34.0977 L13.123 45.4609 L6.5605 56.8281 Lf26.2471 90.9238 m19.6846 79.5586 L26.2471 68.1924 L32.8066 79.5586 L26.2471 90.9238 Lf45.9316 79.5586 m39.3691 68.1924 L45.9316 56.8281 L52.4932 68.1924 L45.9316 79.5586 Lf65.6162 68.1924 m59.0537 56.8281 L65.6162 45.4609 L72.1777 56.8281 L65.6162 68.1924 Lf65.6162 45.4609 m59.0537 34.0957 L65.6162 22.7305 L72.1777 34.0957 L65.6162 45.4609 Lf65.6162 22.7305 m59.0537 11.3652 L65.6162 0 L72.1777 11.3652 L65.6162 22.7305 Lf85.3018 34.0957 m78.7402 22.7305 L85.3018 11.3652 L91.8643 22.7305 L85.3018 34.0957 Lf85.3018 56.8281 m78.7402 45.4609 L85.3018 34.0977 L91.8643 45.4609 L85.3018 56.8281 Lf65.6162 90.9238 m59.0537 79.5586 L65.6162 68.1924 L72.1777 79.5586 L65.6162 90.9238 Lf85.3018 79.5586 m78.7402 68.1924 L85.3018 56.8281 L91.8643 68.1924 L85.3018 79.5586 Lf6.5605 79.5576 m0 68.1924 L6.5605 56.8281 L13.123 68.1924 L6.5605 79.5576 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6091.6558 7111 L-6091.6558 7075.8271 L-6271 7075.8271 L-6271 7111 Lnuu0 O0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa0 R0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA0.5 w-6109.8286 7076.0781 m-6252.8276 7076.0781 L-6252.8276 7078.6475 L-6109.8286 7078.6475 L-6109.8286 7076.0781 Lb-6252.8276 7101.4829 m-6109.8286 7101.4829 L-6109.8286 7098.7109 L-6252.8276 7098.7109 L-6252.8276 7101.4829 Lb0 0 0 0 1 1 1 Xa-6252.8276 7078.6475 m-6252.8276 7098.7109 L-6109.8286 7098.7109 L-6109.8286 7078.6475 L-6252.8276 7078.6475 LbU0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7110.6191 m-6092.2544 7110.6191 L-6094.4292 7108.3984 L-6125.9976 7108.3984 L-6131.1978 7110.6191 Lb-6092.2544 7086.5854 m-6109.8286 7086.5854 L-6109.8286 7088.6797 L-6094.3237 7088.6797 L-6092.2544 7086.5854 Lb0 0 0 0 1 1 1 Xa-6094.3237 7088.6797 m-6109.8286 7088.6797 L-6109.8286 7101.4829 L-6125.9976 7108.3984 L-6094.4292 7108.3984 L-6104.6465 7099.1279 L-6094.3237 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6270.4019 7110.6191 m-6231.4595 7110.6191 L-6236.6587 7108.3984 L-6268.2285 7108.3984 L-6270.4019 7110.6191 Lb0 0 0 0 1 1 1 Xa-6252.8286 7088.6797 m-6268.3345 7088.6797 L-6258.0112 7099.1279 L-6268.2285 7108.3984 L-6236.6587 7108.3984 L-6252.8286 7101.4829 L-6252.8286 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6252.8286 7086.5854 m-6270.4019 7086.5854 L-6268.3345 7088.6797 L-6252.8286 7088.6797 L-6252.8286 7086.5854 Lb-6231.4595 7110.6191 m-6252.8286 7101.4829 LSu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6131.1978 7101.4829 m-6131.1978 7108.1836 L-6115.5269 7101.4829 L-6131.1978 7101.4829 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7108.1836 m-6131.1978 7110.6191 L-6109.8286 7101.4829 L-6115.5269 7101.4829 L-6131.1978 7108.1836 Lb-6252.8286 7101.4829 m-6231.4595 7110.6191 L-6231.4595 7108.1836 L-6247.1294 7101.4829 L-6252.8286 7101.4829 Lb0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6247.1294 7101.4829 m-6231.4595 7108.1836 L-6231.4595 7101.4829 L-6247.1294 7101.4829 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 44)0 Au1 Ap0 J 0 j 1 w 4 M []0 d1 XR-6266.6665 7111 m-6271 7111 L-6271 7107.3989 L-6266.6665 7107.3989 L-6266.6665 7111 Lnu0 Ap0 XR-6269.9702 7110.3359 m-6267.6963 7110.3359 L-6267.6963 7108.0625 L-6269.9702 7108.0625 L-6269.9702 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6267.6963 7109.1992 m-6267.6963 7109.8271 -6268.2056 7110.3359 -6268.8335 7110.3359 c-6269.4614 7110.3359 -6269.9702 7109.8271 -6269.9702 7109.1992 c-6269.9702 7108.5718 -6269.4614 7108.0625 -6268.8335 7108.0625 c-6268.2056 7108.0625 -6267.6963 7108.5718 -6267.6963 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 47)0 Au0 Ap0 J 0 j 1 w 4 M []0 d1 XR-6264.6064 7111 m-6271 7111 L-6271 7107.3989 L-6264.6064 7107.3989 L-6264.6064 7111 Lnu0 XR-6268.9404 7110.3359 m-6266.6665 7110.3359 L-6266.6665 7108.0625 L-6268.9404 7108.0625 L-6268.9404 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6266.6665 7109.1992 m-6266.6665 7109.8271 -6267.1753 7110.3359 -6267.8032 7110.3359 c-6268.4312 7110.3359 -6268.9404 7109.8271 -6268.9404 7109.1992 c-6268.9404 7108.5718 -6268.4312 7108.0625 -6267.8032 7108.0625 c-6267.1753 7108.0625 -6266.6665 7108.5718 -6266.6665 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 48)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6263.1465 7111 L-6263.1465 7102.5957 L-6271 7102.5957 L-6271 7111 Lnu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa3.86371 M-6270.1582 7102.5957 m-6269.6812 7102.5845 -6269.2842 7102.959 -6269.2725 7103.4375 c-6269.2593 7103.9141 -6269.6357 7104.3101 -6270.1138 7104.3237 c-6270.5903 7104.3359 -6270.9878 7103.96 -6270.9995 7103.4824 c-6271.0122 7103.0054 -6270.6357 7102.6069 -6270.1582 7102.5957 cf-6270.1357 7103.46 mFUu-6270.1558 7104.8188 m-6269.6782 7104.8086 -6269.2813 7105.1846 -6269.2686 7105.6621 c-6269.2563 7106.1382 -6269.6333 7106.5356 -6270.1104 7106.5488 c-6270.5874 7106.5615 -6270.9849 7106.1846 -6270.9971 7105.707 c-6271.0093 7105.23 -6270.6328 7104.834 -6270.1558 7104.8188 cf-6270.1333 7105.6846 mFUu-6270.1523 7107.0469 m-6269.6753 7107.0342 -6269.2783 7107.4102 -6269.2661 7107.8877 c-6269.2539 7108.3638 -6269.6304 7108.7612 -6270.1074 7108.7744 c-6270.5845 7108.7871 -6270.9814 7108.4102 -6270.9937 7107.9326 c-6271.0068 7107.4556 -6270.6299 7107.0581 -6270.1523 7107.0469 cf-6270.1299 7107.9102 mFUu-6270.1499 7109.2725 m-6269.6724 7109.2588 -6269.2754 7109.6357 -6269.2627 7110.1133 c-6269.25 7110.5894 -6269.6274 7110.9863 -6270.1045 7111 c-6270.5815 7111.0127 -6270.9785 7110.6357 -6270.9912 7110.1582 c-6271.0029 7109.6816 -6270.6274 7109.2832 -6270.1499 7109.2725 cf-6270.1274 7110.1357 mFUu-6268.1538 7103.666 m-6267.6763 7103.6533 -6267.2793 7104.0293 -6267.2666 7104.5068 c-6267.2539 7104.9829 -6267.6309 7105.3804 -6268.1084 7105.3945 c-6268.5854 7105.4063 -6268.9824 7105.0293 -6268.9946 7104.5527 c-6269.0068 7104.0752 -6268.6304 7103.6768 -6268.1538 7103.666 cf-6268.1304 7104.5293 mFUu-6268.1499 7105.8901 m-6267.6729 7105.8789 -6267.2764 7106.2549 -6267.2632 7106.7324 c-6267.2515 7107.21 -6267.6274 7107.6069 -6268.1055 7107.6191 c-6268.5825 7107.6318 -6268.9795 7107.2549 -6268.9917 7106.7773 c-6269.0039 7106.3008 -6268.6274 7105.9023 -6268.1499 7105.8901 cf-6268.1274 7106.7549 mFUu-6268.1475 7108.1157 m-6267.6699 7108.1045 -6267.2729 7108.4805 -6267.2607 7108.959 c-6267.2485 7109.4341 -6267.6255 7109.8325 -6268.1025 7109.8447 c-6268.5791 7109.8574 -6268.9766 7109.4814 -6268.9888 7109.0029 c-6269.0015 7108.5264 -6268.6245 7108.1279 -6268.1475 7108.1157 cf-6268.1245 7108.9805 mFUu-6266.0723 7104.7119 m-6265.5952 7104.6997 -6265.1987 7105.0781 -6265.1865 7105.5532 c-6265.1738 7106.0303 -6265.5508 7106.4287 -6266.0273 7106.4414 c-6266.5054 7106.4541 -6266.9019 7106.0757 -6266.9141 7105.5996 c-6266.9272 7105.123 -6266.5498 7104.7261 -6266.0723 7104.7119 cf-6266.0503 7105.5781 mFUu-6266.0698 7106.9395 m-6265.5928 7106.9253 -6265.1953 7107.3013 -6265.1831 7107.7788 c-6265.1704 7108.2573 -6265.5474 7108.6543 -6266.0249 7108.6685 c-6266.5024 7108.6797 -6266.8994 7108.3013 -6266.9116 7107.8252 c-6266.9233 7107.3486 -6266.5469 7106.9512 -6266.0698 7106.9395 cf-6266.0474 7107.8013 mFUu-6264.0332 7105.7822 m-6263.5557 7105.7695 -6263.1592 7106.1475 -6263.1465 7106.6255 c-6263.1333 7107.1016 -6263.5103 7107.498 -6263.9883 7107.5117 c-6264.4653 7107.5229 -6264.8618 7107.1475 -6264.8745 7106.6685 c-6264.8862 7106.1909 -6264.5098 7105.7949 -6264.0332 7105.7822 cf-6264.0103 7106.6475 mFUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Banner/ Adobe Patte) -(rnOnPath Brush Tool/ Arrow Brush Circles/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Arrow Brush Circles)(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -( 1 0 4 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(Black)Pc0 0.993988 1 0 1 0 0 Xa(RGB Red)Pc0.061982 0 0.965148 0 1 1 0 Xa(RGB Yellow)Pc0.627649 0 1 0 0 1 0 Xa(RGB Green)Pc0.517937 0 0.125399 0 0 1 1 Xa(RGB Cyan)Pc0.883665 0.769161 0 0 0 0 1 Xa(RGB Blue)Pc0.269902 0.816403 0 0 1 0 1 Xa(RGB Magenta)Pc0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0.000366 0.500664 0.985656 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0.000214 0.348486 0.871305 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.045136 0 0.931884 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188968 0.000397 0.98233 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501091 0.001373 0.990387 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.746151 0 0.99704 0.000092 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.761959 0 0.749783 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.6972 0.14847 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.875364 0.526451 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262516 0.245243 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.970001 0.204959 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.22855 0.274266 0.39942 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.362341 0.574029 0.840574 0.226139 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Fade To Edge Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Fade To Edge Black)PcBb0 0 0 0 Bh2 (Neon Rings Vignette) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Neon Rings Vignette)PcBb2 (Water) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Water)PcBb0 0 0 0 Bh2 (Pink Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Pink Radial)Pc(Diamond Cubes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Diamond Cubes)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(R=0 G=0 B=0)Pc0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.306798 0.242466 0.247654 0 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.193668 0.150057 0.155337 0 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.084596 0.061311 0.065766 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.037049 0.025086 0.025086 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.6318 0.219425 0 0 0.247059 0.662745 0.960784 Xa(R=63 G=169 B=245)Pc0.55407 0 0.965515 0 0.478431 0.788235 0.262745 Xa(R=122 G=201 B=67)Pc0 0.508354 0.961639 0 1 0.576471 0.117647 Xa(R=255 G=147 B=30)Pc0 0.965057 0.900572 0 1 0.113725 0.145098 Xa(R=255 G=29 B=37)Pc0 0.661738 0.032776 0 1 0.482353 0.67451 Xa(R=255 G=123 B=172)Pc0.253758 0.127169 0.116762 0 0.741176 0.8 0.831373 Xa(R=189 G=204 B=212)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 2 79 255 79 0 50 Lb(Layer 3) Ln0 Au0 O0.001923 0.157961 0.589929 0 1 0.839216 0.498039 Xa0 J 0 j 1 w 10 M []0 d0 XR3840.0117 -1810.0479 m3836.5566 -1810.2627 3833.1055 -1810.6807 3829.6582 -1811.25 c3792.9082 -1817.3164 3767.8848 -1848.5029 3733.6191 -1860.4873 c3725.6328 -1863.2813 3717.4023 -1864.5195 3708.959 -1864.291 c3698.3535 -1864.0039 3690.1602 -1858.7969 3682.0811 -1852.333 c3674.6377 -1846.3779 3669.0498 -1838.9131 3662.9551 -1831.6846 c3656.0947 -1823.5488 3648.5645 -1815.9854 3640.4766 -1809.0732 c3612.7734 -1785.3984 3574.5684 -1767.7451 3537.625 -1772.8477 c3502.4814 -1777.7002 3473.165 -1803.6211 3451.0654 -1829.5742 c3430.0137 -1854.2979 3414.2109 -1885.0088 3388.8477 -1905.7334 c3357.1924 -1931.5986 3314.5293 -1905.3545 3288.5176 -1883.4561 c3273.1855 -1870.5488 3258.9111 -1856.4385 3243.6914 -1843.3994 c3229.752 -1831.459 3216.543 -1819.2969 3198.9248 -1813.125 c3165.4639 -1801.4014 3130.5352 -1819.2715 3105.4014 -1840.4717 c3077.7871 -1863.7637 3055.8164 -1893.2783 3030.4463 -1918.8623 c3017.8008 -1931.6133 3002.2598 -1946.833 2982.8066 -1943.3467 c2966.0156 -1940.3369 2949.4141 -1928.1045 2936.1719 -1917.9443 c2921.002 -1906.3066 2906.1006 -1894.3438 2890.1465 -1883.7734 c2874.9209 -1873.6865 2858.1484 -1863.6045 2840.7139 -1857.9141 c2814.5459 -1849.375 2785.8887 -1854.4141 2760.2207 -1862.2129 c2732.8086 -1870.543 2707.2783 -1884.2754 2683.6309 -1900.2725 c2660.7109 -1915.7783 2639.8418 -1933.874 2618.7529 -1951.7148 c2597.5625 -1969.6426 2576.165 -1988.2012 2562.2725 -2012.6318 c2558.1221 -2019.9297 2569.3545 -2026.4775 2573.4971 -2019.1924 c2591.21 -1988.0459 2622.0674 -1965.5566 2649.0869 -1942.9111 c2677.5889 -1919.0234 2708.291 -1896.8418 2742.7393 -1882.3379 c2775.8076 -1868.415 2815.2686 -1858.9326 2849.1445 -1875.2061 c2866.6377 -1883.6084 2883.2842 -1894.2979 2898.9531 -1905.7031 c2914.082 -1916.7158 2928.207 -1929.1719 2944.0293 -1939.1807 c2958.2256 -1948.1611 2973.4326 -1957.1523 2990.7676 -1956.9365 c3008.9629 -1956.709 3023.9814 -1943.0693 3036.3965 -1931.2373 c3062.6436 -1906.2227 3084.335 -1876.6963 3111.3799 -1852.4609 c3137.5645 -1828.9961 3173.8945 -1812.3047 3207.3809 -1831.1113 c3215.416 -1835.624 3221.8672 -1842.209 3228.9639 -1847.9688 c3237.0859 -1854.5605 3244.8359 -1861.6064 3252.5596 -1868.6543 c3266.9795 -1881.8125 3281.2705 -1895.0986 3297.0674 -1906.6191 c3304.5645 -1912.0869 3313.1719 -1915.9463 3321.5684 -1919.8477 c3330.7422 -1924.1104 3340.2383 -1927.6162 3350.2676 -1929.1455 c3366.6963 -1931.6514 3382.085 -1926.9043 3395.2441 -1917.0986 c3421.252 -1897.7178 3437.2764 -1866.7334 3457.5576 -1842 c3479.8115 -1814.8613 3509.3301 -1787.9082 3546.0195 -1784.8799 c3565.2822 -1783.2891 3583.9971 -1789.9199 3600.8418 -1798.6504 c3619.1465 -1808.1367 3634.9248 -1820.1748 3648.8809 -1835.333 c3657.8975 -1845.127 3665.2793 -1855.8105 3675.9805 -1863.9629 c3680.6934 -1867.5527 3685.6104 -1870.7217 3690.8223 -1873.5371 c3696.2559 -1876.4736 3702.8818 -1876.9258 3708.959 -1877.291 c3733.2383 -1878.75 3755.835 -1865.8428 3775.3545 -1852.9463 c3795.6016 -1839.5693 3815.3066 -1825.0137 3840.0117 -1823.042 C3840.0117 -1810.0479 Lf2840.4609 -2159.9268 m2851.1787 -2141.3623 2868.0957 -2126.7383 2885.6396 -2114.752 c2909.9619 -2098.1338 2935.2988 -2083.7412 2961.668 -2070.6387 c2987.9863 -2057.5625 3013.6895 -2042.6836 3041.5488 -2033.0703 c3070.0244 -2023.2432 3099.8096 -2020.2354 3129.7559 -2023.0596 c3159.7305 -2025.8867 3187.5 -2035.9434 3214.2344 -2049.3096 c3240.1113 -2062.2471 3266.3721 -2075.1191 3294.7734 -2081.4668 c3308.8965 -2084.623 3323.8594 -2086.5283 3338.2344 -2084.3984 c3351.2871 -2082.4658 3363.7832 -2077.2861 3375.2383 -2070.8809 c3386.5313 -2064.5664 3396.832 -2056.5322 3406.7559 -2048.2793 c3411.3887 -2044.4258 3415.9199 -2040.4502 3420.4551 -2036.4814 c3425.8281 -2031.7793 3433.3174 -2028.3662 3439.5039 -2024.8369 c3463.2646 -2011.2861 3489.4023 -2002.2275 3516.7754 -2009.1836 c3543.5068 -2015.9766 3568.291 -2029.5869 3594.1738 -2038.8818 c3621.916 -2048.8447 3650.416 -2051.7373 3679.7305 -2052.2852 c3686.584 -2052.4131 3693.4404 -2052.4131 3700.2949 -2052.415 c3705.9902 -2052.416 3712.0605 -2050.5615 3717.5156 -2049.0039 c3728.8027 -2045.7783 3738.8574 -2039.2764 3743.6143 -2028.1934 c3746.8828 -2020.5781 3735.6875 -2013.9482 3732.3896 -2021.6328 c3727.5508 -2032.9053 3717.0352 -2036.0605 3705.8779 -2038.498 c3699.5566 -2039.8799 3693.0762 -2039.4199 3686.6289 -2039.3721 c3679.0508 -2039.3154 3671.4746 -2039.1328 3663.9043 -2038.7842 c3648.6748 -2038.083 3633.6016 -2036.5674 3618.7881 -2032.8662 c3605.0957 -2029.4453 3591.8594 -2024.4023 3578.8125 -2019.0781 c3553.0889 -2008.5791 3526.582 -1994.3457 3498.2617 -1993.5713 c3470.2705 -1992.8066 3444.2461 -2006.4102 3421.0801 -2020.6611 c3409.9219 -2027.5244 3400.6543 -2036.7803 3390.4063 -2044.9043 c3380.2852 -2052.9268 3369.3301 -2059.9824 3357.5332 -2065.2705 c3344.6455 -2071.0469 3331.3418 -2072.9854 3317.3555 -2071.8809 c3302.8467 -2070.7354 3288.6045 -2066.9873 3274.8828 -2062.2666 c3247.0869 -2052.7041 3222.0781 -2037.126 3194.9785 -2026.0205 c3167.6055 -2014.8037 3137.9854 -2009.1758 3108.4346 -2008.9893 c3078.9873 -2008.8027 3050.4746 -2015.0713 3023.2617 -2026.1035 c3009.5137 -2031.6758 2996.2305 -2038.291 2983.2334 -2045.4248 c2970.4277 -2052.4531 2956.9746 -2058.4023 2943.9463 -2065.0137 c2918.8965 -2077.7246 2894.5771 -2092.0732 2871.8535 -2108.6211 c2852.9688 -2122.374 2836.3926 -2139.0469 2825.9727 -2159.9268 C2840.4609 -2159.9268 Lf*u1 D2874.1953 -1784.501 m2879.9707 -1780.5762 2885.3672 -1776.165 2890.8398 -1771.8359 c2893.4443 -1769.7764 2897.3965 -1768 2899.5137 -1765.4824 c2902.2168 -1762.2695 2905.001 -1759.1348 2907.8633 -1756.0625 c2918.0752 -1745.1006 2929.4111 -1735.2285 2940.8418 -1725.5732 c2964.79 -1705.3438 2988.5264 -1684.8965 3013.2402 -1665.5967 c3062.3672 -1627.2324 3115.583 -1594.583 3170.3066 -1564.8613 c3197.7021 -1549.9814 3225.7607 -1536.5303 3253.8945 -1523.123 c3281.8848 -1509.7832 3309.9043 -1496.4619 3338.5293 -1484.5264 c3367.5254 -1472.4355 3397.2979 -1463.2373 3427.0059 -1453.1826 c3457.1875 -1442.9668 3487.8799 -1434.2051 3519.0664 -1427.6357 c3532.1348 -1424.8828 3545.2998 -1422.6045 3558.5264 -1420.7607 c3571.6016 -1418.9375 3584.585 -1416.5938 3597.6719 -1414.8379 c3606.5244 -1413.6504 3615.4004 -1412.6777 3624.2852 -1411.7734 C3622.4473 -1420.0439 3620.4082 -1428.2686 3618.0615 -1436.415 c3613.7891 -1451.2412 3607.9297 -1465.6406 3602.791 -1480.1836 c3597.4551 -1495.2822 3592.8398 -1511.0137 3585.9805 -1525.4922 c3584.4922 -1528.6328 3583.2246 -1531.8691 3582.3271 -1535.2266 c3581.8926 -1536.8506 3581.7695 -1538.5664 3581.5586 -1540.2275 C3581.9912 -1539.3955 3581.8652 -1539.6953 3581.1807 -1541.1299 C3580.7637 -1542.1016 3580.3516 -1543.0742 3579.9424 -1544.0488 c3577.5303 -1550.0654 3575.6924 -1556.3486 3575.4863 -1562.8672 c3575.3779 -1566.3086 3578.5254 -1569.502 3581.9863 -1569.3672 c3591.2051 -1569.0098 3597.916 -1564.0371 3606.1582 -1560.6914 c3614.6328 -1557.2529 3623.6387 -1555.5938 3632.5176 -1553.5752 c3636.7959 -1552.6025 3641.0186 -1551.4492 3645.1689 -1550.0254 c3647.2637 -1549.3066 3649.2939 -1548.4111 3651.3301 -1547.5439 c3652.3457 -1547.0957 3653.3477 -1546.6182 3654.334 -1546.1104 c3655.5742 -1545.4971 3655.9463 -1545.209 3655.916 -1545.0947 C3659.4287 -1544.4199 3662.6836 -1542.8984 3665.9512 -1541.4189 c3674.9902 -1537.3232 3717.4688 -1516.8984 3699.2773 -1503.249 c3693.9668 -1499.2637 3688.8164 -1505.502 3690.1719 -1510.7402 C3689.6729 -1511.2969 3689.1396 -1511.8242 3688.6016 -1512.3398 c3685.8447 -1514.9805 3682.6201 -1517.1035 3679.4316 -1519.1768 c3672.5186 -1523.6719 3663.7158 -1528.5439 3656.9541 -1531.249 c3655.8262 -1531.7002 3654.6787 -1532.1025 3653.5029 -1532.4082 c3653.4766 -1532.415 3653.4629 -1532.4199 3653.4395 -1532.4258 C3651.3291 -1532.6992 3649.6416 -1533.8867 3647.7734 -1534.8857 c3640.5586 -1538.7422 3632.1914 -1540.3682 3624.2734 -1542.1084 c3616.9072 -1543.7266 3609.8027 -1545.6104 3602.7021 -1548.1563 c3598.3594 -1549.7129 3594.2764 -1552.4346 3589.9736 -1554.3184 C3590.7861 -1551.5781 3591.8555 -1548.9053 3593 -1546.3828 c3594.4043 -1543.291 3594.4326 -1540.293 3595.2998 -1537.0469 c3596.3867 -1532.9775 3598.793 -1529.498 3600.2539 -1525.5908 c3605.6797 -1511.084 3610.7939 -1496.4648 3615.9541 -1481.8633 c3621.0977 -1467.3066 3626.8379 -1452.916 3631.1143 -1438.0762 c3633.7422 -1428.9561 3635.9258 -1419.7148 3637.8799 -1410.4258 C3638.1387 -1410.4004 3638.3965 -1410.376 3638.6543 -1410.3506 C3639.0781 -1409.2168 3639.4863 -1408.0488 3639.7012 -1406.8633 C3638.5684 -1405.4805 3638 -1403.7236 3638 -1401.8291 C3638 -1400.9717 L3638 -1398.376 3639.1738 -1396.0439 3641.1367 -1394.5752 C3641.2617 -1393.9121 3641.3291 -1393.25 3641.4521 -1392.5879 c3644.2949 -1377.3398 3646.7549 -1362.0293 3649.6494 -1346.792 c3652.5771 -1331.376 3656.373 -1316.2148 3660.1641 -1300.9971 c3668.123 -1269.0605 3675.8105 -1237.0313 3681.2705 -1204.5576 c3682.541 -1197.0039 3684.4063 -1189.6084 3685.4199 -1181.9863 c3686.5098 -1173.7998 3687.2607 -1165.5811 3687.9541 -1157.3525 c3688.5928 -1149.7666 3689.2129 -1142.1807 3690.0469 -1134.6133 c3690.8906 -1126.9531 3690.6641 -1119.1533 3691.0293 -1111.4463 c3691.75 -1096.1475 3692.9668 -1080.8804 3693.373 -1065.5664 c3693.7998 -1049.4893 3693.377 -1033.355 3692.667 -1017.2915 c3691.2539 -985.3198 3687.4873 -953.4678 3681.2627 -922.0747 c3678.3545 -907.4053 3674.043 -892.8013 3670.1729 -878.3584 c3666.2725 -863.8032 3661.9551 -849.3564 3656.832 -835.1816 c3651.4014 -820.1519 3644.834 -805.5005 3638.8984 -790.6616 c3635.8545 -783.0508 3633.3604 -774.7886 3629.6025 -767.5063 c3626.8584 -762.1875 3623.5938 -757.3535 3621.5107 -751.7222 C3621.6709 -739.6851 3621.7012 -727.6563 3622.21 -715.6147 c3622.8535 -700.3687 3623.2998 -685.2119 3621.2568 -670.0493 c3619.4863 -656.9009 3615.4805 -643.6553 3611.5742 -630.8242 C3616.707 -639.9077 3620.8662 -649.7656 3625.0342 -659.1523 c3637.5225 -687.2769 3647.666 -716.4478 3656.8545 -745.7959 c3675.6846 -805.9404 3689.6104 -867.6226 3697.4326 -930.1875 c3705.4297 -994.1558 3704 -1058.3364 3704 -1122.6602 C3704 -1172.0488 L3704 -1188.543 3704.707 -1205.1094 3703.7334 -1221.582 c3702.7559 -1238.1201 3699.9414 -1254.373 3698.1582 -1270.8125 c3696.3789 -1287.2236 3695.7871 -1303.7373 3694.8174 -1320.208 c3693.4072 -1344.1641 3690.3438 -1368.0176 3687.3691 -1391.8584 C3687.1914 -1391.8848 3687.0137 -1391.9063 3686.8359 -1391.9326 C3686.9111 -1396.4805 3686.9434 -1401.1631 3685.6934 -1405.4805 C3685.1504 -1409.9688 3684.6201 -1414.458 3684.1201 -1418.9473 c3682.251 -1435.707 3680.3301 -1452.4609 3677.9922 -1469.1631 c3676.3477 -1480.8965 3671.1025 -1492.2256 3667.3867 -1503.6416 C3665.9746 -1504.7568 3665 -1506.5391 3665 -1509 C3665 -1511.8613 L3665 -1519.1729 3676.1719 -1520.7529 3678.0146 -1513.5889 c3681.4072 -1500.4033 3686.75 -1487.7715 3690.1406 -1474.585 c3692.0332 -1467.2246 3692.3447 -1458.9756 3693.293 -1451.4346 c3694.335 -1443.1475 3695.3242 -1434.8506 3696.2656 -1426.5527 c3697.1582 -1418.6934 3698.0293 -1410.832 3698.9121 -1402.9727 C3717.2754 -1399.8193 3735.5117 -1396.1074 3754.1582 -1394.5273 c3780.6992 -1392.2773 3807 -1392.3486 3834 -1392.3486 c3842 -1392.3486 3842 -1379.3486 3834 -1379.3486 c3803 -1379.3496 3772.1367 -1379.3555 3741.3906 -1382.7734 c3727.5576 -1384.3105 3714.0723 -1387.2041 3700.4229 -1389.6895 C3700.835 -1386.1133 3701.252 -1382.5371 3701.6797 -1378.9629 c3703.6328 -1362.6621 3706.0645 -1346.4727 3707.2373 -1330.0879 c3708.4141 -1313.6309 3709.0117 -1297.1387 3710.3516 -1280.6914 c3711.6943 -1264.2051 3714.3965 -1247.8975 3715.9629 -1231.4277 c3717.5273 -1214.9727 3717 -1198.4834 3717 -1181.9766 C3717 -1132.4922 L3717 -1068.1475 3718.7764 -1003.7944 3711.5674 -939.7373 c3704.5029 -876.9697 3691.166 -815.1216 3673.0371 -754.6519 c3663.5 -722.8442 3652.7021 -691.4316 3639.7695 -660.8384 c3633.9961 -647.1821 3627.9229 -633.3501 3620.4883 -620.5039 c3617.3262 -615.0391 3612.6465 -610.3428 3610.4121 -605.4287 c3607.3867 -598.7773 3602.7227 -592.9385 3600.2461 -586.041 c3599.3486 -583.5415 3597.457 -582.1885 3595.3916 -581.7559 C3595.3438 -581.6445 3595.3008 -581.5303 3595.252 -581.4189 c3589.582 -568.4121 3584.6396 -555.0991 3579.0068 -542.0742 c3576.6738 -536.6792 3574.1074 -531.3828 3571.3672 -526.1699 C3580.498 -531.5786 3590.1084 -536.2803 3599.6777 -540.7314 c3612.8291 -546.8486 3626.3164 -552.252 3639.8994 -557.3247 c3653.0566 -562.2388 3666.6348 -566.1782 3679.6641 -571.3936 c3702.9102 -580.6978 3726.21 -590.2349 3747.4648 -603.6211 c3751.7588 -606.3257 3755.8438 -610.1055 3760.4785 -612.0801 c3764.5586 -613.8184 3768.2422 -616.6538 3771.8594 -619.1714 c3778.7852 -623.9932 3786.2412 -629.8335 3795.0068 -630.2725 c3798.4824 -630.4463 3801.5938 -627.1841 3801.5068 -623.7725 c3801.2109 -612.1563 3796.3721 -600.9834 3792.6475 -590.1499 c3790.417 -583.6616 3788.8662 -577.1787 3786.1201 -570.8203 c3782.877 -563.3105 3778.7422 -556.1895 3774.5977 -549.1514 c3760.7051 -525.5581 3741.9268 -503.9609 3722.0781 -485.1875 c3702.0771 -466.2705 3679.2842 -450.1445 3654.999 -437.2124 c3628.6719 -423.1924 3600.2988 -413.4019 3571.9287 -404.4507 c3559.8389 -400.6362 3547.7002 -396.979 3535.5996 -393.2021 c3529.0273 -391.1509 3522.5049 -389.0073 3515.9434 -387 C3569.1123 -387 L3585.5859 -387 3601.8555 -387.8154 3618.2959 -388.8291 c3649.6201 -390.7607 3680.9648 -392.5474 3712.3496 -393.0557 c3728.332 -393.3149 3744.3232 -393.2178 3760.3086 -393.2178 c3772.0713 -393.2178 3788.8984 -396.0732 3798.3047 -387.2075 c3807.9023 -378.1616 3793.5488 -366.1035 3787.2031 -360.3442 c3777.6738 -351.6958 3767.7295 -345.8091 3755.3154 -342.1113 c3741.6348 -338.0366 3727.2764 -336.564 3713.373 -333.4043 c3706.3047 -331.7979 3699.3223 -329.8462 3692.4082 -327.6743 c3684.6104 -325.2256 3676.1377 -324.8286 3668.002 -324.2178 c3637.6133 -321.9351 3606.8086 -323.2432 3576.3535 -323.2432 c3569.3457 -323.2432 3562.4033 -322.9614 3555.4697 -324.0532 c3547.5293 -325.3037 3539.6895 -327.1304 3531.9131 -329.1445 c3526.1016 -330.6499 3520.334 -332.3213 3514.5732 -334.0103 C3530.6602 -316.9004 3545.3291 -298.4883 3556.6934 -277.8481 c3561.4746 -269.1631 3563.3604 -263.8198 3567.1318 -256.6196 c3570.6895 -249.8286 3574.4043 -243.1221 3577.9502 -236.3247 c3582.0322 -228.499 3585.8828 -220.5645 3589.2305 -212.3955 c3591.6563 -206.4785 3594.1641 -199.8086 3593.9033 -193.3042 c3593.8096 -190.9707 3593.2461 -188.2734 3591.7939 -186.3838 c3589.1914 -182.9976 3586.8555 -181.5474 3582.0352 -181.0479 c3577.0996 -180.5371 3572.1152 -181.5322 3567.2168 -182.04 c3561.6494 -182.6167 3556.5371 -184.5034 3551.0049 -185.6118 c3538.2188 -188.1738 3525.9941 -194.7212 3514.9082 -201.3975 c3502.7832 -208.6992 3491.5146 -217.5117 3480.9922 -226.9517 c3471.6807 -235.3057 3462.1836 -243.7383 3454.418 -253.5889 c3446.668 -263.4189 3440.7969 -274.3159 3436.582 -286.0928 c3435.207 -289.9326 3433.8906 -293.8198 3432.6426 -297.7437 C3431.7627 -295.7007 3430.8643 -293.6709 3429.9678 -291.6548 c3420.7363 -270.8931 3414.4824 -248.1304 3398.8818 -230.9512 c3380.1777 -210.3555 3350.9688 -208.144 3324.8574 -208.5322 c3309.7891 -208.7559 3294.9121 -209.3955 3279.9531 -211.1904 c3264.6484 -213.0264 3249.3848 -215.1899 3234.2266 -217.9912 c3206.0098 -223.2065 3177.7832 -229.8701 3151.2383 -241.1187 c3142.1074 -244.9883 3126.9023 -250.8926 3126.1973 -262.6265 c3125.7617 -269.8784 3133.2402 -274.1333 3139.2939 -275.249 c3143.6016 -276.0435 3148.0273 -276.2173 3152.3975 -276.2368 c3154.6914 -276.2471 3157.0576 -276.1123 3159.3301 -276.4922 c3163.1172 -277.1245 3165.9248 -279.2256 3169.873 -279.2485 c3181.5723 -279.3174 3193.2412 -280.7568 3204.792 -282.5044 c3215.6113 -284.1411 3226.3008 -285.4526 3237.1797 -286.5879 c3257.8037 -288.7397 3278.2754 -292.6689 3298.127 -298.6826 c3307.9307 -301.6528 3317.5352 -305.2686 3326.8281 -309.5786 c3336.8672 -314.2354 3345.3809 -320.1289 3354.2041 -326.7461 c3362.0068 -332.5981 3369.752 -338.4453 3377.6816 -344.0024 C3331.6582 -343.8228 3285.8037 -344.5469 3240.1455 -352.6328 c3209.1885 -358.1152 3178.8672 -366.7163 3148.8848 -376.0635 c3133.9316 -380.7256 3119.0508 -385.6172 3104.1572 -390.4624 c3089.3467 -395.2803 3074.8496 -399.9868 3060.6719 -406.4917 c3046.9189 -412.8022 3033.4824 -419.7852 3019.9131 -426.4751 c3006.9883 -432.8472 2993.4092 -437.9839 2980.708 -444.7466 c2974.7295 -447.9297 2968.834 -451.269 2962.9063 -454.5474 c2957.6973 -457.4287 2950.8955 -459.7881 2946.5645 -463.8809 c2939.1982 -470.8423 2927.6387 -473.2593 2922.3076 -482.478 c2919.8418 -486.7417 2922.9756 -492.2588 2927.9199 -492.2588 c2942.1885 -492.2588 2956.3984 -492.4526 2970.6279 -491.2334 c2977.6309 -490.6338 2984.6211 -489.9282 2991.6387 -489.5117 c2994.9102 -489.3174 2998.4414 -489.6753 3001.6563 -489.0264 c3005.9805 -488.1543 3010.2959 -487.2412 3014.6035 -486.2871 c3028.8457 -483.1323 3042.9131 -479.4131 3057.251 -476.6831 c3064.4512 -475.312 3071.666 -474.4629 3078.9951 -474.2734 c3086.2969 -474.085 3093.3438 -470.5161 3099.9678 -467.6904 c3112.9414 -462.1567 3126.4092 -458.4692 3140.0771 -455.1113 c3146.3145 -453.5786 3152.0713 -450.6548 3158.2715 -449.188 c3166.1367 -447.3276 3173.875 -444.9492 3181.5625 -442.4663 c3195.9346 -437.8242 3210.0811 -432.5029 3224.5713 -428.2261 c3227.6855 -427.3066 3230.8242 -426.4775 3233.9658 -425.6553 C3230.4072 -427.2905 3226.7988 -428.833 3223.2402 -430.4976 c3210.2461 -436.5781 3197.6455 -443.4512 3185.585 -451.2236 c3174.1934 -458.5649 3163.707 -466.8291 3153.1621 -475.3306 c3147.6309 -479.7896 3142.0059 -484.1084 3136.1543 -488.1406 c3130.209 -492.2363 3124.9141 -497.4619 3119.4268 -502.1538 c3099.6641 -519.0513 3079.9697 -536.1426 3063.5313 -556.3984 c3046.6768 -577.1665 3028.2295 -596.2793 3013.3838 -618.6709 c3006.1631 -629.5615 3000.6982 -641.228 2994.4795 -652.6655 c2987.4551 -665.583 2981.0381 -678.8257 2975.1738 -692.3076 c2972.4727 -698.5151 2969.916 -704.7847 2967.4688 -711.0962 c2966.584 -713.3784 2965.6416 -715.6968 2964.7227 -718.0376 C2955.2256 -723.0122 2946.0596 -728.4756 2938.3262 -736.188 c2932.3848 -742.1133 2941.5781 -751.3047 2947.5176 -745.3804 c2951.0439 -741.8652 2955.3926 -739.7021 2959.1221 -736.6494 C2956.1963 -747.4341 2951.3018 -757.521 2946.3105 -767.5063 c2942.5742 -774.9814 2953.7871 -781.5674 2957.5352 -774.0679 c2963.7783 -761.5771 2969.6914 -748.9771 2972.8174 -735.2974 c2973.4238 -732.6421 2974.1533 -729.9888 2974.9707 -727.3428 C2975.6484 -727.0488 2976.3184 -726.7559 2976.9727 -726.4585 c2990.793 -720.1821 3003.6934 -711.7612 3016.8457 -704.2339 c3030.2598 -696.5576 3044.1631 -689.8379 3057.4893 -681.9922 c3070.6914 -674.2192 3083.6846 -666.1045 3097.2363 -658.9414 c3110.6006 -651.8779 3123.166 -643.2544 3136.2314 -635.6299 c3149.5342 -627.8667 3163.166 -620.6802 3177.2266 -614.3838 c3184.3301 -611.2021 3191.1006 -606.6753 3197.9082 -602.8931 c3205.377 -598.7437 3212.8457 -594.5942 3220.3145 -590.4453 c3234.4316 -582.6025 3249.21 -575.377 3262.7002 -566.498 c3281.4199 -554.1782 3298.0186 -538.8882 3315.332 -524.7407 c3319.5693 -521.2773 3324.709 -518.2188 3328.5566 -514.3574 c3332.5332 -510.3667 3336.4492 -506.3203 3340.3125 -502.2192 c3348.4395 -493.5908 3356.2471 -484.6646 3363.8438 -475.5674 c3371.8828 -465.9404 3379.877 -456.085 3387.4775 -445.9624 C3387.2676 -446.4897 3387.0547 -447.0166 3386.8447 -447.5439 c3375.2129 -476.7813 3362.5244 -505.5098 3351.5742 -535.0361 c3346.2852 -549.2998 3340.9629 -563.3877 3334.9316 -577.3525 c3329.2773 -590.4404 3323.9951 -603.6797 3319.6465 -617.2627 c3310.1533 -646.9175 3307.0547 -678.457 3303.0811 -709.2236 c3300.9834 -725.4609 3299.1738 -741.7344 3297.7178 -758.042 c3296.3105 -773.8149 3296.4121 -789.4878 3296.5762 -805.3135 c3296.7432 -821.5425 3297.2188 -837.7686 3298.2363 -853.9678 c3298.7168 -861.6187 3299.0352 -869.1592 3301.1113 -876.5527 c3303.2266 -884.085 3305.25 -891.6436 3307.2695 -899.2021 c3309.1621 -906.2813 3311.043 -913.3633 3312.9551 -920.437 c3314.6396 -926.6709 3316.2725 -935.6123 3319.1309 -940.1685 c3320.8633 -942.9307 3321.4404 -947.627 3323.0146 -950.8638 c3325.1465 -955.2485 3330.21 -957.7261 3334.1572 -957.6338 c3343.2344 -957.4219 3348.8105 -947.457 3353.209 -940.7856 c3355.7754 -936.8916 3357.6768 -934.1597 3360.4639 -929.2769 c3364.6133 -922.0093 3368.7441 -914.7314 3372.8262 -907.4268 c3387.1719 -881.7593 3399.8135 -855.9268 3408.3652 -827.7124 c3417.0156 -799.1699 3422.457 -769.7485 3427.9346 -740.4712 c3433.8291 -708.9697 3439.9531 -677.6172 3444.3594 -645.8545 c3446.9746 -627.0044 3449.1816 -608.1021 3451.0195 -589.1631 C3456.5361 -606.3984 3462.4561 -623.5093 3468.4473 -640.5752 c3478.4004 -668.9282 3488.0996 -697.4082 3499.2031 -725.3374 c3510.0586 -752.6455 3522.4824 -779.4272 3538.4512 -804.1553 c3545.9316 -815.7397 3551.6992 -827.9683 3560.4072 -838.8301 c3563.7002 -842.937 3566.8262 -847.0137 3570.0234 -851.2012 c3573.3906 -855.6128 3577.458 -860.082 3582.8984 -861.8657 c3596.1133 -866.1992 3604.9521 -853.5303 3609.8457 -843.1934 c3615.4551 -831.3467 3617.5967 -818.2207 3618.3086 -805.2305 c3618.793 -796.3975 3619.6855 -787.6147 3620.3867 -778.8062 C3621.9805 -782.6895 3623.3838 -786.6699 3624.9229 -790.5171 c3630.6846 -804.9209 3636.8652 -819.1821 3642.4385 -833.6533 c3653.2578 -861.7495 3660.1963 -891.2046 3667.4414 -920.3677 c3675.1113 -951.2451 3678.0107 -983.6826 3679.5781 -1015.3896 c3681.1387 -1046.9536 3679.7666 -1078.1597 3678.1172 -1109.6729 c3677.748 -1116.7178 3677.5176 -1123.7686 3677.4961 -1130.8232 c3677.4717 -1138.9121 3675.7842 -1147.3721 3675.1104 -1155.457 c3674.4775 -1163.0479 3673.8125 -1170.6328 3672.9072 -1178.1963 c3671.9014 -1186.5967 3669.8008 -1194.7178 3668.4033 -1203.0313 c3662.9424 -1235.5068 3655.0918 -1267.5342 3647.1338 -1299.4697 c3639.5801 -1329.7773 3634.2354 -1360.2793 3628.5146 -1390.9658 c3628.0352 -1393.5361 3627.5381 -1396.1035 3627.0313 -1398.668 C3571.9004 -1404.6719 3517.0156 -1412.7861 3463.585 -1428.0986 c3448.3174 -1432.4746 3433.1914 -1437.334 3418.166 -1442.4795 c3403.3633 -1447.5488 3388.3213 -1451.8457 3373.5645 -1457.0771 c3344.2119 -1467.4834 3315.623 -1479.9785 3287.3623 -1493.0234 c3230.8545 -1519.1064 3174.8994 -1546.1934 3121.1748 -1577.6855 c3074.4668 -1605.0645 3030.0811 -1635.2432 2987.9043 -1669.2109 c2966.9795 -1686.0635 2946.5723 -1703.5791 2926.1602 -1721.0459 c2916.1465 -1729.6162 2906.4355 -1738.5361 2897.4463 -1748.1836 c2895.4033 -1750.377 2893.4307 -1752.6348 2891.4805 -1754.9121 c2889.207 -1757.5654 2885.7568 -1759.4375 2883.0049 -1761.585 c2877.9219 -1765.5508 2872.9717 -1769.6494 2867.6328 -1773.2764 c2860.7441 -1777.957 2867.2393 -1789.2266 2874.1953 -1784.501 cf0 D3552.959 -412.1367 m3567.2813 -416.5444 3581.5859 -421.0327 3595.7363 -425.9697 c3623.8018 -435.7603 3650.5859 -448.1084 3675.3936 -464.563 c3697.6523 -479.3271 3717.5 -497.3643 3735.0273 -517.4805 c3749.2793 -533.8374 3761.792 -551.3994 3771.7227 -570.7124 c3776.333 -579.6772 3778.5156 -589.1069 3781.8262 -598.521 c3783.5508 -603.4277 3785.5811 -608.564 3786.9502 -613.7822 C3785.917 -613.0928 3784.9336 -612.3999 3784.0332 -611.8071 c3779.2939 -608.688 3774.7871 -605.2295 3769.8975 -602.3408 c3767.9316 -601.1792 3765.7168 -600.4795 3763.9199 -599.146 c3761.1738 -597.1084 3758.334 -595.1982 3755.4746 -593.3257 c3749.1602 -589.1919 3742.5586 -585.5078 3735.8711 -582.02 c3709.8438 -568.4443 3682.2246 -558.6836 3654.6406 -548.894 c3627.5303 -539.2725 3600.709 -528.3691 3575.9258 -513.6421 c3568.9219 -509.4795 3562.2559 -504.8467 3555.7529 -499.9863 C3548.5479 -489.1187 3540.7627 -478.624 3532.7939 -468.4438 c3524.0352 -457.2539 3514.1699 -446.4106 3503.5273 -436.9893 c3493.418 -428.041 3482.3066 -420.3081 3472.1621 -411.4004 c3465.7363 -405.7583 3459.4902 -399.8774 3453.9551 -393.3491 c3452.5225 -391.6602 3451.1348 -389.9341 3449.7695 -388.1895 C3469.9482 -389.6592 3489.9258 -392.7891 3509.5195 -398.4429 c3524.082 -402.6445 3538.4658 -407.6768 3552.959 -412.1367 cf3557.0566 -336.7798 m3563.9258 -335.5688 3571.1113 -336 3578.0723 -336 C3600.8711 -336 L3616.5215 -336 3632.1797 -335.9863 3647.8281 -336.2437 c3655.1797 -336.3643 3662.5234 -336.7461 3669.8535 -337.2969 c3673.6328 -337.5801 3677.4004 -338.0073 3681.1641 -338.4463 c3685.748 -338.9805 3689.9336 -340.5313 3694.3428 -341.8477 c3708.6768 -346.1289 3723.3057 -348.3892 3737.9287 -351.3384 c3749.5156 -353.6748 3764.4141 -356.499 3773.2246 -365.1377 c3777.1055 -368.9424 3781.3125 -372.3862 3785.084 -376.3076 c3785.875 -377.1289 3786.7979 -378.0732 3787.5215 -379.0967 C3786.3125 -379.7036 3784.5752 -379.7197 3783.2715 -379.8604 c3776.3594 -380.6084 3769.2041 -380 3762.2646 -380 C3736.8271 -380 L3705.5703 -380 3674.3789 -379.041 3643.1729 -377.3013 c3627.0859 -376.4043 3611.0059 -375.3164 3594.9258 -374.3086 c3578.4658 -373.2769 3561.7422 -374 3545.249 -374 C3461.002 -374 L3465.043 -371.9878 3469.1035 -370.0254 3473.1309 -367.9063 c3481.0107 -363.7593 3488.1904 -358.7271 3494.9082 -353.0859 C3500.5615 -351.2822 3506.3828 -349.9614 3512.0703 -348.2954 c3526.9336 -343.9419 3541.7832 -339.4727 3557.0566 -336.7798 cf3339.4355 -301.3154 m3313.9941 -288.1548 3285.8672 -280.6992 3257.6934 -276.2646 c3243.1885 -273.9814 3228.5098 -273.2305 3214.0332 -270.8804 c3206.4092 -269.6421 3198.7627 -268.5415 3191.0898 -267.6543 c3187.2412 -267.2095 3183.3809 -266.8853 3179.5176 -266.6211 c3175.9707 -266.3784 3171.4121 -267.1201 3168.2129 -265.7681 c3159.1191 -261.9238 3149.4395 -264.5244 3140.1367 -262.1265 C3140.251 -262.0156 3140.3633 -261.9033 3140.4785 -261.7939 c3141.8789 -260.4644 3140.9404 -261.2954 3142.2627 -260.3652 c3143.3398 -259.6064 3144.4707 -258.9248 3145.6064 -258.2573 c3148.5088 -256.5503 3151.5625 -255.0996 3154.6299 -253.7178 c3161.4346 -250.6514 3168.5342 -248.2026 3175.6143 -245.8613 c3188.502 -241.5986 3201.6494 -237.8638 3214.9219 -234.9932 c3216.1709 -234.7231 3217.4258 -234.4756 3218.6855 -234.2622 C3219.4316 -234.1626 3220.8203 -233.9692 3220.6777 -234.0005 c3225.0938 -233.0283 3229.5195 -232.1074 3233.9561 -231.2368 c3249.1836 -228.249 3264.5527 -226.062 3279.9531 -224.1904 c3294.9189 -222.3716 3309.7852 -221.8276 3324.8574 -221.5322 c3339.9297 -221.2363 3355.5547 -221.7153 3369.8965 -226.8018 c3393.4883 -235.1675 3403.0967 -259.7549 3411.5791 -281.1284 c3416.625 -293.8442 3423.2109 -306.1865 3426.6807 -319.4653 C3424.8174 -327.644 3423.3926 -335.9209 3422.5635 -344.2319 C3417.0313 -344.2212 3411.5 -344.2021 3405.9727 -344.1685 C3404.749 -343.4673 3403.5117 -342.7822 3402.248 -342.1328 c3400.5088 -341.2393 3398.8203 -341.1724 3397.3457 -341.6362 C3390.6963 -337.5356 3384.2383 -333.1255 3377.9854 -328.4355 c3365.4785 -319.0552 3353.3496 -308.5137 3339.4355 -301.3154 cf3382.0273 -364.7129 m3387.1182 -363.1016 3392.4004 -362.6689 3397.502 -361.0649 c3399.0176 -360.5879 3400.5762 -360.001 3402.1543 -359.4292 C3402.4609 -359.5972 3402.7666 -359.7661 3403.0742 -359.9326 C3389.4766 -363.5161 3376.0762 -367.8496 3362.7549 -372.4219 C3369.0605 -369.5449 3375.4199 -366.8047 3382.0273 -364.7129 cf3217.8154 -416.6753 m3203.2617 -421.0654 3189.0273 -426.4575 3174.5449 -431.0732 c3167.4434 -433.3369 3160.2695 -435.3623 3153.0156 -437.0781 c3149.8799 -437.8203 3147.0371 -439.3979 3143.9902 -440.4634 c3140.6025 -441.6479 3137.0879 -442.4741 3133.6016 -443.3076 c3119.8115 -446.6045 3106.4443 -450.8799 3093.4063 -456.4653 c3090.3721 -457.7651 3087.3076 -458.9658 3084.1846 -460.0371 c3080.5732 -461.2764 3077.1211 -461.2896 3073.3496 -461.5132 c3066.1875 -461.9375 3059.0586 -463.145 3052.0205 -464.4854 c3038.2803 -467.1016 3024.7881 -470.689 3011.1475 -473.7515 c2997.2822 -476.8643 2983.0273 -477.1714 2968.8701 -478.3843 c2961.5605 -479.0107 2954.2422 -479.2119 2946.918 -479.2681 C2950.5498 -476.752 2954.0752 -473.9595 2957.918 -471.9893 c2970.0605 -465.7622 2981.6943 -457.4478 2994.3535 -452.3369 c3023.3926 -440.6133 3050.3867 -424.4731 3079.2666 -412.4023 c3093.5264 -406.4424 3108.9746 -402.5488 3123.6777 -397.7695 c3138.5908 -392.9219 3153.5254 -388.1411 3168.5469 -383.6411 c3198.6953 -374.6094 3229.127 -367.3838 3260.2119 -362.4438 c3295.2246 -356.8789 3330.7949 -356.2998 3366.3232 -356.6089 C3356.9775 -360.5645 3347.9365 -365.3989 3338.5674 -369.147 c3324.4004 -374.8149 3310.3164 -380.6714 3297.0098 -388.1855 c3291.0752 -391.5366 3284.1885 -393.4321 3278.0234 -396.4673 c3271.3359 -399.7593 3264.8682 -402.603 3257.8037 -404.9575 c3244.5938 -409.3599 3231.1318 -412.6582 3217.8154 -416.6753 cf3383.0059 -429.7959 m3364.835 -454.9585 3345 -478.9341 3323.3262 -501.1597 c3318.0957 -506.5234 3311.9492 -510.8301 3306.1387 -515.5483 c3299.918 -520.5996 3293.8135 -525.793 3287.6729 -530.9419 c3276.1289 -540.6221 3264.4277 -550.0957 3251.6719 -558.1543 c3237.8604 -566.8804 3222.8682 -574.1563 3208.583 -582.0928 c3194.3555 -589.9966 3180.3066 -598.6763 3165.5293 -605.4927 c3145.0117 -614.957 3125.5732 -626.5801 3106.3906 -638.4697 c3097.0039 -644.2886 3087.3066 -649.376 3077.7246 -654.8613 c3067.6484 -660.6309 3057.7832 -666.7598 3047.7627 -672.625 c3038.168 -678.2417 3028.2461 -683.1709 3018.4668 -688.4438 c3007.9531 -694.1133 2997.7568 -700.3564 2987.373 -706.2573 c2985.5059 -707.3184 2983.6152 -708.3394 2981.7148 -709.3418 C2984.2285 -703.4365 2986.9072 -697.6265 2989.4463 -691.9746 c2995.9756 -677.438 3003.8604 -663.6318 3010.7803 -649.3066 c3017.0703 -636.2837 3024.9902 -624.0967 3033.543 -612.4609 c3042.1484 -600.7544 3051.6729 -589.7339 3061.2578 -578.8286 c3070.9102 -567.8462 3080.0527 -556.4463 3090.3174 -546.0146 c3100.417 -535.7505 3111.2676 -526.2476 3122.1777 -516.8628 c3127.2881 -512.4673 3132.4258 -508.1035 3137.5313 -503.7031 c3143.2617 -498.7651 3149.5557 -494.5835 3155.5234 -489.9331 c3165.0859 -482.4814 3174.2275 -474.4595 3184.2227 -467.5791 c3194.3311 -460.6201 3204.9912 -454.3545 3215.8457 -448.6382 c3227.1816 -442.6675 3239.5713 -438.3643 3250.5 -431.7495 c3261.1797 -425.2847 3272.3164 -419.5957 3283.6934 -414.4678 c3307.7666 -403.6162 3333.457 -396.4053 3358.3447 -387.6699 c3377.9746 -380.7803 3397.7578 -374.2241 3418.0313 -369.627 C3418.3613 -369.9512 3418.6914 -370.2754 3419.0176 -370.6055 C3418.8271 -371.7798 3418.6797 -372.958 3418.5518 -374.1387 C3416.4375 -374.5625 3415.0127 -375.9326 3414.2764 -377.6343 C3413.6963 -377.1553 3413.123 -376.6665 3412.5645 -376.1523 c3406.4121 -370.4834 3397.1953 -379.6533 3403.373 -385.3447 c3405.0342 -386.8755 3406.8418 -388.2202 3408.6953 -389.5054 C3399.8086 -402.7217 3392.2246 -417.0293 3383.0059 -429.7959 cf3417.8633 -724.4141 m3411.9082 -753.7876 3407.0059 -783.333 3399.2324 -812.313 c3395.4443 -826.436 3390.9287 -840.3652 3385.4443 -853.9229 c3380.0303 -867.3071 3373.0508 -880.0439 3366.127 -892.6904 c3362.4844 -899.3442 3358.7598 -905.9531 3355.0215 -912.5537 c3351.584 -918.6221 3348.5039 -925.2344 3344.3184 -930.7827 c3342 -933.8569 3340.0625 -937.2183 3337.7998 -940.3364 c3336.7266 -941.8145 3335.4658 -943.1528 3334.1289 -944.3926 C3334.123 -944.397 L3332.6387 -942.3379 3332.2422 -937.9805 3331.3555 -935.8516 c3330.9336 -934.8354 3330.5586 -933.9307 3329.9814 -933.0107 c3329.8438 -932.7915 3329.7266 -932.6094 3329.6211 -932.4497 C3329.6475 -932.252 3329.5684 -931.7539 3329.2803 -930.7354 c3328.1504 -926.7397 3327.0547 -922.7344 3325.9639 -918.728 c3321.9805 -904.0933 3318.1758 -889.4102 3314.1211 -874.7944 c3309.8662 -859.4595 3310.4609 -842.3403 3309.9844 -826.4883 c3309.5117 -810.7378 3309.4668 -794.9766 3309.459 -779.2197 c3309.4512 -763.0259 3311.6885 -746.6729 3313.4941 -730.5928 c3315.3057 -714.4507 3317.4619 -698.3496 3319.7734 -682.272 c3321.9941 -666.8291 3324.002 -651.3369 3327.7734 -636.1802 c3331.2881 -622.0537 3336.1719 -608.3047 3341.5996 -594.8115 c3347.0078 -581.3662 3353.1963 -568.3149 3358.1621 -554.6934 c3363.6504 -539.6377 3369.2168 -524.6108 3375.0605 -509.689 c3384.2285 -486.2759 3394.3428 -463.2363 3403.8232 -439.9463 c3408.5225 -428.4019 3413.5762 -416.9946 3419.248 -405.915 C3419.2695 -406.3315 3419.2939 -406.749 3419.3135 -407.165 c3420.0127 -422.2202 3421.4668 -437.2778 3422.5605 -452.3242 c3424.9014 -484.5317 3430.4785 -516.0508 3438.6943 -547.2734 c3439.4102 -549.9951 3440.166 -552.7061 3440.915 -555.418 C3436.8115 -612.165 3429.1699 -668.6504 3417.8633 -724.4141 cf3443.3301 -510.1533 m3440.4678 -496.0923 3438.2002 -481.9424 3436.8223 -467.6475 c3435.3223 -452.0762 3434.6035 -436.4414 3433.1914 -420.8623 c3433 -418.7588 3432.8438 -416.6543 3432.7031 -414.5493 C3434.1934 -415.9741 3435.6943 -417.3872 3437.2002 -418.7949 C3437.8242 -426.6836 3437.4727 -434.7319 3437.8984 -442.8066 c3438.6787 -457.6235 3442.3408 -472.021 3443.0977 -486.8838 c3443.4932 -494.6504 3443.5127 -502.4028 3443.3301 -510.1533 Cf3439.8672 -364.5444 m3442.2471 -362.2695 3441.7207 -358.062 3439.3008 -355.5127 C3440.6504 -347.4199 3441.5752 -339.2749 3441.4434 -331.0107 c3441.3809 -327.1245 3440.8799 -323.3149 3440.0859 -319.5669 C3442.8848 -307.4658 3446.4697 -295.1978 3451.2686 -283.9321 c3456.373 -271.9502 3463.9521 -261.3228 3473.0703 -252.0811 c3483.0273 -241.9897 3493.9053 -232.2324 3505.2109 -223.6743 c3516.8496 -214.8643 3529.5596 -207.0195 3543.1445 -201.5977 c3548.8037 -199.3389 3554.4834 -198.2876 3560.3848 -196.8711 c3561.7852 -196.5352 3563.1299 -196.0649 3564.4736 -195.5586 c3564.8984 -195.3984 3565.2285 -195.2666 3565.4785 -195.1587 C3565.6299 -195.1597 3565.8184 -195.1543 3566.0605 -195.1396 c3569.0342 -194.9595 3571.9951 -194.478 3574.9561 -194.166 c3576.8438 -193.9673 3579.0127 -193.6558 3580.9229 -193.9463 C3580.9355 -194.4717 3580.8984 -194.998 3580.8613 -195.5215 c3580.8027 -196.3535 3580.9072 -195.4639 3580.5977 -197.0088 c3579.166 -204.1392 3575.9541 -210.9551 3572.8662 -217.4873 c3567.4336 -228.9814 3561.1279 -240.0215 3555.2617 -251.2925 c3552.6162 -256.377 3550.4551 -261.6812 3547.8496 -266.7925 c3542.8496 -276.6045 3536.9629 -285.9443 3530.5537 -294.8911 c3518.5996 -311.5781 3504.2432 -327.8584 3488.7637 -341.4746 C3488.3877 -341.6055 3488.0098 -341.7285 3487.6348 -341.8638 c3477.9717 -345.3613 3468.8926 -350.3022 3459.8008 -355.0352 c3453.0059 -358.5723 3447.1367 -362.9844 3439.8672 -364.5444 Cf3449.9043 -412.6479 m3449.6455 -410.7983 3449.293 -408.9863 3448.8711 -407.1992 C3466.875 -426.9268 3491.0684 -439.9282 3508.3828 -460.3521 c3510.752 -463.1465 3513.249 -465.8218 3515.7275 -468.5176 C3512.2227 -465.8989 3508.6748 -463.3403 3505.0459 -460.8945 c3496.207 -454.9375 3487.0566 -449.3667 3478.9863 -442.3618 c3474.6563 -438.6035 3471.2334 -433.9009 3467.3271 -429.7129 c3463.3242 -425.4214 3459.0752 -421.3608 3454.8037 -417.3403 c3453.1855 -415.8169 3451.5537 -414.3066 3449.9219 -412.7969 C3449.916 -412.7471 3449.9111 -412.6973 3449.9043 -412.6479 cf3609.6973 -702.3354 m3609.3154 -718.0435 3608.5273 -733.7012 3608.4775 -749.4194 c3608.4756 -749.9771 3608.4707 -750.5361 3608.4688 -751.0942 C3608.2969 -751.8262 3608.2842 -752.6357 3608.4561 -753.5088 C3608.3701 -767.1484 3608.0068 -780.8716 3605.9932 -794.3657 c3605.083 -800.4653 3605.3408 -806.7139 3604.7129 -812.8662 c3604.0322 -819.5234 3602.4629 -826.1006 3600.2959 -832.4233 c3598.4063 -837.937 3595.4736 -844.3276 3591.1602 -848.3457 c3587.251 -851.9878 3583.499 -847.2295 3581.0342 -844.3257 c3577.6582 -840.3472 3575.083 -835.8994 3571.585 -831.9883 c3566.8652 -826.7109 3563.0098 -820.6558 3559.3447 -814.6221 c3555.9531 -809.0391 3553.2451 -803.0518 3549.6758 -797.5938 c3545.5225 -791.2437 3541.6641 -784.7041 3537.9629 -778.0815 c3523.5205 -752.2344 3512.4316 -724.6738 3502.2158 -696.9365 c3491.4961 -667.8286 3481.2695 -638.499 3471.2939 -609.1289 c3465.0908 -590.8647 3459.1953 -572.479 3453.9971 -553.9023 C3454.1182 -552.228 3454.248 -550.5547 3454.3633 -548.8799 c3455.4395 -533.1919 3456.5371 -517.4365 3456.4551 -501.7075 c3456.3818 -487.438 3456.168 -472.3931 3452.8662 -458.4463 c3450.7695 -449.5913 3450.8438 -440.5898 3450.835 -431.5977 C3453.7363 -434.4019 3456.5938 -437.2524 3459.3516 -440.209 c3464.0234 -445.2183 3468.1191 -450.2935 3473.4658 -454.6357 c3479.1143 -459.2231 3485.1709 -463.2817 3491.2275 -467.3013 c3503.2998 -475.3125 3514.5967 -483.9609 3525.8887 -493.0244 c3532.3232 -498.189 3538.8047 -503.3022 3545.3936 -508.2705 C3550.543 -515.8477 3555.5049 -523.5493 3559.7637 -531.6587 c3566.3906 -544.2773 3571.5674 -557.5977 3576.8887 -570.7988 c3582.3926 -584.4512 3587.5967 -597.9468 3592.124 -611.9673 c3596.8809 -626.6978 3601.2773 -641.542 3604.9648 -656.5786 c3606.7529 -663.8687 3608.5869 -671.2051 3609.2637 -678.6904 c3609.9727 -686.5425 3609.8887 -694.4624 3609.6973 -702.3354 cf*U3840.0117 -1646.8506 m3834.6357 -1646.8809 3829.126 -1646.5186 3823.8311 -1645.7666 c3807.5674 -1643.457 3791.2705 -1641.3203 3774.8486 -1640.583 c3745.5195 -1639.2676 3717.7578 -1647.2676 3689.1641 -1652.3389 c3682.1455 -1653.583 3675.0898 -1654.4736 3667.9814 -1654.9941 c3659.9688 -1655.582 3652.6152 -1654.7744 3644.7188 -1653.4795 c3630.1914 -1651.0986 3615.9844 -1647.5273 3602.2871 -1642.0928 c3596.0107 -1639.6025 3590.2607 -1635.1436 3584.3779 -1631.8174 c3577.8643 -1628.1338 3571.0684 -1624.9395 3563.9922 -1622.4941 c3550.3916 -1617.793 3535.7676 -1619.2207 3521.8896 -1621.8242 c3493.0898 -1627.2246 3466.7031 -1642.2676 3442.1289 -1657.5713 c3430.8652 -1664.5859 3420.3193 -1672.5645 3409.1738 -1679.7354 c3397.2158 -1687.4297 3384.6279 -1690.5938 3370.4199 -1689.1104 c3358.1133 -1687.8262 3345.4668 -1681.5313 3334.7979 -1675.5186 c3324.752 -1669.8574 3315.4678 -1662.9395 3305.832 -1656.6309 c3295.9824 -1650.1836 3285.6045 -1644.6113 3274.3633 -1641.0049 c3260.7246 -1636.6289 3246.8164 -1637.1621 3232.7275 -1638.4229 c3197.0977 -1641.6094 3162.7373 -1652.3779 3129.7412 -1665.7842 c3113.8809 -1672.2275 3098.9082 -1679.9648 3083.9395 -1688.2393 c3068.8896 -1696.5586 3053.7051 -1704.5527 3037.2031 -1709.6143 c3029.2139 -1712.0645 3032.623 -1724.6152 3040.6602 -1722.1494 c3068 -1713.7627 3091.6387 -1697.708 3117.1533 -1685.3037 c3143.8252 -1672.3379 3173 -1662.6074 3201.9375 -1656.2646 c3216.9336 -1652.9775 3232.1563 -1651.0459 3247.4961 -1650.4951 c3260.3223 -1650.0342 3272.252 -1653.0811 3283.7246 -1658.7598 c3304.6172 -1669.0996 3321.8457 -1685.2549 3343.585 -1694.1348 c3357.043 -1699.6328 3369.8027 -1703.5693 3384.5713 -1702.2061 c3398.2129 -1700.9473 3409.8408 -1695.1094 3420.9863 -1687.4668 c3444.3232 -1671.4639 3467.7734 -1655.6533 3493.8135 -1644.2607 c3507.0098 -1638.4883 3521.2246 -1634.3115 3535.5762 -1632.8633 c3542.3369 -1632.1807 3549.04 -1632.0791 3555.6816 -1633.6172 c3562.9736 -1635.3076 3569.7539 -1638.6572 3576.2959 -1642.1992 c3582.2236 -1645.4092 3587.9346 -1649.0117 3593.707 -1652.4873 c3600.1904 -1656.3916 3608.8223 -1658.4316 3616.0449 -1660.5264 c3622.6563 -1662.4434 3629.4014 -1663.875 3636.166 -1665.1289 c3643.4766 -1666.4844 3651.4043 -1668.4111 3658.8457 -1668.3652 c3694.8818 -1668.1475 3729.0273 -1653.6104 3765.0039 -1653.375 c3785.54 -1653.2402 3806.0029 -1656.2471 3826.2813 -1659.1436 c3830.6035 -1659.7617 3835.3281 -1660.2305 3840.0117 -1660.1387 C3840.0117 -1646.8506 Lf113.6401 -300 m116.6406 -300 L119.6987 -300 121.6357 -298.3882 122.4629 -296.1904 C145.2456 -284.0269 169.584 -275.8652 195.5469 -273.7197 c210.1992 -272.5098 225.1655 -273.0728 239.8516 -273.3667 c247.1401 -273.5127 254.4219 -273.876 261.686 -274.4893 c265.2139 -274.7871 268.731 -275.2046 272.2319 -275.7266 c276.3784 -276.3452 280.458 -278.2827 284.3594 -279.7808 c310.4038 -289.7813 335.5674 -301.1997 357.876 -318.1128 c360.521 -320.1182 363.1167 -322.1899 365.7139 -324.2563 c368.5103 -326.4814 370.5625 -329.7676 372.9399 -332.439 c377.8091 -337.9106 383.2529 -342.8447 388.2021 -348.2441 c392.9697 -353.4453 396.7837 -359.4131 401.3472 -364.7944 c406.5728 -370.9565 412.3672 -376.6372 418.0747 -382.3462 c421.1782 -385.4502 428.2603 -384.5151 428.9385 -379.478 c430.5371 -367.6147 430.6631 -355.7832 430.2646 -343.834 c429.8647 -331.8159 427.9536 -319.0903 429.7227 -307.1509 c433.2734 -283.186 444.6748 -260.8062 456.3354 -239.8872 c462.0469 -229.6416 467.9634 -219.481 474.4717 -209.7227 c479.771 -201.7769 485.2974 -194.0815 492.6826 -187.9258 c499.6108 -182.1504 510.3794 -177.585 519.4248 -178.0693 c522.9932 -178.2603 526.8896 -179.8784 529.605 -182.1396 c531.4658 -183.6895 532.9175 -185.1426 534.4736 -186.4097 C535.4902 -187.9922 537.2227 -189 539.6826 -189 C541.8428 -189 L550.0435 -189 550.2168 -176.6836 542.374 -176.1411 C539.6133 -173.4546 536.729 -170.9307 533.4448 -168.9072 c529.4453 -166.4434 524.0132 -165.5371 519.4248 -165.0405 c509.2993 -163.9443 497.458 -169.251 489.0972 -174.5615 c480.5244 -180.0078 474.0225 -187.8833 468.1445 -196.0264 c460.9561 -205.9844 454.7251 -216.5566 448.5947 -227.1846 c435.9165 -249.1636 423.9136 -272.3789 418.374 -297.314 c413.5903 -318.8472 417.8735 -341.0942 417.3662 -363.0586 C415.4536 -361.0503 413.5586 -359.0254 411.7139 -356.9517 c406.6211 -351.2275 402.4917 -344.7783 397.3945 -339.0518 c392.9111 -334.0127 387.9258 -329.4395 383.3066 -324.5283 c380.9487 -322.0215 378.8999 -318.2549 376.2622 -316.1479 c373.1948 -313.6978 370.1152 -311.2637 367.0073 -308.8647 c356.2856 -300.5898 345.1489 -293.0767 333.1514 -286.7656 c320.3745 -280.0449 306.3472 -274.7935 292.9897 -269.3091 c286.2256 -266.5322 279.5112 -263.7085 272.2471 -262.7036 c264.5264 -261.6357 256.7651 -261.0469 248.9814 -260.6885 c234.0171 -259.9995 218.9341 -260.0068 203.9595 -260.3652 c175.7358 -261.0396 147.8042 -268.8301 122.6758 -281.4688 c118.5059 -283.5659 114.4175 -285.7036 110.3594 -288.0083 c104.7012 -291.2212 107.2207 -300 113.6401 -300 Cf897.9907 -146.8809 m907.5234 -148.9971 915.0913 -154.5342 921.8794 -161.3638 c925.1274 -164.6318 927.6553 -169.3906 931.1265 -172.2964 c935.5278 -175.9814 939.8638 -179.7539 944.1587 -183.562 c961.6221 -199.0454 978.9995 -214.6313 995.9282 -230.6797 c1003.9473 -238.2808 1012.0371 -245.8086 1019.7939 -253.6802 c1026.9985 -260.9917 1032.9194 -269.0586 1039.5659 -276.8096 c1045.186 -283.3638 1052.7324 -287.5918 1058.4468 -293.9766 c1064.9922 -301.29 1071.3384 -308.7134 1079.4565 -314.355 c1081.1743 -315.5483 1084.3096 -315.6216 1086.0181 -314.3555 c1095.5215 -307.3096 1095.9346 -294.8242 1095.6611 -283.9438 c1095.5156 -278.1401 1095.2725 -272.7988 1095.9883 -267.0112 c1097.0879 -258.123 1097.7622 -249.1855 1098.7168 -240.2813 c1099.6899 -231.2007 1101.1729 -222.2119 1103.4775 -213.3701 c1105.7314 -204.7227 1107.167 -195.8877 1109.5796 -187.2515 c1112.0303 -178.4785 1114.8975 -169.8228 1117.7676 -161.1802 c1119.3843 -156.3115 1119.4604 -149.6987 1123.3369 -145.3223 c1128.8735 -139.0713 1119.7134 -129.8423 1114.1445 -136.1299 c1110.5464 -140.1924 1108.4912 -145.3677 1107.0557 -150.5469 c1106.2041 -153.6191 1105.6299 -156.5254 1104.6133 -159.5864 c1103.1738 -163.9214 1101.7617 -168.2656 1100.3877 -172.6221 c1094.9902 -189.7329 1090.6724 -207.4946 1087.7178 -225.1885 c1086.25 -233.9785 1085.417 -242.8711 1084.5713 -251.7373 c1083.8354 -259.4531 1082.0381 -267.5708 1082.2944 -275.3013 c1082.4712 -280.6255 1082.8311 -285.8584 1082.6426 -291.1895 c1082.5664 -293.3354 1082.4956 -296.8755 1081.6216 -299.6279 C1076.1592 -294.9268 1071.5078 -289.0435 1066.7183 -283.6914 c1060.6572 -276.9189 1052.7456 -272.4863 1046.876 -265.3447 c1040.2324 -257.2607 1033.8579 -249.3569 1026.4385 -241.9019 c1018.1592 -233.5835 1009.4897 -225.667 1000.9995 -217.5669 c984.1523 -201.4922 966.6196 -185.9888 949.0972 -170.6294 c944.9482 -166.9922 940.8706 -163.7305 937.4292 -159.416 c934.4272 -155.6528 931.127 -152.1479 927.604 -148.8711 c921.792 -143.4658 915.0439 -138.9346 907.6079 -136.1772 C906.6094 -134.8799 905.0767 -134 903 -134 C900.7188 -134 899.7188 -134 v892.4917 -134 890.7139 -145.2656 897.9907 -146.8809 cf*u1 D3579.7803 -1314.1367 m3581.6426 -1309.8223 3584.2266 -1305.8408 3584.8105 -1301.0967 c3586.3086 -1288.9385 3571.2109 -1289.0967 3563.166 -1289.666 c3558.6621 -1289.9854 3554.1689 -1290.3984 3549.6572 -1290.6016 c3546.9678 -1290.7217 3542.4434 -1291.1768 3540.2637 -1290.2295 c3537.2695 -1288.9287 3534.4316 -1289.8779 3532.5537 -1291.7061 C3532.2266 -1287.8613 3531.7432 -1284.0254 3531.5439 -1280.3145 c3530.7881 -1266.2637 3529.7031 -1252.0381 3528.043 -1238.0684 c3526.3359 -1223.7139 3523.8018 -1209.4707 3520.4209 -1195.416 c3517.1563 -1181.8408 3512.3877 -1168.9316 3507.9355 -1155.7373 c3503.7764 -1143.4121 3501.7529 -1130.3672 3501.4893 -1117.3857 c3501.2061 -1103.4336 3501.248 -1089.7637 3498.9629 -1075.9409 c3496.6855 -1062.1631 3493.5342 -1048.6543 3491.9277 -1034.748 c3490.2041 -1019.835 3489.5098 -1004.8179 3489.4775 -989.811 c3489.459 -981.4082 3476.7451 -981.4541 3476.4775 -989.811 c3476.3076 -995.1084 3474.1846 -999.8115 3471.9893 -1004.5464 c3470.8281 -1007.0503 3469.7275 -1009.585 3468.7998 -1012.1851 c3467.9023 -1014.7012 3467.9434 -1017.3804 3467.1084 -1019.8862 c3462.3311 -1034.2202 3457.9766 -1048.479 3454.041 -1063.0615 c3450.3906 -1076.5879 3446.2734 -1089.9805 3441.6582 -1103.209 c3436.7393 -1117.3047 3430.3984 -1130.8262 3425.5654 -1144.9697 c3416.334 -1171.9854 3411.4883 -1199.9375 3404.6914 -1227.5615 c3401.1045 -1242.1367 3398.4316 -1256.918 3394.7617 -1271.4746 c3391.5137 -1284.3574 3387.8652 -1297.166 3386.7852 -1310.4072 C3377.6855 -1310.8066 3368.4766 -1310.3438 3359.4492 -1310.3438 c3349.9492 -1310.3438 3340.5342 -1308.9873 3331.041 -1309.0146 c3327.0137 -1309.0254 3322.9375 -1309.416 3319.6973 -1311.9834 c3315.6855 -1315.1631 3315.0586 -1321.0205 3316.7031 -1325.5439 c3318.167 -1329.5684 3320.9854 -1332.6289 3323.418 -1336.0645 c3323.5244 -1336.2148 3323.6055 -1336.3203 3323.6748 -1336.4043 C3323.6777 -1336.4512 3323.6836 -1336.5059 3323.6943 -1336.5732 c3323.9287 -1338.0938 3325.2227 -1339.292 3326.2227 -1340.3379 c3328.4316 -1342.6484 3330.2129 -1345.375 3332.0645 -1347.9668 c3335.2324 -1352.4004 3338.4434 -1357.1992 3342.9688 -1360.3711 c3348.1992 -1364.0381 3354.2266 -1366.1777 3360.4873 -1367.2529 c3372.8193 -1369.3701 3386.3418 -1368.9648 3398.6416 -1367.3398 c3405.6826 -1366.4092 3412.8945 -1367.4063 3419.916 -1368.0332 c3427.6162 -1368.7188 3435.4121 -1368.2236 3443.1133 -1367.7695 c3458.4883 -1366.8623 3473.7539 -1365.3623 3489.1719 -1365.3457 c3496.0811 -1365.3379 3502.9844 -1365.2002 3509.875 -1364.6709 c3516.5977 -1364.1543 3523.1719 -1362.3877 3529.8945 -1362.3281 c3541.2539 -1362.2285 3553.3389 -1361.3516 3563.3643 -1355.5137 c3567.3945 -1353.167 3572.3369 -1349.792 3574.6621 -1345.6777 c3577.2676 -1341.0693 3576.4082 -1335.0537 3576.543 -1329.9883 c3576.6846 -1324.6768 3577.666 -1319.0342 3579.7803 -1314.1367 cf0 D3407.7783 -1273.0215 m3411.6074 -1257.8311 3414.3477 -1242.3906 3418.1777 -1227.1992 c3421.5371 -1213.874 3423.8789 -1200.3232 3427.0693 -1186.9443 c3430.4531 -1172.7529 3434.5146 -1158.7256 3439.3008 -1144.9434 c3444.0059 -1131.3936 3450.0908 -1118.4219 3454.8154 -1104.8828 c3459.625 -1091.0977 3463.7549 -1077.0894 3467.5244 -1062.9883 c3470.7285 -1051.002 3474.4014 -1039.2734 3478.2676 -1027.5171 C3479.6553 -1042.459 3481.8604 -1057.4355 3484.9453 -1072.1191 c3487.7324 -1085.3887 3488.4434 -1098.4902 3488.4766 -1112.0205 c3488.5098 -1125.1973 3489.8242 -1138.1123 3492.9922 -1150.9258 c3496.1133 -1163.5527 3501.4873 -1175.5527 3505.0527 -1188.0781 c3509.0029 -1201.957 3511.8643 -1216.1318 3514.0088 -1230.3955 c3515.0586 -1237.3779 3515.3613 -1244.2998 3515.9941 -1251.3135 c3516.6807 -1258.9111 3517.9541 -1266.4277 3518.3887 -1274.0508 c3518.6973 -1279.4688 3518.8516 -1284.8506 3519.3203 -1290.2646 c3519.5732 -1293.1846 3520.3496 -1297.3154 3520.1377 -1300.8477 C3507.6094 -1299.7363 3495.0049 -1300.0195 3482.457 -1300.8047 c3468.4746 -1301.6797 3454.7549 -1303.8926 3440.918 -1305.5518 c3433.877 -1306.3965 3426.7129 -1305.6113 3419.6436 -1306.3242 c3413.2734 -1306.9658 3406.8184 -1307.8066 3400.5146 -1308.958 c3400.3232 -1308.9932 3400.1309 -1309.0195 3399.9395 -1309.0537 C3401.2031 -1296.8203 3404.7705 -1284.9531 3407.7783 -1273.0215 cf3566.7188 -1312.1162 m3564.6836 -1317.8213 3563.8037 -1323.959 3563.543 -1329.9883 c3563.4365 -1332.4609 3563.5029 -1334.9395 3563.4648 -1337.4131 c3563.4268 -1339.8682 3562.8047 -1340.0967 3560.7051 -1341.2344 c3558.5313 -1342.4111 3556.8418 -1344.3369 3554.5752 -1345.5137 c3552.332 -1346.6797 3549.7363 -1347.25 3547.291 -1347.8174 c3541.6201 -1349.1338 3535.6895 -1349.2461 3529.8945 -1349.3281 c3523.668 -1349.417 3517.8105 -1350.8818 3511.6221 -1351.5156 c3504.1729 -1352.2773 3496.6523 -1352.3242 3489.1719 -1352.3457 c3473.7578 -1352.3896 3458.4834 -1353.7949 3443.1133 -1354.7695 c3435.9395 -1355.2236 3428.6777 -1355.625 3421.4961 -1355.1582 c3413.8281 -1354.6611 3406.3408 -1353.6299 3398.6416 -1354.3398 c3386.3545 -1355.4727 3373.1982 -1356.6504 3360.9531 -1354.1563 c3349.7832 -1351.8818 3345.4297 -1343.9814 3339.0039 -1335.543 c3338.3887 -1334.7363 3337.7637 -1333.9365 3337.1299 -1333.1445 c3336.8438 -1332.8008 3336.5586 -1332.458 3336.2725 -1332.1143 C3336.0986 -1331.8916 3335.96 -1331.7197 3335.8379 -1331.5742 C3335.332 -1330.334 3334.4004 -1329.1426 3333.6572 -1328.1523 c3332.8545 -1327.083 3329.8398 -1323.999 3328.9648 -1322.085 C3330.7432 -1321.96 3332.543 -1322.0088 3334.3184 -1322.0547 c3338.6084 -1322.167 3342.8926 -1322.5703 3347.167 -1322.9219 c3357.4043 -1323.7646 3367.7422 -1323.3438 3378.0078 -1323.3438 c3382.7461 -1323.3438 3387.4619 -1323.4121 3392.1719 -1323.0928 C3393.0723 -1323.1787 3393.9902 -1323.0996 3394.8613 -1322.8594 C3395.5156 -1322.793 3396.1709 -1322.7217 3396.8252 -1322.6348 c3401.6367 -1321.9961 3406.3789 -1320.832 3411.2178 -1320.4365 c3417.7598 -1319.9014 3424.0898 -1318.8643 3430.7061 -1318.8438 c3436.8887 -1318.8242 3442.4961 -1317.8994 3448.5469 -1317.1475 c3473.7607 -1314.0137 3499.627 -1311.3271 3524.9814 -1314.3428 c3526.9795 -1314.5801 3529.7959 -1312.9795 3530.5938 -1311.123 c3531.9932 -1307.8711 3532.6084 -1304.459 3532.8027 -1300.9795 C3533.0801 -1301.1494 3533.373 -1301.3115 3533.7012 -1301.4541 c3543.1406 -1305.5557 3554.4961 -1303.2803 3564.4229 -1302.5771 c3566.6768 -1302.418 3568.9229 -1302.3408 3571.1807 -1302.3809 C3569.9531 -1305.6816 3567.8809 -1308.8545 3566.7188 -1312.1162 cf*U1603.416 2.53174 m1603.3496 2.78662 1603.2715 3.03613 1603.2021 3.29004 C1589.5781 3.29004 L1590.2783 1.05859 1590.9492 -1.18945 1591.5479 -3.49805 c1593.4678 -10.9028 1594.8457 -18.4399 1595.6221 -26.0479 c1596.3022 -32.7109 1597.564 -42.1143 1594.3486 -48.2153 c1588.3823 -59.5371 1574.2524 -65.9619 1563.0298 -70.6519 c1556.0063 -73.5869 1548.3052 -75.2515 1540.833 -76.5635 c1533.1152 -77.9185 1525.7461 -75.062 1518.1958 -76.1406 c1503.0264 -78.3071 1508.7231 -90.3096 1511.5127 -100.4497 c1515.6138 -115.3594 1514.9258 -129.8418 1507.6255 -143.8457 c1501.8452 -154.9346 1491.4497 -166.4688 1480.9106 -173.1289 c1467.9946 -181.291 1448.9146 -178.2954 1443.04 -163.0005 c1440.0854 -155.3066 1427.6875 -158.4697 1430.5049 -166.4565 c1438.7354 -189.792 1441.186 -214.0508 1439.7559 -238.6699 c1438.5015 -260.2607 1435.4312 -283.9131 1426.9258 -303.959 c1422.9941 -313.2261 1417.4741 -321.6816 1410.6084 -329.0239 c1402.856 -337.314 1392.0386 -341.6245 1381.4082 -344.9248 c1361.0278 -351.2515 1338.3877 -354.292 1317.1719 -352.3921 c1305.5557 -351.3516 1294.1055 -348.7544 1282.8965 -345.6113 c1271.8809 -342.5225 1261.7471 -337.5791 1250.9673 -333.9927 c1247.1245 -332.7139 1240.9888 -331.3882 1237.0249 -332.4785 c1233.4648 -333.4575 1230.1245 -336.3501 1227.0078 -338.2388 c1222.7129 -340.8418 1218.3521 -340.7856 1213.7119 -342.1665 c1206.9702 -344.1724 1199.3262 -343.7412 1192.4619 -342.729 c1181.3315 -341.0879 1170.0625 -340.7695 1159.0801 -337.9629 c1150.4858 -335.7671 1140.9712 -328.5303 1131.9097 -328.7969 c1128.5371 -328.896 1125.8018 -329.7881 1123.0293 -331.7134 c1118.8877 -334.5898 1118.7988 -336.9663 1117.8789 -341.5664 c1117.0532 -345.6943 1115.9268 -351.3145 1114.2305 -355.1147 c1111.9492 -360.2275 1108.5664 -364.8325 1106.0254 -369.8213 c1100.4087 -380.8477 1090.458 -389.3657 1081.3193 -397.6343 c1071.2446 -406.75 1061.0303 -415.7036 1049.1958 -422.4126 c1024.9824 -436.1387 1000.2114 -449.1074 973.3003 -456.6763 c946.792 -464.1318 918.728 -463.7749 892.4688 -455.478 c866.3081 -447.2119 843.5225 -430.2197 823.3071 -412.1577 c819.5449 -408.7964 811.5122 -410.6494 812.2109 -416.7539 c812.6343 -420.4546 813.7393 -423.7734 814.8486 -427.3164 c815.9517 -430.8398 815.2109 -435.3691 815.2109 -439.0337 c815.2109 -449.0254 808.0449 -459.5117 802.5815 -467.3564 c792.2383 -482.207 777.4219 -501.3457 758.0132 -503.1895 c750.2461 -503.9277 742.5654 -497.0864 734.6807 -499.8887 c726.5273 -502.7856 726.7236 -510.0571 726.6953 -517.6284 c726.6821 -521.1577 725.2031 -523.895 725.1992 -527.5342 c725.1934 -533.4546 725.0107 -539.3428 724.0356 -545.1924 c722.1973 -556.2217 716.3066 -567.4741 710.8477 -577.1455 c688.9951 -615.8604 647.9229 -645.6372 602.813 -646.7075 c591.6313 -646.9727 580.4258 -645.9063 569.3101 -644.835 c562.416 -644.1709 556.2456 -642.0801 549.4351 -640.3794 c535.8237 -636.9805 522.1777 -641.187 522.9473 -657.543 c523.1445 -661.7412 524.6514 -665.5508 523.2944 -669.6226 c521.4834 -675.0562 520.3809 -680.562 518.0322 -685.8213 c513.2822 -696.4565 506.0537 -705.8242 498.293 -714.4102 c484.0098 -730.2109 466.9854 -744.6787 447.6094 -753.7305 c427.0757 -763.3232 403.4507 -762.9917 381.4604 -759.8086 c358.3062 -756.457 336.3159 -747.334 316.4951 -735.1167 c307.3354 -729.4707 299.043 -722.2998 290.5591 -715.7041 c286.6558 -712.6689 282.7441 -709.6445 278.8218 -706.6348 c274.356 -703.207 271.8936 -699.0073 268.5186 -694.501 c263.314 -687.5518 260.2158 -681.6943 251.1479 -679.4229 c248.4463 -678.7461 244.8755 -679.1064 242.4766 -680.6069 c239.3477 -682.563 237.4443 -686.6304 234.3721 -688.1729 c225.8394 -692.457 219.311 -698.9873 210.2676 -702.0703 c205.6572 -703.6426 200.9292 -704.7944 196.1553 -705.7373 c191.0952 -706.7373 182.104 -708.7896 177.0747 -707.0713 c163.2412 -702.3447 145.7358 -695.2695 133.0464 -706.187 c128.6885 -709.9365 126.8784 -717.397 125.7856 -722.7104 c124.5566 -728.688 122.4976 -733.5991 119.5283 -739.0586 c118.021 -741.8306 115.583 -743.8521 114.0278 -746.5063 c111.8994 -750.1406 110.5674 -754.498 108.6675 -758.2949 c104.5488 -766.5264 99.4077 -774.249 93.5024 -781.2974 c84.2085 -792.3896 75.416 -800.9941 60.9785 -804.4165 c46.9941 -807.7314 31.8701 -806.3281 17.6304 -806.293 c9.24609 -806.2725 9.24805 -819.2725 17.6304 -819.293 c35.8408 -819.3379 54.8301 -820.7612 72.3179 -814.6597 c90.1885 -808.4248 103.1987 -791.5654 113.2852 -776.3169 c118.6021 -768.2798 121.3711 -758.3438 127.2305 -750.8486 c132.6084 -743.9697 137.1577 -734.7529 138.3213 -726.1665 c138.8516 -722.2559 140.124 -716.6064 143.6577 -714.3691 c146.7896 -712.3862 152.0723 -713.4458 155.4165 -714.0508 c163.5732 -715.5264 171.2915 -720.3335 179.5928 -720.2554 c189.542 -720.1616 199.459 -718.6733 209.0439 -716.0508 c213.9263 -714.7148 218.6738 -712.8994 223.3789 -711.0498 c228.2788 -709.124 232.2451 -704.2061 236.9331 -701.5054 c241.2383 -699.0249 243.7739 -697.7803 246.8384 -693.8516 c248.6919 -691.4746 251.5566 -692.1821 253.1445 -695.0615 c257.9932 -703.854 264.3853 -711.8472 272.2607 -717.8599 c289.9521 -731.3672 306.6636 -745.6255 326.6621 -755.6807 c346.6753 -765.7432 368.3809 -771.8833 390.6758 -773.8525 c411.7422 -775.7124 432.332 -774.5591 451.9146 -765.9478 c471.063 -757.5273 487.1616 -743.9722 501.9414 -729.3809 c517.4102 -714.1094 529.2466 -696.6958 534.9727 -675.6504 c536.3711 -670.5117 537.3545 -668.1343 536.6035 -662.7046 c536.1836 -659.6646 534.7524 -654.8335 537.0952 -652.1221 c539.439 -649.4102 552.6211 -654.7393 555.4063 -655.5698 c562.6382 -657.7266 570.2544 -657.9541 577.7373 -658.6147 c589.7388 -659.6738 601.7612 -660.1211 613.7813 -659.1362 c635.4277 -657.3623 655.4463 -648.4253 673.2964 -636.3716 c706.5146 -613.9399 736.6245 -574.2891 738.1284 -533.0732 c738.1401 -532.7485 737.9692 -527.0845 737.9468 -527.1182 c739.0454 -525.5059 739.3667 -522.9893 739.5146 -521.1079 c739.689 -518.8906 739.1113 -515.2925 739.4839 -512.5469 C744.2393 -512.5781 749.335 -515.7495 753.9976 -516.125 c760.3574 -516.6377 766.7505 -515.1528 772.6094 -512.7666 c784.8438 -507.7842 794.3682 -498.0444 802.7642 -488.1523 c811.5078 -477.8511 819.4102 -466.9473 824.5527 -454.3926 c827.1943 -447.9448 828.2109 -441.6465 828.2109 -434.7554 c828.2109 -434.2856 828.2197 -433.8076 828.231 -433.3262 C848.5532 -449.6099 870.8979 -463.1802 896.2866 -470.1621 c929.1484 -479.1987 963.48 -474.873 995.0415 -463.2627 c1011.105 -457.3535 1026.4839 -449.6553 1041.5273 -441.5405 c1048.6519 -437.6973 1055.687 -433.6885 1062.7188 -429.6787 c1070.0225 -425.5137 1076.3936 -419.0166 1082.7896 -413.5757 c1104.5537 -395.061 1127.167 -372.0757 1130.8662 -342.4854 C1136.4785 -340.7158 1148.126 -348.1802 1153.0537 -349.7603 c1163.9468 -353.2529 1175.123 -352.2036 1186.0176 -354.7021 c1196.2446 -357.0474 1206.9639 -357.0688 1217.1675 -354.7021 c1226.1304 -352.623 1232.4795 -350.0059 1240.3945 -345.2446 c1243.1753 -343.5718 1251.9229 -348.1436 1254.4697 -349.3633 c1259.0664 -351.5635 1263.8809 -353.1689 1268.7046 -354.8076 c1279.355 -358.4263 1290.2603 -361.2095 1301.3223 -363.231 c1312.3511 -365.2461 1323.5605 -366.1563 1334.7622 -366.248 c1343.8374 -366.3228 1353.8145 -363.8936 1362.7607 -362.4341 c1381.1445 -359.436 1401.937 -354.3447 1416.2422 -341.6812 c1430.5952 -328.9751 1439.3262 -310.9155 1444.4932 -292.7642 c1450.1641 -272.8423 1452.4771 -250.7319 1453.1436 -230.0938 c1453.6104 -215.647 1452.4463 -201.103 1449.5962 -186.9126 C1453.999 -188.8301 1458.9312 -190.0645 1464.3525 -190.7524 c1479.6777 -192.6978 1495.5303 -180.5796 1504.375 -169.3247 c1508.8882 -163.5815 1513.8779 -158.6699 1517.7422 -152.3628 c1522.1152 -145.2251 1524.8257 -137.082 1526.2637 -128.8804 c1527.6133 -121.1875 1528.085 -112.3975 1526.4893 -104.709 c1525.8052 -101.4131 1524.7017 -98.2231 1523.8467 -94.9976 c1523.3447 -93.106 1522.7207 -91.3491 1521.9482 -89.5518 c1521.8936 -89.4243 1521.8447 -89.293 1521.7998 -89.1611 C1524.5308 -89.2261 1527.2021 -89.8789 1530.2104 -90.063 c1534.9756 -90.3545 1539.5806 -89.7856 1544.2891 -89.0991 c1553.1021 -87.814 1561.876 -85.2246 1570.0376 -81.6968 c1584.3984 -75.4893 1599.0049 -67.2417 1606.5518 -52.9204 c1610.5796 -45.2778 1609.2813 -34.3535 1608.6221 -26.0479 c1607.8564 -16.3892 1605.8433 -6.82959 1603.416 2.53174 cf151.6621 -2159.9268 m152.1343 -2159.4434 152.5811 -2158.9785 152.9736 -2158.5469 c158.7188 -2152.2314 163.957 -2145.6152 170.2412 -2139.8232 c185.9282 -2125.3633 204.311 -2113.4355 224.0249 -2105.2529 c242.7651 -2097.4746 263.1577 -2092.5605 282.9438 -2088.2822 c303.228 -2083.8955 323.832 -2081.2041 344.5684 -2080.3711 c384.6509 -2078.7588 425.4473 -2085.5498 460.3647 -2106.0508 c472.4326 -2113.1367 482.9668 -2125.0811 496.5889 -2113.6172 c501.4141 -2109.5566 505.542 -2104.1357 510.1133 -2099.7568 c517.9131 -2092.2861 527.9878 -2087.3955 536.9629 -2081.5322 c545.5576 -2075.918 556.1841 -2071.998 565.5654 -2067.8701 c576.9941 -2062.8418 588.8535 -2058.8408 601.0337 -2056.1045 c625.2822 -2050.6563 650.689 -2051.0361 675.1387 -2054.8662 c698.9673 -2058.5996 721.4653 -2066.3164 743.9819 -2074.665 c763.4375 -2081.8789 784.0288 -2087.7988 804.9629 -2084.917 c826.9014 -2081.8965 843.625 -2069.3047 861.9253 -2057.8945 c870.9844 -2052.2461 880.6772 -2047.9805 889.9072 -2042.7021 c900.3457 -2036.7324 911.0542 -2031.248 921.9385 -2026.1416 c942.6709 -2016.4131 964.356 -2008.8281 986.5186 -2003.1045 c1009.542 -1997.1582 1032.3467 -1991.6494 1056.0371 -1989.0352 c1102.9639 -1983.8574 1150.6484 -1987.5869 1196.7241 -1997.3867 c1243.1968 -2007.2705 1286.7808 -2024.041 1330.9307 -2041.2109 c1350.3447 -2048.7617 1368.4541 -2059.1328 1388.9995 -2063.5869 c1409.5063 -2068.0332 1426.647 -2063.1895 1443.1982 -2050.7793 c1477.9087 -2024.7539 1513.0273 -1995.2646 1556.4839 -1985.8867 c1574.0459 -1982.0977 1592.2983 -1981.1836 1608.9141 -1988.5869 c1616.0005 -1991.7451 1624.0103 -1995.5098 1629.8218 -2000.7188 c1632.4502 -2003.0742 1634.9316 -2005.4717 1637.4619 -2007.8076 C1636.5337 -2011.5098 1638.71 -2016 1644 -2016 C1649.7939 -2016 L1656.6611 -2016 1658.1318 -2007.6738 1653.0747 -2004.0938 c1645.9277 -1999.0332 1640.6147 -1992.0371 1633.4585 -1986.9902 c1624.7236 -1980.8291 1614.1094 -1976.209 1604.0425 -1972.7373 c1594.4336 -1969.4219 1585.4697 -1970.1797 1575.5615 -1970.4961 c1564.479 -1970.8496 1553.417 -1972.9268 1542.751 -1975.8604 c1500.7607 -1987.4082 1467.0815 -2017.5459 1432.603 -2042.5195 c1413.8418 -2056.1094 1394.1572 -2052.9688 1373.5342 -2045.4473 c1363.918 -2041.9404 1354.6621 -2037.4795 1345.355 -2033.2412 c1335.0117 -2028.5303 1324.2383 -2024.71 1313.6587 -2020.5615 c1269.4868 -2003.2422 1225.0537 -1988.6855 1178.1875 -1980.6201 c1087.5518 -1965.0205 993.5288 -1977.5938 910.4258 -2017.2598 c900.3721 -2022.0586 890.5596 -2027.3516 880.8911 -2032.8809 c870.9746 -2038.5518 860.6904 -2043.2871 850.9785 -2049.4209 c842.5591 -2054.7393 834.2925 -2060.2793 825.5864 -2065.1289 c814.9126 -2071.0742 802.4409 -2072.9482 790.3745 -2072.6426 c768.5547 -2072.0889 747.5684 -2062.0332 727.4292 -2054.6504 c704.9189 -2046.3975 680.603 -2041.6641 656.7583 -2039.6768 c633.2656 -2037.7188 608.8848 -2039.7988 586.2373 -2046.4492 c565.9673 -2052.4004 544.5254 -2061.415 526.6553 -2072.7148 c518.4971 -2077.873 510.3071 -2082.7285 502.8291 -2088.8779 c497.0469 -2093.6328 492.7349 -2099.2676 487.397 -2104.4248 c483.2393 -2108.4414 475.3232 -2101.1484 472.272 -2098.3262 c465.3853 -2091.9551 454.4741 -2087.8887 445.9653 -2084.2188 c409.5625 -2068.5215 369.0728 -2065.1846 329.8975 -2068.2402 c290.2842 -2071.3301 248.3926 -2080.0234 212.0532 -2096.3887 c191.1299 -2105.8105 172.2173 -2119.7432 155.7642 -2135.6328 c149.627 -2141.5605 144.1021 -2148.8818 138.502 -2155.3662 c137.2158 -2156.8555 135.939 -2158.3672 134.7378 -2159.9268 C151.6621 -2159.9268 Lf643.2827 -1855.3027 m636.0786 -1848.7969 624.8105 -1848.1162 615.5762 -1848.5088 c611.312 -1848.6895 606.9097 -1849.2539 602.9932 -1851.0205 c605.9053 -1849.707 600.9619 -1850.4727 600.5469 -1850.4844 c598.8867 -1850.5322 597.23 -1850.6426 595.5732 -1850.7568 c591.832 -1851.0127 588.1016 -1851.5342 584.4048 -1852.1523 c571.7646 -1854.2676 561.4214 -1860.5977 550.6221 -1867.0381 c539.0142 -1873.96 528.895 -1883.3057 519.6743 -1893.1016 c510.6919 -1902.6445 502.6167 -1913 493.7017 -1922.5986 c490.1191 -1926.457 486.1084 -1930.1611 480.9487 -1931.6387 c474.4468 -1933.5 467.0356 -1931.2861 460.8584 -1929.2617 c447.1377 -1924.7656 435.1392 -1916.0859 422.1968 -1909.8271 c409.5898 -1903.7305 396.4126 -1898.5127 383.3838 -1893.3877 c369.9097 -1888.0889 356.4272 -1886.3428 342.1211 -1884.8857 c326.8662 -1883.332 312.1978 -1884.8447 297.1445 -1887.2109 c281.9824 -1889.5938 267.1675 -1893.7734 252.1196 -1896.7363 c238.0884 -1899.5 224.1128 -1903.709 211.1084 -1895.4063 c201.8857 -1889.5176 195.2808 -1879.4756 188.7573 -1870.9277 c181.3765 -1861.2559 173.3599 -1852.9912 163.3706 -1845.9434 c142.1689 -1830.9854 115.8853 -1826.0234 90.5 -1824.2646 c76.2705 -1823.2783 61.7437 -1822.9287 47.4883 -1823.4766 c34.0112 -1823.9941 20.9214 -1827.6494 7.52881 -1828.9414 C5.66113 -1826.708 2.47705 -1825.5498 -0.372559 -1827.1025 C-0.372559 -1842.3955 L-0.371094 -1842.3955 l14.7432 -1842.2256 29.3008 -1838.1885 44.2627 -1836.7051 c57.3438 -1835.4092 71.0864 -1836.3281 84.1997 -1836.9102 c109.7266 -1838.043 135.3325 -1842.5273 156.8091 -1857.1689 c176.2021 -1870.3896 185.2446 -1893.4424 204.5474 -1906.6309 c216.0396 -1914.4824 231.418 -1915.2031 244.3813 -1911.1699 c247.8633 -1910.0869 251.9736 -1909.957 255.5752 -1909.2725 c259.1948 -1908.584 262.7944 -1907.7939 266.3906 -1906.9961 c274.1172 -1905.2793 281.8081 -1903.4131 289.5562 -1901.7949 c304.4517 -1898.6836 319.2729 -1896.6846 334.5132 -1897.335 c348.8491 -1897.9463 363.2256 -1899.7998 376.7368 -1904.7119 c389.8765 -1909.4893 403.0117 -1915.0498 415.6353 -1921.0527 c428.7041 -1927.2656 440.6836 -1935.3525 454.1914 -1940.6387 c466.2305 -1945.3496 480.1768 -1947.6133 491.9131 -1940.9883 c502.4233 -1935.0557 509.0254 -1923.9326 517.2764 -1915.5 c522.145 -1910.5234 526.3872 -1904.8701 531.2114 -1899.8223 c536.1318 -1894.6729 541.3711 -1889.8389 546.9155 -1885.3691 c551.7617 -1881.4629 557.0991 -1878.1348 562.5864 -1875.2148 c568.189 -1872.2344 572.9424 -1868.7705 579.0938 -1866.7871 c584.4321 -1865.0664 590.001 -1864.2188 595.5737 -1863.7568 c598.937 -1863.4775 602.3164 -1863.416 605.6895 -1863.3975 c608.1997 -1863.3838 608.7617 -1862.5234 611.0254 -1862.0186 c614.1499 -1861.3223 618.9736 -1860.8643 623.5713 -1861.208 C622.6895 -1864.9238 624.7217 -1869.4316 629.668 -1869.3984 c635.0503 -1869.3613 639.1772 -1868.0361 643.2764 -1864.4941 c645.8623 -1862.2607 645.7754 -1857.5527 643.2827 -1855.3027 cf311.6387 -1673.0605 m334.5488 -1655.6729 361.0928 -1641.6836 387.1274 -1629.6074 c413.4443 -1617.3994 441.0776 -1608.2852 469.5068 -1602.5225 c495.522 -1597.249 523.0391 -1594.4619 549.1909 -1600.3389 c562.7485 -1603.3857 573.6753 -1609.6934 585.4175 -1616.79 c590.6445 -1619.9502 596.5488 -1625.1016 602.4766 -1626.499 c607.9121 -1627.7803 613.48 -1627.9717 618.6533 -1625.6738 c630.2339 -1620.5283 635.9219 -1607.8896 642.71 -1598.0508 c651.1626 -1585.7998 660.2725 -1573.876 670.8174 -1563.3535 c681.1357 -1553.0576 692.6021 -1543.9766 704.3862 -1535.4297 c716.21 -1526.8555 728.2881 -1518.1455 741.0781 -1511.083 c766.9531 -1496.7949 793.8154 -1484.1699 822.2583 -1475.9063 c848.9844 -1468.1406 876.6094 -1465.5254 904.3252 -1468.0723 c918.5215 -1469.377 932.5249 -1472.4316 946.5645 -1474.8076 c961.0352 -1477.2559 975.6909 -1477.5938 990.3442 -1477.6855 c1020.5825 -1477.874 1051.1924 -1477.3721 1081.3486 -1475.3467 c1111.7959 -1473.3027 1142.3257 -1472.8516 1172.7461 -1470.3584 c1181.04 -1469.6787 1181.1064 -1456.6729 1172.7461 -1457.3584 c1141.0405 -1459.957 1109.2148 -1460.4092 1077.4849 -1462.6113 c1061.7983 -1463.6992 1046.0459 -1463.6221 1030.3213 -1464.043 c1014.4771 -1464.4668 998.6309 -1464.8555 982.7808 -1464.6016 c967.5083 -1464.3574 952.8647 -1462.8262 937.8472 -1460.1348 c923.3623 -1457.5381 908.7949 -1454.9238 894.0581 -1454.4072 c864.1802 -1453.3584 835.333 -1457.6504 806.9478 -1467.0586 c792.9263 -1471.7061 779.2725 -1477.4805 765.9048 -1483.7471 c752.8154 -1489.8818 738.9941 -1496.2021 726.9487 -1504.2324 c702.7075 -1520.3945 678.3315 -1536.8467 657.9702 -1557.8711 c647.7124 -1568.4629 638.8755 -1580.7773 630.5132 -1592.8975 c625.2271 -1600.5596 619.4248 -1615.2021 608.2129 -1614.3945 c602.7783 -1614.0039 596.5923 -1608.3389 591.979 -1605.5654 c585.8691 -1601.8926 580.0547 -1597.9297 573.5654 -1594.9316 c561.4229 -1589.3213 548.4648 -1586.4385 535.2246 -1584.9727 c508.6128 -1582.0254 481.356 -1586.4131 455.4316 -1592.2637 c426.6992 -1598.748 398.9648 -1609.4111 372.4868 -1622.208 c347.3574 -1634.3525 322.8311 -1648.5498 300.4917 -1665.2861 c283.9922 -1677.6475 263.7319 -1692.5957 262.9482 -1715.207 c262.9058 -1716.4365 263.0313 -1717.6641 263.1558 -1718.8838 c263.9976 -1727.1396 277.0059 -1727.2217 276.1558 -1718.8838 c274.0313 -1698.0449 297.3086 -1683.9355 311.6387 -1673.0605 cf*u1 D2435.9199 -1790.6309 m2430.1396 -1789.9395 2424.8535 -1788.0293 2418.8945 -1787.9775 c2412.3447 -1787.9199 2405.6777 -1789.3115 2399.4688 -1791.2979 c2388.7656 -1794.7227 2378.375 -1801.2764 2369.5537 -1808.1387 c2367.2002 -1809.9697 2365.167 -1812.0967 2363.3525 -1814.4531 c2362.8789 -1815.0684 2360.5137 -1817.04 2362.5557 -1815.8711 c2361.3926 -1816.5371 2360.3525 -1817.5127 2359.3398 -1818.3809 c2357.3975 -1820.0469 2355.9277 -1822.2314 2354.4053 -1824.3525 C2351.6885 -1819.5059 2347.7471 -1815.8633 2341.5791 -1813.4209 c2328.6758 -1808.3105 2315.2949 -1804.0107 2302.2402 -1799.2109 c2295.5039 -1796.7344 2288.9746 -1793.7734 2281.9121 -1792.4043 c2274.3379 -1790.9355 2266.6143 -1790.4297 2259.0586 -1788.8438 c2248.6797 -1786.666 2237.7363 -1784.5801 2227.1152 -1783.6475 c2222.6738 -1783.2578 2217.5781 -1783.6807 2214.457 -1787.1914 c2210.5 -1791.6436 2209.6074 -1797.7939 2209.6055 -1803.5352 c2209.6025 -1814.7402 2210.6123 -1826.3369 2215.0762 -1836.6748 c2225.2754 -1860.291 2249.2744 -1871.709 2267.4492 -1888.1768 c2272.1348 -1892.4219 2276.5156 -1897.0713 2280.2451 -1902.1826 c2281.7559 -1904.2529 2283.877 -1905.0625 2285.9414 -1904.9961 C2285.6211 -1906.5107 2285.3301 -1908.0391 2285.1211 -1909.5986 c2283.3105 -1923.1084 2282.2041 -1936.6475 2277.9854 -1949.6914 c2274.2842 -1961.1338 2267.4414 -1972.2705 2260.293 -1981.918 c2257.4902 -1985.7012 2253.9551 -1988.9824 2249.9141 -1991.3809 c2244.9395 -1994.333 2239.5361 -1994.3105 2233.9492 -1994.4951 c2227.9863 -1994.6914 2222.0449 -1995.1602 2216.0742 -1995.1592 c2210.2402 -1995.1592 2202.4922 -1995.0713 2197.7793 -1991.1865 c2187.2119 -1982.4785 2182.8633 -1970.1455 2175.7441 -1958.9766 c2167.8262 -1946.5557 2162.6719 -1932.5918 2153.8887 -1920.752 c2145.7285 -1909.751 2136.3984 -1899.7012 2126.0635 -1890.7168 c2115.7891 -1881.7861 2104.4561 -1874.042 2092.3184 -1867.8779 c2086.3564 -1864.8496 2080.2842 -1862.79 2073.9922 -1860.6309 c2067.2422 -1858.3145 2060.8398 -1855.0752 2054.1348 -1852.6299 c2040.377 -1847.6104 2027.0234 -1846.0625 2012.4824 -1847.873 c1998.4648 -1849.6191 1984.957 -1853.1172 1971.7246 -1858.0313 c1945.2139 -1867.877 1918.103 -1881.1963 1897.688 -1901.0283 c1878.0278 -1920.1279 1863.1987 -1943.7373 1852.9014 -1969.0303 c1845.7139 -1986.6855 1846.3828 -2005.1348 1847.0889 -2023.835 c1847.7241 -2040.6631 1843.9092 -2058.9346 1849.5527 -2075.1113 C1849.4014 -2075.1279 1849.251 -2075.1387 1849.0996 -2075.1553 c1837.2822 -2076.4688 1825.6704 -2078.8525 1814.333 -2082.416 c1802.7119 -2086.0693 1791.1191 -2090.2266 1778.8066 -2090.4219 c1770.4316 -2090.5547 1770.4189 -2103.5547 1778.8066 -2103.4219 c1793.4546 -2103.1895 1807.1226 -2098.2354 1820.9531 -2093.9668 c1835.6611 -2089.4258 1851.1021 -2087.3672 1866.458 -2086.9609 c1882.6201 -2086.5332 1898.6787 -2088.6025 1914.373 -2092.3779 c1920.9814 -2093.9668 1927.4512 -2096.0293 1934.1504 -2097.2373 c1941.8115 -2098.6191 1948.8398 -2097.5693 1956.4932 -2097.3516 c1986.7305 -2096.4883 2012.667 -2080.9902 2040.4414 -2071.1738 c2054.2275 -2066.3027 2068.4375 -2063.7139 2083.0527 -2065.3066 c2090.6152 -2066.1318 2097.7334 -2068.8877 2104.7109 -2071.7324 c2112.332 -2074.8408 2120.1133 -2077.3691 2128.1133 -2079.2988 c2140.4297 -2082.2686 2153.1953 -2083.5156 2165.8457 -2083.498 c2171.8613 -2083.4902 2177.8691 -2083.0547 2183.8477 -2082.4199 c2190.8008 -2081.6816 2197.9219 -2081.9023 2204.9141 -2081.21 c2218.3467 -2079.8789 2231.6797 -2077.71 2245.1299 -2076.5313 c2259.4648 -2075.2744 2273.3398 -2076.2031 2287.5586 -2078.1445 c2300.9648 -2079.9766 2314.3516 -2081.9717 2327.8613 -2082.8643 c2338.9531 -2083.5967 2350.0029 -2082.9297 2361.0645 -2082.1445 c2369.2783 -2081.5605 2377.5342 -2080.3555 2385.5254 -2078.3594 c2393.0098 -2076.4893 2400.7822 -2073.6104 2405.4814 -2067.1992 c2410.4463 -2060.4258 2399.1572 -2053.9512 2394.2568 -2060.6367 c2393.1592 -2062.1348 2388.9336 -2063.7188 2386.5244 -2064.5332 c2381.6201 -2066.1895 2376.4756 -2067.1621 2371.376 -2067.9824 c2361.5781 -2069.5596 2351.2539 -2070.041 2341.3633 -2070.2256 c2325.1387 -2070.5273 2308.9678 -2068.0967 2292.9434 -2065.875 c2276.873 -2063.6475 2261.3564 -2062.2305 2245.1299 -2063.5313 c2213.9473 -2066.0313 2182.8652 -2072.416 2151.4443 -2069.9473 c2135.876 -2068.7246 2120.4063 -2064.5498 2106.1191 -2058.3057 c2092.3926 -2052.3057 2077.043 -2050.6885 2062.2627 -2052.5391 c2038.7061 -2055.4883 2017.8877 -2067.0215 1995.9893 -2075.3193 c1985.0205 -2079.4756 1973.6143 -2082.8066 1961.9141 -2083.9961 c1956.0791 -2084.5889 1949.9883 -2085.1748 1944.1348 -2085.2373 c1938.0449 -2085.3027 1932.0566 -2083.6211 1926.2246 -2082.0615 c1905.3799 -2076.4883 1884.3242 -2073.4512 1862.9429 -2074.168 C1862.833 -2073.665 1862.667 -2073.1543 1862.4268 -2072.6387 c1856.5649 -2060.0566 1860.4648 -2043.9873 1860.2842 -2030.6113 c1860.0879 -2016.0957 1858.3828 -2001.4131 1860.9331 -1987.0068 c1863.3066 -1973.5977 1870.3369 -1960.584 1877.042 -1948.8838 c1883.8301 -1937.0391 1891.9741 -1926.0566 1901.2251 -1916.0264 c1905.6108 -1911.2715 1910.3145 -1906.8184 1915.1992 -1902.582 c1920.7266 -1897.7881 1926.9883 -1894.248 1933.3193 -1890.6211 c1946.2402 -1883.2207 1959.6504 -1876.5889 1973.5342 -1871.1934 c1986.623 -1866.1055 2000.2227 -1862.4004 2014.1719 -1860.6631 c2020.8467 -1859.832 2027.7891 -1859.5117 2034.4629 -1860.5176 c2041.5176 -1861.5811 2048.7246 -1864.3057 2055.3291 -1866.9434 c2067.9854 -1871.999 2080.9785 -1876.1953 2092.8691 -1882.9189 c2104.793 -1889.6621 2115.5596 -1898.1934 2125.3682 -1907.7197 c2135.1846 -1917.2539 2144.6445 -1928.0488 2150.8027 -1940.3203 c2157.1992 -1953.0654 2164.4346 -1965.2949 2171.1973 -1977.8242 c2177.1787 -1988.9053 2185.6875 -2001.4414 2198.0244 -2005.7666 c2209.7734 -2009.8857 2223.1465 -2007.8516 2235.2881 -2007.4512 c2247.2266 -2007.0576 2256.8945 -2004.0381 2265.584 -1995.5303 c2273.4131 -1987.8623 2279.2041 -1977.4072 2284.3125 -1967.8096 c2292.8662 -1951.7354 2295.123 -1934.0654 2297.2695 -1916.2676 c2298.2676 -1907.9844 2300.9385 -1900.1621 2301.3018 -1891.7578 c2301.4639 -1888.0029 2301.502 -1884.4531 2302.1406 -1880.7275 c2302.8496 -1876.5928 2303.1475 -1872.1426 2300.4707 -1868.6191 c2295.4707 -1862.0352 2284.1719 -1868.5 2289.2461 -1875.1797 c2290.4121 -1876.7148 2289.1182 -1880.0576 2288.834 -1881.918 c2288.3945 -1884.7939 2288.375 -1887.627 2288.334 -1890.5254 c2288.3291 -1890.8643 2288.2969 -1891.1953 2288.2813 -1891.5303 C2274.375 -1874.5977 2255.5703 -1863.7002 2239.3613 -1849.082 c2231.5547 -1842.04 2225.5693 -1831.2666 2223.7168 -1820.9395 c2222.8652 -1816.1904 2223.0449 -1810.9209 2222.708 -1806.0859 c2222.543 -1803.7275 2222.4697 -1801.2832 2222.8994 -1798.9521 c2223.0703 -1798.0273 2223.3262 -1797.3252 2223.7129 -1796.5586 C2232.585 -1795.7461 2242.0811 -1799.5313 2250.8711 -1800.3105 c2256.875 -1800.8438 2263.0684 -1802.7021 2269.1221 -1803.5098 c2276.6094 -1804.5098 2283.4453 -1805.9395 2290.4922 -1808.6436 c2303.2715 -1813.5459 2316.2275 -1817.9707 2328.9902 -1822.9199 c2332.7471 -1824.377 2337.8096 -1824.8975 2341.0156 -1827.5293 c2343.9219 -1829.916 2344.7109 -1834.1885 2345.5967 -1837.623 c2346.6543 -1841.7285 2351.5498 -1843.5664 2355.1445 -1841.5078 c2359.8525 -1838.8125 2362.6895 -1834.5488 2365.9658 -1830.3818 c2367.6094 -1828.292 2369.6582 -1827.2939 2371.4609 -1825.4902 c2373.7139 -1823.2383 2375.1162 -1820.4834 2377.5918 -1818.2871 c2381.6934 -1814.6504 2386.8457 -1812.2168 2391.4229 -1809.2627 c2396.7207 -1805.8438 2402.6387 -1803.6816 2408.7344 -1802.1992 c2414.2559 -1800.8574 2420.1914 -1800.5059 2425.7881 -1801.5586 c2428.7842 -1802.1221 2431.3418 -1803.332 2434.4287 -1803.4531 c2436.8652 -1803.5479 2439.4492 -1805.0283 2440.7803 -1807.0313 c2440.9951 -1807.3545 2441.1572 -1808.3486 2441.3047 -1808.4707 C2441.0195 -1809.0371 2440.5156 -1809.6875 2440.2813 -1810.0645 c2439.043 -1812.0547 2437.6484 -1813.9102 2436.6426 -1816.0381 c2435.4883 -1818.4805 2435.4297 -1820.8047 2435.3027 -1823.4658 c2435.2441 -1824.7139 2433.834 -1825.6357 2433.2607 -1826.6143 c2432.2441 -1828.3496 2432.2256 -1830.6348 2431.8691 -1832.5752 c2429.8828 -1843.3916 2425.5107 -1853.3848 2417.5693 -1861.1191 c2413.5684 -1865.0156 2408.7402 -1867.3389 2404.0527 -1870.2363 c2397.4355 -1874.3262 2390.502 -1877.8848 2383.4209 -1881.0957 c2370.0107 -1887.1777 2355.6514 -1891.2549 2341.1895 -1893.8945 c2332.1387 -1895.5469 2317.9404 -1893.6475 2315.8359 -1905.6133 c2314.2139 -1914.8418 2315.1953 -1925.1436 2315.4004 -1934.4697 c2315.6055 -1943.8145 2316.9326 -1953.2998 2315.5342 -1962.6104 c2312.6279 -1981.9512 2294.4414 -1995 2283.2451 -2009.6328 c2281.0859 -2012.4541 2282.8047 -2016.9014 2285.5762 -2018.5254 c2288.9199 -2020.4844 2292.3213 -2019.002 2294.4697 -2016.1934 c2302.3242 -2005.9297 2312.0781 -1997.3604 2319.4004 -1986.6357 c2326.8438 -1975.7334 2329.2549 -1963.585 2329.0889 -1950.5811 c2328.9219 -1937.502 2328.2852 -1924.4766 2328.3701 -1911.3799 c2328.375 -1910.6836 2328.4805 -1909.3174 2328.5469 -1908.4912 C2329.2891 -1908.3643 2330.1523 -1908.415 2330.8623 -1908.4023 c2338.2305 -1908.2715 2346.0576 -1906.2852 2353.2236 -1904.6992 c2367.6211 -1901.5117 2381.5488 -1896.4014 2394.8438 -1890.0586 c2406.2383 -1884.623 2418.5635 -1878.2949 2427.6836 -1869.4131 c2435.749 -1861.5586 2440.7041 -1851.0322 2443.4785 -1840.2559 c2443.8291 -1838.8955 2444.3896 -1833.4258 2444.5801 -1833.2051 c2446.6689 -1830.7871 2447.7324 -1827.877 2448.1367 -1824.752 c2448.4395 -1822.4111 2448.209 -1821.7432 2449.4658 -1819.7227 c2450.9941 -1817.2666 2452.8213 -1814.9756 2453.7598 -1812.1963 c2457.5039 -1801.1064 2445.6553 -1791.7959 2435.9199 -1790.6309 cf0 D2222.9639 -1796.624 m2223.1621 -1796.5996 2223.3633 -1796.5908 2223.5615 -1796.5713 C2222.6465 -1797.3975 2221.4727 -1796.8057 2222.9639 -1796.624 cf*U*u1 D1988.7256 -1970.1719 m1982.6777 -1971.0811 1977.0049 -1975.8262 1972.5586 -1979.6807 c1970.4707 -1981.4902 1968.3311 -1983.5215 1966.4141 -1985.7188 C1965.3281 -1985.9219 1964.2402 -1986.4258 1963.2305 -1987.3145 c1952.4082 -1996.8398 1954.0977 -2012.1436 1967.2988 -2018.4541 c1973.1582 -2021.2549 1980.1113 -2021.7979 1986.208 -2019.4277 c1993.5957 -2016.5566 1997.4053 -2010.7578 2000.4668 -2003.791 c2004 -1995.751 2006.5596 -1986.9023 2004.0957 -1978.1826 c2002.1611 -1971.333 1994.9434 -1969.2373 1988.7256 -1970.1719 cf0 D1989.6318 -1996.2119 m1987.0869 -2003.1104 1983.2246 -2009.5898 1974.918 -2007.5127 c1970.457 -2006.3965 1968.6699 -2004.04 1969.1943 -2001.3613 C1970.8389 -2001.1133 1972.3926 -2000.1426 1973.4385 -1998.1924 c1976.2354 -1992.9805 1981.9326 -1988.1416 1987.1162 -1984.8643 c1988.4863 -1983.998 1989.8447 -1983.3311 1991.3955 -1982.8828 c1991.6719 -1982.8027 1991.8926 -1982.7891 1992.0547 -1982.8008 C1993.8672 -1985.2402 1990.501 -1993.8555 1989.6318 -1996.2119 cf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF