%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.1.0%%For: (Evgeny Bakal) ()%%Title: (BKG 3.eps)%%CreationDate: 26.09.18 3:04%%Canvassize: 16383%%BoundingBox: 9 -2153 3837 -1%%HiResBoundingBox: 9 -2153 3837 -1%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1920.5 -1080.5 1920.5 -1080.5%AI3_TileBox: 1524 -1386 2316 -774%AI3_DocumentPreview: Header%AI5_ArtSize: 3840 2160%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1127 839 0.25 1831 940 18 0 0 6 130 0 0%AI5_OpenViewLayers: 7%%PageOrigin:1520 -1380%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 72 8%%BeginData: 3674 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1BFF85FD52FF85AFFD09FFCACFCFFD1CFFA9AF7F85FD51FFAF85%FD09FFCAFFCACAC9FD1BFF8585FD15FFA9FD3DFF85AFFD0AFFCACFCAFFC9%FD1AFF7FFD15FFA9855B857EFD3AFFA97EFD08FFCFC9CFCACACAFFC9FD18%FF7FAFFD16FF85857F85AFFD3AFF85FD08FFCAFFFD05CACFFD13FFFD0485%5BAFFD16FF8585315B5BA9FD1AFFAFFFFFA9858585A9FD17FF8585FD08FF%CAFFCACACAC9CAC9FD10FFA9858585FD1AFFA9855B857FA9A9FD17FFA9FD%0685AFA9FF8585FD15FFAF85FD09FFC9CFFFCACACFC9FD05FFAF85AF85FD%08FF85A9FD1DFFA9A95AA9FD10FFA9A9A9FD05FFA97FA9FFFF85A9FD05FF%857F7E857FAFFD10FF7EFD0BFFC9CAC9CAC9FD05FFAF5BA9858585FD05FF%AF8585FD2FFF85A9858585A985A985A9A985FD0CFFA9FFFFFF5BFD10FFAF%85FFAFFD10FF858585FD04FF857F8585857F85A9FD2EFFAF5BA9A9AFFD04%FF7FAFA95B85FD10FFAF5BFD10FFA97F857FFFFFFFA9AFFD13FFA9AFA9FD%31FF5BFD0BFFAFFD12FF85A9FD12FF8585AF85855BFD46FF85A9FD1EFF85%85FD13FFA985AFFFA97EFFFFAFA9FD40FF8585FD1FFFAFA9FD18FFA9FD04%85A9FFFFFF7FFD3AFF5BA9A9FD3BFFA9FFFF857F855BAFFD39FF85AFFD42%FFAFFD3AFFA985FD7FFF85FDBCFFC9FD7EFFC9CACAFD7AFFCAFFC9CAFFCA%CAFD78FFC3CACACFFFFFFFCFCACAFD76FFCFC9FD06FFCAC3FD78FFC9FD04%FFCACAFD0AFFCACAFD6DFFCACACFC9FFCAFD09FFCFCAFFC9FD6DFFCAFFCA%CFC9CFCAFD07FFCAC9CAC3CFC9FD6BFFCAC9C9FFFFFFC3CAFD07FFC9CACA%C9CACAFD6CFFCAFD0CFFCFCACAC9C3FFC9FD7AFFCAFFFFFFCAFD7CFFC9CA%C9CAFD7DFFCFFD69FFCBFD04FFCBC5FD78FFA2B997C5A9BF97B9A9FD77FF%C5B9BF97BFB9BFB9FD78FF9DB997BF97BF97BFFD78FFCB97BFB9BF97BFCB%FD79FFBF96BF97B99CFD7AFFCBBFB9BFBFFD7CFFCBBF9DFDFCFFFDFCFFFD%FCFFFDA1FF8585FF5B5BFD7BFFAF315B3185FD7BFF7F373037A9FD7AFF7F%37375B37A9FD69FFAFFD05FFAFFD09FF5B373137313731A9FD68FF8585FF%AF7F8585FD09FFAF8585375B313731AFFD68FFA9857FFD0FFF5B31A98585%5BFD69FFA9FD10FF7F5BFD7EFF8585FD7EFFAFFDFCFFFDFCFFFD88FFCBFD%7EFFCBC5FD64FFCAFFFFFFCAFD12FFBFFFFFFFCBFD63FFC9CAC9CAC9C9CA%FD11FFCBFD06FFCBCBFD60FFCACFC3FFCAFD1AFFA2FD5FFFCACAC2C3C3FD%11FFCBCBFD08FFCBFD5EFFCACACFCAC3CFCFFD10FFCBC5CBFD06FFCBA3FD%27FFA985A9FD34FFCACACFFD04CAFD11FFCBC5CBFD05FFBFFD28FFA95B61%5BA9FD33FFCACAFFFFCACAFD12FFCBC5A2CBC5C59CFD28FFAF7F5B305B5B%A9FD4DFFC5CBCBFD29FF85855B615B85A9FD7BFF855B85FD5BFFA9A97F85%A9FD1EFF85A9FD5AFF7F5B5A857FAFFD67FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Fade To Edge Black)(Fade To Edge Black) 0 3 Bd[0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br[0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Neon Rings Vignette)(Neon Rings Vignette) 1 17 Bd[0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B5B6B8B9BABDBEC0C1C3C4C5C7C8CACBCDCFD0D2D3D4D5D7D7D8DADBDBDDDEDFE0E2E3E4E5E6E7E7E8EAEAEBECECEDEDEEEEEEEFEFF0F0F1F1F1F2F2F2F2F3F3F2F3F4F3F3F4F4F4F4F5F4F4F5F5F4F4F4F4F4F4F4F3F3F4F4F3F3F3F3F2F3F2F2F2F2F2F2F2F1F1F0F1F0EFF0EFEEEEEEEEEDEDEDECECECECEBEAEBEAEAEAE9E8E8E8E7E7E7E6E6E5E5E5E4E3E3E3E2E2E1E1E0E0DFDFDFDEDDDDDCDCDBDBDAD9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D0D0D0CFCECECDCDCCCCCBCACAC9C8C7C7C6C5C5C4C4C3C3C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B8B7B7B6B5B5B4B3B2B2B1><B0B0B1B1B1B0B1B1B1B2B2B2B1B3B3B2B2B4B3B2B4B4B3B3B5B4B4B6B5B4B3B5B5B4B6B6B5B4B6B5B5B4B6B5B4B6B5B4B4B5B5B4B6B5B4B3B4B4B3B4B3B2B1B3B1B0AFB1B0AFB0AFAEADAFADACAEADABAAACAAA9AAA9A8A7A8A7A5A4A5A4A3A4A3A1A0A1A09E9F9E9D9B9C9B999A9997969795949293929091908E8D8E8C8A8B8A888787868485838280817F7D7B7C7A797977767475737172706F6D6D6C6A6A69676565646260615F5D5D5C5A5858565555535250504E4D4D4B4A4848474544444241413F3E3C3C3B393A3837353634323331302E2F2D2C2A2B2928292726242524><A5A5A3A3A3A3A2A1A19F9F9E9E9C9C9C9B999998979796969594949292929290908F8D8D8C8C8A8A8A8A88888886868686848483828281817F7F7F7D7C7C7C7A797979777776757474737271716F6F6E6E6C6C6C6A6A696967676665646363616160605E5D5D5C5B5B5A58585756555554535251514F4E4E4C4B4B4A484847454544444241413F3E3E3D3B3B3A3A3837373534333331302F2E2D2D2C2A2A292727262624232222201F1F1D1C1B1B191817151514131211110F0E0E0D0B0B0A0908070705050404030202000000000000000000000000000000000000000000000000><D5D4D3D2D1D0CFCECDCCCBC9C8C7C5C4C3C2C0BFBDBCBAB8B7B5B3B1AFADABA9A8A6A4A29F9D9B99979593918F8D8B89878583817E7C7A79777573716F6D6B6968666462605E5C5B5957555352504E4C4B494846444342403F3D3C3A383736343332302F2E2C2B2A29272625242221201F1E1D1C1B1A191716151514131211100F0E0E0D0C0B0B0A090908080706060505040404030303030202020202010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><1313131313131212121212121212121212121111111111111111111111111010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0909090909090909090909090808080808080808080808080707070707070707070707070606060606060606060606050505050505050505050505040404040404040404040404030303030303030303030303020202020202020202020202010101010101010101010101000000000000><0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F40414142434344454646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF>4 %_Br<B1B1B0B0B0B0B0B0AFAFAFAFAEAEAEAEADADADADADACACACABABAAAAAAA9A9A8A8A7A7A7A6A6A6A6A5A4A4A4A3A3A3A3A2A2A2A1A1A1A09F9F9E9E9E9D9D9D9C9B9B9A9A99989897969695959494939292919190908F8E8E8D8C8C8B8B8A898988888786868584848382828180807F7E7D7C7C7B7A797878777675747373727170706F6E6D6C6B6B6A69696867666564636261605F5E5D5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484747464544434241403F3F3E3D3C><2424222222222020211F1F201E1E1E1E1C1C1C1B1B1B1919191A17171816161614141414121213111212101010100E0E0F0D0D0D0D0B0B0C0A0A0B0909090A080909080808070708080607070506060505050504040403040403040404030304020303030202030202020101010201010100010100010101010101000101000001010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001010001>00<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC><AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6><EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB>4 %_Br<3C3D3E3F3F40414243444546474748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5D5E5F60616263646566676869696A6B6B6C6D6E6F707071727373747576777878797A7B7C7C7D7E7F808081828283848485868687888889898A8B8B8C8C8D8E8E8F90909191929293949495959696979898999A9A9B9B9C9D9D9D9E9E9E9F9FA0A1A1A1A2A2A2A3A3A3A3A4A4A4A5A6A6A6A6A7A7A7A8A8A9A9AAAAAAABABACACACADADADADADAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1><0100010100000100000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010100000101000101010101010001010001010102010101020202030202030303020403030404040304040304040405050505060605070706080807070808080909080A0909090B0A0A0C0B0B0D0D0D0D0F0E0E10101010121211131212141414141616161817171A1919191B1B1B1C1C1C1E1E1E1E201F1F212020222222222424>00<BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF>4 %_Br<B1B2B2B3B4B5B5B6B7B7B8B9BABABBBCBCBDBEBEBFBFC0C1C1C2C3C3C4C4C5C5C6C7C7C8C9CACACBCCCCCDCDCECECFD0D0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9DADBDBDCDCDDDDDEDFDFDFE0E0E1E1E2E2E3E3E3E4E5E5E5E6E6E7E7E7E8E8E8E9EAEAEAEBEAEBECECECECEDEDEDEEEEEEEEEFF0EFF0F1F0F1F1F2F2F2F2F2F2F2F3F2F3F3F3F3F4F4F3F3F4F4F4F4F4F4F4F5F5F4F4F5F4F4F4F4F3F3F4F3F2F3F3F2F2F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEAEAE8E7E7E6E5E4E3E2E0DFDEDDDBDBDAD8D7D7D5D4D3D2D0CFCDCBCAC8C7C5C4C3C1C0BEBDBAB9B8B6B5B4><24252426272928292B2A2C2D2F2E3031333234363537383A393B3C3C3E3F4141424444454748484A4B4D4D4E5050525355555658585A5C5D5D5F61606264656567696A6A6C6D6D6F707271737574767779797A7C7B7D7F818082838584868787888A8B8A8C8E8D8E9091909293929495979697999A999B9C9B9D9E9F9EA0A1A0A1A3A4A3A4A5A4A5A7A8A7A8A9AAA9AAACAAABADAEACADAFADAEAFB0AFB0B1AFB0B1B3B1B2B3B4B3B4B4B3B4B5B6B4B5B5B4B4B5B6B4B5B6B4B5B5B6B4B5B6B6B4B5B5B3B4B5B6B4B4B5B3B3B4B4B2B3B4B2B2B3B3B1B2B2B2B1B1B1B0B1B1B1B0B0><00000000000000000000000000000000000000000000000002020304040505070708090A0B0B0D0E0E0F111112131415151718191B1B1C1D1F1F202222232426262727292A2A2C2D2D2E2F3031333334353737383A3A3B3B3D3E3E3F414142444445454748484A4B4B4C4E4E4F51515253545555565758585A5B5B5C5D5D5E606061616363646566676769696A6A6C6C6C6E6E6F6F717172737474757677777979797A7C7C7C7D7F7F7F81818282838484868686868888888A8A8A8A8C8C8D8D8F909092929292949495969697979899999B9C9C9C9E9E9F9FA1A1A2A3A3A3A3A5A5><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010202020202030303030404040505060607080809090A0B0B0C0D0E0E0F101112131415151617191A1B1C1D1E1F20212224252627292A2B2C2E2F303233343637383A3C3D3F404243444648494B4C4E5052535557595B5C5E6062646668696B6D6F71737577797A7C7E81838587898B8D8F91939597999B9D9FA2A4A6A8A9ABADAFB1B3B5B7B8BABCBDBFC0C2C3C4C5C7C8C9CBCCCDCECFD0D1D2D3D4D5><00000000000001010101010101010101010102020202020202020202020203030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606060707070707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010111111111111111111111111121212121212121212121212131313131313><AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A59585857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B3B2B0B0AEADABAAA9A9A7A6A4A4A2A2A0A09E9E9D9D9C9C9A9A989896969595939391918F8F8C8C8988868684848383818180807E7F7D7D7C7B7A7A79797777757574747272717170706F6F6E6E6D6D6C6C6B6B6A6A696968686767666665656464636462626162616160605F5F5E5E5D5D5C5C5B5C5A5A5959585857575656555554545353525150504F4F4E4E4D4C4B4B4A4A49494747464645444343424140403F3E3D3D3C3B3A39383837363534333231302F2E2D2C2B2A282726242322201F1E1C1B1A181716141312100F0E0C0B0A080706050403020000><B0B1B2B3B3B4B5B6B8B8BABABCBDBFC0C2C3C5C4C5C5C6C6C7C7C8C8C9C9CBCBCDCCCECFD1D1D3D5D7D7D9DBDDDEDFE0E0E0E1E2E3E3E4E3E4E5E6E6E8E8EAEAEBECEDEEEFEFEFEFF0F1F1F2F3F2F2F2F3F3F4F4F4F4F5F5F6F6F7F7F6F7F7F7F8F8F9F8F8F9F9FAFAFAFAFAFBFBFBFBFCFCFBFCFCFCFCFDFDFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F2F2F1F1><A5A5A3A3A3A3A1A19FA09FA09F9F9E9E9D9D9C9D9C9C9B9B9A9A9A9A999998989798979796979596949594949394939393949293929291929192909190908F908F908E8F8E8F8E8F8E8F8D8E8D8E8D8E8C8D8B8C8B8C8B8C8A8B8A8B8A8B898A898A888A8889888887888788868786868586858684858384838482838182808180807F7F7E7E7D7D7C7D7B7C7A7B797A787977787677757674757373717270706F6F6D6E6C6D6B6B696A686866666464626260615F5F5D5D5B5B595A57575454525250504E4E4B4B49494646444441413F3F3D3D3A3A383836363434><D5D5D4D3D2D2D1D1D0CFCECECDCDCCCBCACAC9C9C7C7C5C5C4C3C2C1C0BFBDBDBBBAB9B8B6B6B4B3B1B0AFAEACABA9A8A6A5A3A2A0A09D9D9B9A9796949391908E8D8B8A8887858482817F7E7C7A7877757472716F6E6C6B696866656362605F5D5C5A595756545351504F4E4C4B49484646444341403E3D3C3B39383736343332312F2E2D2C2A2928272525232221201F1E1D1C1A1A181816161414131211100F0F0E0D0C0B0A0A09090807070606050404030302020202010101010101000000000000000000000000000000000000000000000000000000000000><131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F101010101010101111111111111111121212121212121313131313131314141414141414141515151515151516161616161616171717171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F202020202020202121212121212122222222222222222323232323232324242424242424252525252525252526262626262626272727272727272828282828282828292929292929292A2A2A2A><0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7B7B>4 %_Br<0000000000000000000101010101010101010101010101010102020202020202020202020202030202020304030404040404050505050505050505060606060606060606070707070707070809090909090909090A0A0A0A09090A0A0B0B0B0B0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0D0D0D0D0E0E0E0E0E0E0E0E0E0E101010101011111111><F1F1F0EFEFEEEDEDECECEBEBEAE9E8E8E7E6E6E5E4E3E3E2E1E0DFDFDEDDDDDCDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBCBBBAB9B7B6B5B4B3B2B1B0AEADACAAA9A8A6A5A3A2A19F9E9D9B9A999796949391908E8D8B8A888786848382807E7D7B7A787776747372706F6E6C6B6A686765646261605E5D><343233302E2F2D2E2B292A2826272523232120201F1F1E1C1D1B1A1A1917181617151314131112100F100E0F0D0C0D0C0B0C0B0A0B0A090A090908070807060605040505060504050404040303040304030203020203020102020102010202010101000100000000010000000000000000000000000000000000000000000000000000000000>0<EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6><2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF><7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F9091919293939495959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCDCECFCFD0>4 %_Br<1111111110101010100E0E0E0E0E0E0E0E0E0E0D0D0D0D0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0B0B0B0B0A0A09090A0A0A0A090909090909090908070707070707070606060606060606060505050505050505050404040404030403020202030202020202020202020202020201010101010101010101010101010101000000000000000000><5D5E606162646567686A6B6C6E6F707273747677787A7B7D7E808283848687888A8B8D8E909193949697999A9B9D9E9FA1A2A3A5A6A8A9AAACADAEB0B1B2B3B4B5B6B7B9BABBBCBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDCDDDDDEDFDFE0E1E2E3E3E4E5E6E6E7E8E8E9EAEBEBECECEDEDEEEFEFF0F1F1><0000000000000000000000000000000000000000000000000000000000010000000001000101010202010201020201020302020302030403040303040404050405060505040506060708070809090A090A0B0A0B0C0B0C0D0C0D0F0E100F1012111314131517161817191A1A1B1D1C1E1F1F2020212323252726282A292B2E2D2F2E30333234>0<E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEE><AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A><D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A8988888787868585848383828181807F7F7E7E7D7C7C7B>4 %_Br<0000020304050607080A0B0C0E0F101213141617181A1B1C1E1F202223242627282A2B2C2D2E2F30313233343536373838393A3B3C3D3D3E3F40404142434344454646474749494A4A4B4B4C4D4E4E4F4F5050515253535454555556565757585859595A5A5C5B5C5C5D5D5E5E5F5F606061616261626264636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727274747575777779797A7A7B7C7D7D7F7E8080818183838484868688898C8C8F8F919193939595969698989A9A9C9C9D9D9E9EA0A0A2A2A4A4A6A7A9A9AAABADAEB0B0B2B3B4><F1F1F2F2F3F3F3F4F4F4F4F5F5F5F5F6F6F6F6F7F7F7F7F7F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFDFDFCFCFCFCFBFCFCFBFBFBFBFAFAFAFAFAF9F9F8F8F9F8F8F7F7F7F6F7F7F6F6F5F5F4F4F4F4F3F3F2F2F2F3F2F1F1F0EFEFEFEFEEEDECEBEAEAE8E8E6E6E5E4E3E4E3E3E2E1E0E0E0DFDEDDDBD9D7D7D5D3D1D1CFCECCCDCBCBC9C9C8C8C7C7C6C6C5C5C4C5C3C2C0BFBDBCBABAB8B8B6B5B4B3B3B2B1B0><3434363638383A3A3D3D3F3F41414444464649494B4B4E4E50505252545457575A595B5B5D5D5F5F616062626464666668686A696B6B6D6C6E6D6F6F707072717373757476757776787779787A797B7A7C7B7D7C7D7D7E7E7F7F8080818082818382848384838584868586858686878688878887888889888A888A898A898B8A8B8A8B8A8C8B8C8B8C8B8D8C8E8D8E8D8E8D8F8E8F8E8F8E8F8E908F908F909091909291929192929392949393939493949495949695979697979897989899999A9A9A9A9B9B9C9C9D9C9D9D9E9E9F9FA09FA09FA1A1A3A3A3A3A5A5><000000000000000000000000000000000000000000000000000000000000010101010101020202020303040405060607070809090A0A0B0C0D0E0F0F101112131414161618181A1A1C1D1E1F2021222325252728292A2C2D2E2F31323334363738393B3C3D3E40414344464648494B4C4E4F505153545657595A5C5D5F606263656668696B6C6E6F7172747577787A7C7E7F8182848587888A8B8D8E9091939496979A9B9D9DA0A0A2A3A5A6A8A9ABACAEAFB0B1B3B4B6B6B8B9BABBBDBDBFC0C1C2C3C4C5C5C7C7C9C9CACACBCCCDCDCECECFD0D1D1D2D2D3D4D5D5><EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413><2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A191919191919191818181818181818171717171717171616161616161615151515151515141414141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C><7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B4B5B4B4B4B5B5B4B4B6B6B6B5B7B7B7B7B9B9B9BBBBBBBABCBCBCBCBEBDBDBCBEBEBEBEBFBFBFBFC0C1C0C2C2C1C1C2C2C2C2C3C3C2C2C3C3C3C2C3C3C3C4C4C3C3C4C4C3C3C4C3C3C2C4C3C3C2C3C2C2C1C2C1C0C2C1C0BFC0C0BFBFBFBFBEBDBDBDBCBBBCBBBABABAB9B8B8B8B6B6B6B5B4B3B4B2B1B0B0AFAEADADACAAAAA9A8A6A6A5A3A2A2A09F9D9D9C9A989896><B0B2B1B3B3B5B5B7B8B9B9BCBEBEC0C0C2C2C4C4C6C6C8CACACCCCCECDCFCFD0D0D1D3D3D5D4D6D5D7D7D8D8DADBDBDCDCDDDCDEDDDEDEDFE0DFE1E0E1E1E2E1E2E1E3E4E3E4E3E4E3E4E3E4E4E5E4E5E6E4E5E4E5E4E5E4E5E4E5E5E4E5E4E5E4E4E3E4E3E3E4E3E3E2E3E1E2E1E1E0E0E1DFE0DEDFDEDEDDDDDCDCDDDBDBDADAD9D9D8D8D7D7D7D6D6D4D4D3D3D2D2D1D1><A5A3A3A2A2A0A09E9E9C9C9A9898969594939191908F8E8C8C8A898887868584838281807F7E7D7C7B7B797978777675747373727170706F6D6D6C6B6A6A69686766656463626160605E5E5C5C5B5A595857565554535251504F4E4D4C4A4A48474645444342403F3D3C3B3A383736353331302E2E2C2B292826252321201D1C1A1917151312100E0D0B0A09080605030200><D5D4D3D2D1D0CECDCCCBCAC9C7C6C5C3C2C1BFBEBCBBB9B7B5B3B1AFADABA9A7A5A3A19F9C9A989693918F8D8B888684827F7D7B79777572706E6C6A68666462605E5B59575553514F4D4B4948454442403E3C3A38363533312F2E2C2A292726242221201E1D1B1A181715141312100F0E0D0C0A0A0808070605050403030302020201010101010101000000000000000000><1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E><0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F303030313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F>4 %_Br<96959392908F8D8C8A898786848382807F7D7B7A787775747371706F6D6C6B69686665646261605E5D5C5A59575655545251504F4C4B4A48474645444241403E3D3C3B3A39383735343332302F2D2C2B2928272625242221201F1E1D1C1B1A191817161514131211><D1CFCECCCBC9C8C7C5C5C4C2C1C0BFBDBCBBBAB9B7B6B5B3B2B1B1AFAEACABAAA9A7A6A5A3A2A1A09E9D9C9C9B99989795949391918F8E8D8C8B898887878685848381807F7E7D7C7B7A7977767575747372706F6E6D6C6B6A6968676665646463636261605F5E5D>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6><4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF><9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0>4 %_Br<1112131415161718191A1B1C1D1E1F2021222425262728292B2C2D2F30323334353738393A3B3C3D3E40414244454647484A4B4C4F50515254555657595A5C5D5E60616264656668696B6C6D6F707173747577787A7B7D7F808283848687898A8C8D8F9092939596><5D5E5F6061626363646465666768696A6B6C6D6E6F7072737475757677797A7B7C7D7E7F808183848586878788898B8C8D8E8F91919394959798999B9C9C9D9EA0A1A2A3A5A6A7A9AAABACAEAFB1B1B2B3B5B6B7B9BABBBCBDBFC0C1C2C4C5C5C7C8C9CBCCCECFD1>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E><AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756565554535251504F4E><D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F>4 %_Br<9698989A9C9D9D9FA0A2A2A3A5A6A6A8A9AAAAACADADAEAFB0B0B1B2B4B3B4B5B6B6B6B8B8B8B9BABABABBBCBBBCBDBDBDBEBFBFBFBFC0C0BFC0C1C2C0C1C2C1C2C2C3C2C3C3C4C2C3C3C4C3C3C4C4C3C3C4C4C3C3C3C2C3C3C3C2C2C3C3C2C2C2C2C1C1C2C2C0C1C0BFBFBFBFBEBEBEBEBCBDBDBEBCBCBCBCBABBBBBBB9B9B9B7B7B7B7B5B6B6B6B4B4B5B5B4B4B4B5B4B4><D1D1D2D2D3D3D4D4D6D6D7D7D7D8D8D9D9DADADBDBDDDCDCDDDDDEDEDFDEE0DFE1E0E0E1E1E2E1E3E2E3E3E4E3E3E4E3E4E4E5E4E5E4E5E5E4E5E4E5E4E5E4E5E4E6E5E4E5E4E4E3E4E3E4E3E4E3E4E3E1E2E1E2E1E1E0E1DFE0DFDEDEDDDEDCDDDCDCDBDBDAD8D8D7D7D5D6D4D5D3D3D1D0D0CFCFCDCECCCCCACAC8C6C6C4C4C2C2C0C0BEBEBCB9B9B8B7B5B5B3B3B1B2B0><000203050608090A0B0D0E1012131517191A1C1D202123252628292B2C2E2E303133353637383A3B3C3D3F40424344454647484A4A4C4D4E4F505152535455565758595A5B5C5C5E5E60606162636465666768696A6A6B6C6D6D6F707071727373747576777879797B7B7C7D7E7F808182838485868788898A8C8C8E8F9091919394959698989A9C9C9E9EA0A0A2A2A3A3A5><00000000000000000001010101010101020202030303040505060708080A0A0C0D0E0F101213141517181A1B1D1E202122242627292A2C2E2F31333536383A3C3E4042444548494B4D4F51535557595B5E60626466686A6C6E70727577797B7D7F828486888B8D8F919396989A9C9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBCBEBFC1C2C3C5C6C7C9CACBCCCDCED0D1D2D3D4D5><7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A69696867666665646363626160605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A494847474645444443424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A29282827262525242322222120201F1E1D1D1C1B1A1A191817171615141413><4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A191918181717161616151514141313121211111110100F0F0E0E0D0D0C0C><9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br[0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 Bs0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS%_0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink Radial)(Pink Radial) 1 2 Bd[0<00000102030405060708090B0C0D0E1011121314141617191A1C1D1E202122232426272728292A2C2D2E2F31313234353638393A3A3B3C3E3F414242434546474848494B4C4D4D4E4F51525254555758585A5B5C5D5D5F60616162636565666869696A6B6C6C6E6F6F707273737576767779797A7B7B7D7E7E7F8181828383848585878888898A8A8C8C8D8E8E8F8F91929294939596969898999B9A9C9C9D9D9F9FA0A2A2A3A3A4A4A6A6A7A7A8A8A9A9AAAAACACADADAEAEAFAFB1B1B2B2B3B3B3B4B4B5B5B6B6B6B7B7B9B9BAB9B9BABABBBBBBBCBCBEBDBDBFBFBFC0C0C0C1C1C2C2C2C3C3C3C4C4C4C4C5C5C5C6C6C6C7C7C7C7C8C8C8C9C9C9C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCCCDCDCDCDCDCDCECECECECECECFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1><0000000001010102020303030303040405050606070808090909090A0A0B0C0C0D0E0E0E0F0F10101112121113131415151615161818191A191A1A1C1C1C1C1D1E1F1E1F20212221222324252425262727282829282A2B2C2B2D2D2E2D2F302F3031323132343334363536373837383A393A3C3B3C3E3D3E403F40404142424445454647474847494A4A4B4A4C4D4D4E4D4F4E505150525153525355555756585759585A5A5B5B5D5D5E5E5F5F616162626363646465656767686869696A6A696B6B6D6D6E6E6D6F6F7171707272747473757577777678787A7A797B7B7A7C7C7C7E7D7D7F7F7F8180808282818184838385858587878686888888888A8A8A8A8C8B8B8B8B8D8D8D8D8F8E8E8E8E909090909090919191919191939292929292929294949494949494949494949595959595959595959595959595>01<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A89888887878685858484838382828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F6F6E6E6D6D6C6C6C6B6B6A6A6A69696868686767676666666565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A59595959595858585858585757575757575656565656565656555555555555555555555454545454545454545454545454><FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777776767575747474737372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A6969696868686767676666666665656564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959>4 %_Br[0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 %_BS%_0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 3 Bd[0<A9A9AAAAABABADADAEAEAEAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B8B9B9BABABABBBBBCBCBDBDBDBEBEBFBFC0C0C1C1C1C2C2C3C3C4C4C5C5C5C6C6C7C7C8C8C8C9C9C9C9CACACBCB><080A0B0C0D0F1012131517191B1C1E1F2123242627292B2D2E3032333537383A3C3D3F414244484A4B4E505153545657595B5D5F6062636567696A6C6F70727476787A7C7D7F81838587898B>01<7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A><ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160>4 %_Br0<8282828383838383838585858585858686878787878888888888888A8A8A8A8A8A8C8C8C8C8C8C8D8D8D8D8D8D8F8F8F8F8F8F90909090909192929292929294949494949495959595959797979797979999999999999B9B9B9B9B9B9D9D9D9D9D9D9E9E9E9E9F9FA0A0A0A0A0A0A2A2A2A2A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7A7A7A7A9A9A9><F5F4F4F3F2F1F0EFEEEDECEAE9E8E6E6E5E4E3E2E1E0DFDEDDDBDAD8D7D6D4D3D2D1D0CFCDCCCAC8C6C5C4C2C1C0BFBEBDBCBAB9B7B6B4B3B1AFADACAAA9A7A5A3A2A09F9D9B9998969492908E8C8A88868482817F7D7A78777573716F6D6B69676562605F5D5B59565452504F4D4A484644413F3C3B39373533302E2D2B29272422201E1C1A17151312100E0B0A08>01<9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A89898989898988888888888887878787878686868686868585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B><1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 %_BS%_0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 Bs0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 %_BS%_0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 Bs0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 %_BS%_0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 139)(Unnamed gradient 139) 1 2 Bd[00001114 %_Br[0 0 0 0 1 1 1 2 87 36.6667 %_BS%_0 0 0 0 1 1 1 2 87 36.6667 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F50525354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBBBCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F80818182838384858686878889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACACADADADADADADADAD><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F4041424344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F8081818283848485858687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E80838587898C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Water)(Water) 0 5 Bd[<D5D6D6D7D7D8D9D9D9DADADBDCDCDDDEDEDFDFE0E1E1E1E2E3E3E4E4E5><5253545657595A5A5B5D5E606163646567686A6B6C6C6D6E7071727475><3F3F404141424345454647474848494B4B4C4C4D4D4F4F505151525353><02020203030304040505050606070709090A0A0B0C0C0D0E0F10101112>0<8A89888786858484838281807F7E7D7C7B7A7978777776757473727170><A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C>4 %_Br<B9BABBBBBCBDBDBEBFBFC0C1C1C2C2C3C3C4C4C5C5C6C6C7C8C8C9C9CACBCCCCCDCDCECFD0D0D0D1D2D2D3D4D4D4D5><17181A1A1B1D1E2021212324262829292B2D2E3032313335363838393B3C3E403F414344464747494A4C4D4F4F5052><15161718191A1A1B1B1D1E1E1F1F202223232425252728292B2C2E2E2F30303133343535363738393A3A3B3C3D3E3F><0000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010202>0<B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929191908F8E8D8C8C8B8A><D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9>4 %_Br<7576777879797A7B7C7D7E7E7F808182828384858586878888898A8B8C8C8D8E8E8F9090919293939494959696979899999A9A9B9C9C9D9E9E9E9FA0A1A1A2A2A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAAAABABACACADADADADAEAEAFAFB0B0B0B1B2B2B2B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B8B8B8B8B8B9B9B9B9B9><02020202020102020201020202010202020102020101020201010202010102010101020202010302020203030202030303030404030304040404050404040505040505050506060605070706060707070708080808090909080A0A09090B0B0B0A0C0C0C0C0E0E0E0E10100F0F111111111212121214141414151515151717><10111010121211111111101112121212121211111313121313131212141413141414131315151414141513141516141515151414161614151515141416161414151414161615151515141416161515151615151617161616161515171716161617161618181717171716161717161616161515171716161616151516171515>0<7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B1B1B1B1B0B0><E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9D9D9D9D8D8D8D8>4 %_Br<000001010203040505060708090A0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233343535363738393A3A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F616162636465666768696A6B6B6C6D6E6F70707172737475><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000010100010102010102010102010202010202><000000000000000000010101010102010202010103020202020203030303030403040403040404050405060506050506060606060607060706060707080807080808090808080909090909080A0A09090A0A0B0B0A0B0A0B0C0B0B0C0C0C0C0C0C0B0D0D0C0C0D0D0E0D0D0D0D0E0F0E0E0E0E0F0F0F0F0E101010100F0F111010>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F><FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0><FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8>4 %_Br[0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 %_BS%_0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 Bs0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 %_BS%_0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 Bs0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 %_BS%_0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 Bs0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS%_0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Diamond Cubes)(Diamond Cubes) 6.5605 11.3652 85.3018 79.5596 [%AI3_Tile(0 O 0 R 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 Xa 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR45.9316 56.8281 m39.3691 45.4609 L26.2471 45.4609 L32.8066 56.8281 L45.9316 56.8281 Lf45.9316 34.0957 m39.3691 22.7305 L26.2471 22.7305 L32.8066 34.0957 L45.9316 34.0957 Lf65.6162 22.7305 m59.0537 11.3652 L45.9316 11.3652 L52.4932 22.7305 L65.6162 22.7305 Lf65.6162 45.4609 m59.0537 34.0977 L45.9316 34.0977 L52.4932 45.4609 L65.6162 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L6.5605 11.3652 L13.123 22.7305 L26.2471 22.7305 Lf26.2471 45.4609 m19.6846 34.0977 L6.5605 34.0977 L13.123 45.4609 L26.2471 45.4609 Lf45.9316 79.5586 m39.3691 68.1924 L26.2471 68.1924 L32.8066 79.5586 L45.9316 79.5586 Lf65.6162 68.1934 m59.0537 56.8281 L45.9316 56.8281 L52.4932 68.1924 L65.6162 68.1934 Lf85.3018 56.8281 m78.7402 45.4609 L65.6162 45.4609 L72.1777 56.8281 L85.3018 56.8281 Lf85.3018 34.0957 m78.7402 22.7305 L65.6162 22.7305 L72.1777 34.0957 L85.3018 34.0957 Lf85.3018 79.5586 m78.7402 68.1924 L65.6162 68.1924 L72.1777 79.5586 L85.3018 79.5586 Lf26.2471 68.1924 m19.6846 56.8281 L6.5605 56.8281 L13.123 68.1924 L26.2471 68.1924 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 Xa 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR26.2471 68.1924 m19.6846 56.8281 L26.2471 45.4609 L32.8066 56.8281 L26.2471 68.1924 Lf26.2471 45.4609 m19.6846 34.0957 L26.2471 22.7305 L32.8066 34.0957 L26.2471 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L26.2471 0 L32.8066 11.3652 L26.2471 22.7305 Lf45.9316 34.0957 m39.3691 22.7305 L45.9316 11.3652 L52.4932 22.7305 L45.9316 34.0957 Lf45.9316 56.8281 m39.3691 45.4609 L45.9316 34.0977 L52.4932 45.4609 L45.9316 56.8281 Lf6.5605 34.0957 m0 22.7305 L6.5605 11.3652 L13.123 22.7305 L6.5605 34.0957 Lf6.5605 56.8281 m0 45.4609 L6.5605 34.0977 L13.123 45.4609 L6.5605 56.8281 Lf26.2471 90.9238 m19.6846 79.5586 L26.2471 68.1924 L32.8066 79.5586 L26.2471 90.9238 Lf45.9316 79.5586 m39.3691 68.1924 L45.9316 56.8281 L52.4932 68.1924 L45.9316 79.5586 Lf65.6162 68.1924 m59.0537 56.8281 L65.6162 45.4609 L72.1777 56.8281 L65.6162 68.1924 Lf65.6162 45.4609 m59.0537 34.0957 L65.6162 22.7305 L72.1777 34.0957 L65.6162 45.4609 Lf65.6162 22.7305 m59.0537 11.3652 L65.6162 0 L72.1777 11.3652 L65.6162 22.7305 Lf85.3018 34.0957 m78.7402 22.7305 L85.3018 11.3652 L91.8643 22.7305 L85.3018 34.0957 Lf85.3018 56.8281 m78.7402 45.4609 L85.3018 34.0977 L91.8643 45.4609 L85.3018 56.8281 Lf65.6162 90.9238 m59.0537 79.5586 L65.6162 68.1924 L72.1777 79.5586 L65.6162 90.9238 Lf85.3018 79.5586 m78.7402 68.1924 L85.3018 56.8281 L91.8643 68.1924 L85.3018 79.5586 Lf6.5605 79.5576 m0 68.1924 L6.5605 56.8281 L13.123 68.1924 L6.5605 79.5576 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6091.6558 7111 L-6091.6558 7075.8271 L-6271 7075.8271 L-6271 7111 Lnuu0 O0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa0 R0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA0.5 w-6109.8286 7076.0781 m-6252.8276 7076.0781 L-6252.8276 7078.647 L-6109.8286 7078.647 L-6109.8286 7076.0781 Lb-6252.8276 7101.4829 m-6109.8286 7101.4829 L-6109.8286 7098.7109 L-6252.8276 7098.7109 L-6252.8276 7101.4829 Lb0 0 0 0 1 1 1 Xa-6252.8276 7078.647 m-6252.8276 7098.7109 L-6109.8286 7098.7109 L-6109.8286 7078.647 L-6252.8276 7078.647 LbU0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7110.6191 m-6092.2544 7110.6191 L-6094.4292 7108.3984 L-6125.9976 7108.3984 L-6131.1978 7110.6191 Lb-6092.2544 7086.5854 m-6109.8286 7086.5854 L-6109.8286 7088.6797 L-6094.3237 7088.6797 L-6092.2544 7086.5854 Lb0 0 0 0 1 1 1 Xa-6094.3237 7088.6797 m-6109.8286 7088.6797 L-6109.8286 7101.4829 L-6125.9976 7108.3984 L-6094.4292 7108.3984 L-6104.6465 7099.1279 L-6094.3237 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6270.4019 7110.6191 m-6231.4595 7110.6191 L-6236.6587 7108.3984 L-6268.2285 7108.3984 L-6270.4019 7110.6191 Lb0 0 0 0 1 1 1 Xa-6252.8286 7088.6797 m-6268.3345 7088.6797 L-6258.0112 7099.1279 L-6268.2285 7108.3984 L-6236.6587 7108.3984 L-6252.8286 7101.4829 L-6252.8286 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6252.8286 7086.5854 m-6270.4019 7086.5854 L-6268.3345 7088.6797 L-6252.8286 7088.6797 L-6252.8286 7086.5854 Lb-6231.4595 7110.6191 m-6252.8286 7101.4829 LSu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6131.1978 7101.4829 m-6131.1978 7108.1836 L-6115.5269 7101.4829 L-6131.1978 7101.4829 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7108.1836 m-6131.1978 7110.6191 L-6109.8286 7101.4829 L-6115.5269 7101.4829 L-6131.1978 7108.1836 Lb-6252.8286 7101.4829 m-6231.4595 7110.6191 L-6231.4595 7108.1836 L-6247.1294 7101.4829 L-6252.8286 7101.4829 Lb0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6247.1294 7101.4829 m-6231.4595 7108.1836 L-6231.4595 7101.4829 L-6247.1294 7101.4829 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 44)0 Au1 Ap0 J 0 j 1 w 4 M []0 d1 XR-6266.6665 7111 m-6271 7111 L-6271 7107.3989 L-6266.6665 7107.3989 L-6266.6665 7111 Lnu0 Ap0 XR-6269.9702 7110.3359 m-6267.6963 7110.3359 L-6267.6963 7108.062 L-6269.9702 7108.062 L-6269.9702 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6267.6963 7109.1992 m-6267.6963 7109.8271 -6268.2056 7110.3359 -6268.8335 7110.3359 c-6269.4614 7110.3359 -6269.9702 7109.8271 -6269.9702 7109.1992 c-6269.9702 7108.5718 -6269.4614 7108.062 -6268.8335 7108.062 c-6268.2056 7108.062 -6267.6963 7108.5718 -6267.6963 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 47)0 Au0 Ap0 J 0 j 1 w 4 M []0 d1 XR-6264.6064 7111 m-6271 7111 L-6271 7107.3989 L-6264.6064 7107.3989 L-6264.6064 7111 Lnu0 XR-6268.9404 7110.3359 m-6266.6665 7110.3359 L-6266.6665 7108.062 L-6268.9404 7108.062 L-6268.9404 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6266.6665 7109.1992 m-6266.6665 7109.8271 -6267.1753 7110.3359 -6267.8032 7110.3359 c-6268.4312 7110.3359 -6268.9404 7109.8271 -6268.9404 7109.1992 c-6268.9404 7108.5718 -6268.4312 7108.062 -6267.8032 7108.062 c-6267.1753 7108.062 -6266.6665 7108.5718 -6266.6665 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 48)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6263.1465 7111 L-6263.1465 7102.5957 L-6271 7102.5957 L-6271 7111 Lnu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa3.86371 M-6270.1582 7102.5957 m-6269.6812 7102.5845 -6269.2842 7102.9595 -6269.2725 7103.4375 c-6269.2593 7103.9141 -6269.6357 7104.3101 -6270.1138 7104.3237 c-6270.5903 7104.3359 -6270.9878 7103.96 -6270.9995 7103.4824 c-6271.0122 7103.0054 -6270.6357 7102.6069 -6270.1582 7102.5957 cf-6270.1357 7103.46 mFUu-6270.1558 7104.8188 m-6269.6782 7104.8086 -6269.2813 7105.1846 -6269.2686 7105.6621 c-6269.2563 7106.1382 -6269.6333 7106.5356 -6270.1104 7106.5488 c-6270.5874 7106.5615 -6270.9849 7106.1846 -6270.9971 7105.7075 c-6271.0093 7105.23 -6270.6328 7104.8345 -6270.1558 7104.8188 cf-6270.1333 7105.6846 mFUu-6270.1523 7107.0469 m-6269.6753 7107.0342 -6269.2783 7107.4102 -6269.2661 7107.8877 c-6269.2539 7108.3638 -6269.6304 7108.7612 -6270.1074 7108.7744 c-6270.5845 7108.7871 -6270.9814 7108.4102 -6270.9937 7107.9326 c-6271.0068 7107.4561 -6270.6299 7107.0581 -6270.1523 7107.0469 cf-6270.1299 7107.9102 mFUu-6270.1499 7109.2725 m-6269.6724 7109.2588 -6269.2754 7109.6357 -6269.2627 7110.1133 c-6269.25 7110.5894 -6269.6274 7110.9863 -6270.1045 7111 c-6270.5815 7111.0127 -6270.9785 7110.6357 -6270.9912 7110.1582 c-6271.0029 7109.6816 -6270.6274 7109.2832 -6270.1499 7109.2725 cf-6270.1274 7110.1357 mFUu-6268.1538 7103.6665 m-6267.6763 7103.6533 -6267.2793 7104.0293 -6267.2666 7104.5068 c-6267.2539 7104.9829 -6267.6309 7105.3809 -6268.1084 7105.394 c-6268.5854 7105.4063 -6268.9824 7105.0293 -6268.9946 7104.5527 c-6269.0068 7104.0752 -6268.6304 7103.6768 -6268.1538 7103.6665 cf-6268.1304 7104.5293 mFUu-6268.1499 7105.8901 m-6267.6729 7105.8789 -6267.2764 7106.2549 -6267.2632 7106.7324 c-6267.2515 7107.21 -6267.6274 7107.6069 -6268.1055 7107.6191 c-6268.5825 7107.6318 -6268.9795 7107.2549 -6268.9917 7106.7773 c-6269.0039 7106.3008 -6268.6274 7105.9023 -6268.1499 7105.8901 cf-6268.1274 7106.7549 mFUu-6268.1475 7108.1157 m-6267.6699 7108.1045 -6267.2729 7108.4805 -6267.2607 7108.9595 c-6267.2485 7109.4341 -6267.6255 7109.8325 -6268.1025 7109.8447 c-6268.5791 7109.8574 -6268.9766 7109.4814 -6268.9888 7109.0029 c-6269.0015 7108.5264 -6268.6245 7108.1279 -6268.1475 7108.1157 cf-6268.1245 7108.9805 mFUu-6266.0723 7104.7119 m-6265.5952 7104.6997 -6265.1987 7105.0781 -6265.1865 7105.5532 c-6265.1738 7106.0303 -6265.5508 7106.4287 -6266.0273 7106.4414 c-6266.5054 7106.4541 -6266.9019 7106.0757 -6266.9141 7105.5996 c-6266.9272 7105.1235 -6266.5498 7104.7261 -6266.0723 7104.7119 cf-6266.0503 7105.5781 mFUu-6266.0698 7106.939 m-6265.5928 7106.9253 -6265.1953 7107.3013 -6265.1831 7107.7788 c-6265.1704 7108.2573 -6265.5474 7108.6543 -6266.0249 7108.6685 c-6266.5024 7108.6797 -6266.8994 7108.3013 -6266.9116 7107.8252 c-6266.9233 7107.3486 -6266.5469 7106.9512 -6266.0698 7106.939 cf-6266.0474 7107.8013 mFUu-6264.0332 7105.7822 m-6263.5557 7105.7695 -6263.1592 7106.147 -6263.1465 7106.6255 c-6263.1333 7107.1016 -6263.5103 7107.4985 -6263.9883 7107.5117 c-6264.4653 7107.5229 -6264.8618 7107.147 -6264.8745 7106.6685 c-6264.8862 7106.1909 -6264.5098 7105.7949 -6264.0332 7105.7822 cf-6264.0103 7106.647 mFUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Banner/ Adobe Patte) -(rnOnPath Brush Tool/ Arrow Brush Circles/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Arrow Brush Circles)(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -( 1 0 4 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(Black)Pc0 0.993988 1 0 1 0 0 Xa(RGB Red)Pc0.061982 0 0.965148 0 1 1 0 Xa(RGB Yellow)Pc0.627649 0 1 0 0 1 0 Xa(RGB Green)Pc0.517937 0 0.125399 0 0 1 1 Xa(RGB Cyan)Pc0.883665 0.769161 0 0 0 0 1 Xa(RGB Blue)Pc0.269902 0.816403 0 0 1 0 1 Xa(RGB Magenta)Pc0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0.000366 0.500664 0.985656 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0.000214 0.348486 0.871305 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.045136 0 0.931884 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188968 0.000397 0.98233 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501091 0.001373 0.990387 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.746151 0 0.99704 0.000092 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.761959 0 0.749783 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.6972 0.14847 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.875364 0.526451 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262516 0.245243 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.970001 0.204959 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.22855 0.274266 0.39942 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.362341 0.574029 0.840574 0.226139 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Fade To Edge Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Fade To Edge Black)PcBb0 0 0 0 Bh2 (Neon Rings Vignette) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Neon Rings Vignette)PcBb2 (Water) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Water)PcBb0 0 0 0 Bh2 (Pink Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Pink Radial)Pc(Diamond Cubes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Diamond Cubes)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(R=0 G=0 B=0)Pc0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.306798 0.242466 0.247654 0 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.193668 0.150057 0.155337 0 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.084596 0.061311 0.065766 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.037049 0.025086 0.025086 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.6318 0.219425 0 0 0.247059 0.662745 0.960784 Xa(R=63 G=169 B=245)Pc0.55407 0 0.965515 0 0.478431 0.788235 0.262745 Xa(R=122 G=201 B=67)Pc0 0.508354 0.961639 0 1 0.576471 0.117647 Xa(R=255 G=147 B=30)Pc0 0.965057 0.900572 0 1 0.113725 0.145098 Xa(R=255 G=29 B=37)Pc0 0.661738 0.032776 0 1 0.482353 0.67451 Xa(R=255 G=123 B=172)Pc0.253758 0.127169 0.116762 0 0.741176 0.8 0.831373 Xa(R=189 G=204 B=212)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 3 79 79 255 0 50 Lb(Layer 4) Ln0 Au0 O0.706355 0.476051 0 0 0.247059 0.52549 1 Xa0 J 0 j 1 w 10 M []0 d0 XR836.6211 -1 m835.7139 -7.00928 834.6147 -12.9604 832.6812 -18.7515 c830.688 -24.7227 825.938 -30.5674 821.6064 -35.0288 c816.4746 -40.3149 809.6611 -43.561 803.0737 -46.644 c796.3921 -49.7715 789.7485 -52.875 783.1147 -56.104 c770.769 -62.1133 757.2085 -62.8921 743.7314 -62.9956 C742.6655 -61.9673 741.2896 -61.209 739.4355 -60.8916 c733.8979 -59.9434 730.5024 -65.3516 731.4248 -69.396 C731.3877 -71.7847 732.4844 -74.187 734.7114 -75.3271 C734.7202 -75.6245 734.7314 -75.9219 734.7363 -76.2183 c734.8115 -80.7061 736.9502 -84.9595 737.0908 -89.5171 c737.3545 -98.0811 737.064 -107.5054 732.3799 -115.0239 c727.0352 -123.603 721.3896 -130.7378 713.2451 -136.8579 c705.5337 -142.6528 696.5576 -147.562 688.1343 -152.2446 c679.478 -157.0566 669.0171 -159.7686 659.3281 -161.5825 c649.6626 -163.3916 640.0537 -165.6924 630.1563 -164.9941 c620.1143 -164.2861 610.0864 -162.356 600.0278 -161.8594 c595.5361 -161.6377 591.7607 -161.3472 587.4766 -159.7383 c584.7979 -158.7319 582.6284 -157.3584 580.2349 -156.2954 C579.2114 -155.5342 577.875 -155.0518 576.2256 -155.0103 C576.2061 -155.0063 576.1855 -155.0039 576.166 -155 c575.7827 -154.9268 575.4072 -154.8457 575 -154.7988 C575 -155.0137 L571.832 -155.1274 569.9639 -156.9106 569.3179 -159.125 C563.9902 -157.4302 557.354 -162.6987 561.4668 -168.1099 c564.2578 -171.7827 560.374 -180.7729 559.3403 -184.4663 c557.2979 -191.7632 548.2871 -195.4268 541.562 -197.7329 c532.9219 -200.6953 521.5669 -198.3105 513.1094 -195.7407 c509.0791 -194.5166 505.2598 -190.5591 502.1904 -187.8252 c498.8931 -184.8877 494.8848 -183.1646 491.6563 -180.2373 c486.731 -175.7715 479.8994 -180.6533 480.4336 -185.6768 C480.373 -186.8174 480.665 -188.0439 481.4473 -189.291 c482.6855 -191.2651 481.6646 -196.2456 481.356 -198.4639 c480.9248 -201.564 480.0303 -204.5762 479.0024 -207.5225 c476.7671 -213.9302 476.3896 -221.7275 472.3853 -227.4478 c470.5674 -230.0449 468.478 -232.4355 466.6904 -235.0601 c464.8906 -237.7031 464.4077 -238.8809 461.6855 -240.645 c455.7695 -244.4795 451.3325 -250.1333 445.4854 -254.063 c439.8018 -257.8823 434.5225 -262.3604 428.6128 -265.8818 c422.4321 -269.5649 414.7725 -271.0283 408.1079 -273.7354 c405.0225 -274.9888 401.8076 -274.9561 398.7178 -276.2808 c395.6255 -277.606 392.6963 -278.145 389.5146 -279.0854 c386.5757 -279.9536 383.2656 -279.5283 380.2334 -280.0137 c376.5249 -280.6064 372.8887 -281.71 369.2754 -282.708 c362.7905 -284.5 356.3081 -285.5146 350.0063 -287.856 c346.9395 -288.9961 344.1514 -288.9204 340.9277 -289.0098 c337.1997 -289.1133 333.6416 -290.1172 329.9648 -290.4751 c323.3369 -291.1211 316.4746 -290.105 309.9224 -289.1797 c302.9683 -288.1982 294.1318 -288.6855 287.7036 -285.6348 c281.4561 -282.6694 275.2471 -282.9268 268.7363 -281.3516 c261.0205 -279.4854 253.4517 -275.9854 245.9922 -273.2759 c233.5044 -268.7402 220.5024 -260.7959 214.3721 -248.646 c212.8315 -245.5928 210.4673 -242.5693 209.1914 -239.4424 c208.2627 -237.1655 205.5342 -234.2896 205.2568 -231.9038 c204.814 -228.0972 201.7891 -226.0361 198.7632 -225.7412 C195.6436 -224.9023 192.1348 -226.0923 191.3125 -230.1758 c191.1006 -231.2266 187.9624 -232.3286 187.1001 -233.1909 c184.8755 -235.416 182.5996 -238.4902 179.8838 -240.1162 c174.1274 -243.5635 168.7295 -245.5259 162.3149 -247.3076 c157.021 -248.7778 151.9424 -243.7544 148.1128 -240.875 c143.6733 -237.5371 138.7788 -235.0991 135.1021 -230.8374 c133.0361 -228.4429 130.4502 -228.2617 128.3193 -229.3022 C125.2827 -228.6611 121.8384 -229.8799 120.708 -233.7056 c120.3384 -234.9556 119.0703 -236.7314 118.502 -237.9336 c117.5557 -239.9346 116.7974 -242.0928 115.3188 -243.7817 c111.3057 -248.3662 107.7197 -253.0654 103.082 -257.0801 c93.9619 -264.9746 82.6113 -269.2349 71.1172 -272.1172 c64.7988 -273.7021 58.7383 -276.2031 52.3994 -277.5967 c46.4844 -278.897 40.1543 -278.52 34.1426 -278.4131 c27.8267 -278.3008 21.4185 -278.6392 15.1475 -277.7319 c13.0508 -277.4287 11.0146 -276.4849 9 -275.6675 C9 -289.5889 L10.499 -289.9805 11.9907 -290.3105 13.4565 -290.5229 c20.3198 -291.5156 27.2305 -291.2969 34.1426 -291.4131 c40.897 -291.5264 47.5015 -291.416 54.1963 -290.4331 c61.6812 -289.335 68.9795 -286.0557 76.3384 -284.2104 c89.7178 -280.855 101.5337 -274.9541 112.2744 -266.2725 c117.3828 -262.1431 121.1626 -256.7993 125.4512 -251.9004 c127.3638 -249.7158 128.5508 -247.1147 129.7271 -244.4951 c129.8188 -244.2905 129.9189 -244.0884 130.0176 -243.8862 C134.0366 -247.0518 138.6045 -249.4419 142.3838 -252.9741 c147.9385 -258.1655 156.4785 -261.3916 164.0059 -260.1372 c172.7769 -258.6753 180.3511 -254.9907 187.917 -250.4604 c191.1343 -248.5342 193.1982 -245.0908 196.1968 -242.8208 C197.2881 -244.8008 198.48 -246.728 199.6162 -248.625 c203.5454 -255.1831 206.3398 -261.5005 211.7397 -267.0708 c221.4463 -277.0835 234.6216 -283.1943 247.6294 -287.5947 c254.7007 -289.9873 261.4409 -293.231 268.8105 -294.6553 c272.0156 -295.2749 275.1792 -295.0874 278.3848 -295.9263 c282.082 -296.894 285.3672 -298.6758 289.1558 -299.4824 c295.9165 -300.9214 302.9707 -301.2456 309.8159 -302.1807 c316.9888 -303.1606 324.2251 -304.0347 331.4639 -303.3291 c334.6592 -303.0176 337.7109 -302.1865 340.9277 -302.0098 c344.1499 -301.833 347.2192 -301.9482 350.4102 -301.3296 c353.4766 -300.7344 356.416 -299.229 359.3462 -298.1855 c362.9556 -296.9004 367.3638 -296.6885 371.1245 -295.6841 c374.2803 -294.8413 377.415 -293.9395 380.5933 -293.1812 c383.6973 -292.4404 386.7939 -292.583 389.9414 -292.1548 c393.0229 -291.7358 396.251 -291.125 399.1875 -290.1064 c402.8975 -288.8188 406.3203 -287.8252 410.1001 -286.7881 c416.438 -285.0493 422.9253 -282.2539 429.1099 -279.9775 c436.1401 -277.3906 442.0815 -272.5981 447.8799 -267.9941 c453.0176 -263.915 458.4111 -260.5596 463.2842 -256.0376 c468.0645 -251.6021 473.8345 -248.9746 477.0234 -243.0708 c479.583 -238.3315 483.6606 -234.8584 485.6782 -229.8066 c487.7158 -224.7046 489.5054 -219.5713 490.6563 -214.1914 c491.6611 -209.4956 493.5986 -203.9507 494.5757 -198.4302 C494.8525 -198.6377 495.1362 -198.8403 495.4341 -199.0317 c500.9214 -202.5562 504.7178 -206.7769 511.2207 -208.7524 c522.5293 -212.1885 536.7334 -213.6387 547.8984 -209.2046 c557.146 -205.5317 568.7397 -200.0249 571.4346 -189.5537 c572.9604 -183.625 576.1538 -175.0957 575.2124 -168 C575.769 -168 L577.1797 -168.3921 578.8276 -169.7637 579.9785 -170.437 c582.2788 -171.7827 584.9321 -172.6309 587.4551 -173.4473 c592.1016 -174.9512 596.9907 -174.7222 601.793 -174.9595 c613.5186 -175.5381 625.2344 -178.4858 637.0225 -178.1392 c648.3535 -177.8057 660.5532 -175.0283 671.48 -172.1436 c683.0654 -169.0854 693.3911 -164.4746 703.5972 -158.2734 c713.4492 -152.2871 723.7544 -146.3516 731.8164 -137.9927 c735.8848 -133.7744 738.3726 -128.7842 741.7798 -124.1313 c744.9888 -119.7485 746.6089 -115.2559 748.0938 -110.0732 c751.02 -99.8623 750.9824 -88.5532 748.3696 -78.1914 c748.1875 -77.4683 748.04 -76.6885 747.9058 -75.8774 C761.7612 -75.4585 775.1948 -73.8267 788.2158 -68.0132 c795.9492 -64.5605 803.561 -60.7119 811.2383 -57.1191 c818.8853 -53.5396 825.958 -49.207 831.8672 -43.1211 c837.1309 -37.6987 841.7866 -30.7744 844.6338 -23.7896 c847.5698 -16.5859 848.5967 -8.67578 849.6675 -1 C836.6211 -1 Lf*u1 D1547.6401 -156.9971 m1540.9702 -150.4707 1530.4316 -147.9072 1521.4214 -147.7383 c1519.9609 -147.7109 1518.501 -147.7007 1517.042 -147.7007 C1520.8203 -145.4604 1524.4326 -142.9844 1527.6357 -139.8594 c1530.0796 -137.4751 1533.5923 -134.6064 1535.2715 -131.6309 c1537.5356 -127.6172 1538.2437 -123.4766 1538.4751 -118.9175 c1538.9121 -110.3027 1533.9902 -103.8921 1527.4355 -98.8398 c1515.3408 -89.5176 1497.9165 -92.4966 1485.0435 -98.5146 c1480.5205 -100.6289 1476.9199 -103.2764 1473.7031 -106.5513 C1473.3555 -105.8398 1472.9907 -105.1309 1472.5879 -104.4287 c1464.1221 -89.6689 1445.0742 -84.9521 1429.2852 -87.0894 c1424.6812 -87.7129 1420.9395 -90.9922 1418.3823 -94.6206 c1415.4258 -98.8164 1411.5859 -102.1069 1409.7036 -106.9985 c1406.2607 -115.9458 1407.7725 -125.208 1413.6094 -132.7642 c1416.4961 -136.5005 1420.0591 -139.6387 1423.0898 -143.2607 c1426.2163 -146.998 1428.5996 -151.144 1432.1123 -154.6021 c1432.1416 -154.6309 1432.1748 -154.6553 1432.2046 -154.6836 C1431.5522 -154.6895 1430.9004 -154.6836 1430.2471 -154.7046 c1419.2744 -155.0581 1410.439 -159.1147 1401.2896 -164.8423 c1393.5801 -169.668 1383.7764 -175.627 1378.7344 -183.4224 c1373.9702 -190.7881 1375.9082 -201.0571 1381.6646 -207.2988 c1387.4204 -213.54 1399.3252 -216.3765 1407.4238 -217.0752 c1412.9541 -217.5522 1417.3008 -216.8252 1422.3325 -214.5176 c1427.4058 -212.1904 1432.0146 -209.2344 1436.4028 -205.793 c1437.854 -204.6548 1439.3486 -203.6006 1440.8408 -202.5454 C1440.7637 -204.9429 1440.7808 -207.3101 1440.8496 -209.5938 c1441.1191 -218.4976 1445.5596 -226.084 1450.874 -232.9619 c1456.4795 -240.2163 1464.8174 -243.582 1473.7266 -241.2686 c1481.7202 -239.1934 1487.9053 -231.1431 1490.7148 -223.7603 c1493.9727 -215.1982 1493.2275 -206.2275 1491.2656 -197.4658 c1491.1924 -197.1387 1491.0957 -196.8281 1491.0166 -196.5049 C1495.1738 -197.1025 1499.4082 -197.2891 1503.5645 -197.1377 c1512.5957 -196.8091 1521.1787 -194.3682 1529.3159 -190.5444 c1533.1323 -188.751 1536.5957 -186.3315 1540.3154 -184.3667 c1543.5444 -182.6606 1546.6563 -180.4927 1549.1045 -177.7715 c1554.8965 -171.335 1553.5645 -162.793 1547.6401 -156.9971 cf0 D1475.7651 -146.5522 m1476.4531 -141.4932 1476.272 -136.375 1476.9448 -131.292 c1477.3203 -128.4556 1477.5054 -125.6538 1477.4565 -122.8931 C1477.9512 -121.9209 1478.542 -120.9521 1479.2485 -119.978 c1482.4805 -115.5205 1485.6519 -112.9707 1490.4258 -110.3384 c1498.769 -105.7388 1511.7285 -103.3945 1519.9116 -109.3232 c1524.6074 -112.7251 1526.1499 -116.5322 1525.1694 -122.2163 c1524.7188 -124.8271 1522.3462 -126.5747 1520.6172 -128.417 c1518.4639 -130.7114 1516.2515 -132.9478 1513.6807 -134.7749 c1511.4434 -136.3657 1508.666 -137.2856 1506.2485 -138.6025 c1503.5396 -140.0781 1500.9404 -141.7505 1498.2437 -143.2495 c1493.2793 -146.0088 1488.6353 -148.8457 1483.3276 -150.5381 C1480.2534 -151.0723 1477.1499 -151.7378 1474.1826 -152.6748 C1474.8848 -150.6729 1475.4805 -148.6455 1475.7651 -146.5522 cf1446.0566 -179.6226 m1442.5264 -184.3867 1438.2949 -188.6216 1433.5884 -192.0586 c1427.5259 -196.4863 1421.2734 -201.1353 1414.2183 -203.8564 c1407.2148 -206.5581 1397.6982 -201.4766 1391.6304 -198.6055 c1389.5718 -197.6318 1389.2183 -194.998 1389.0874 -192.9912 c1388.8818 -189.8398 1392.1797 -187.8789 1394.2217 -185.8955 c1399.7671 -180.5107 1407.1138 -176.3901 1413.7334 -172.4995 c1424.833 -165.9756 1437.502 -167.5449 1449.8965 -168.5044 C1448.5322 -172.1665 1447.5244 -176.0488 1446.0566 -179.6226 Cf1441.3047 -145.4097 m1435.7368 -140.5747 1432.1367 -133.5122 1426.9272 -128.2197 c1422.1948 -123.4121 1419.5737 -118.7422 1421.6479 -111.9907 c1422.7427 -108.4272 1426.3628 -105.4106 1428.5918 -102.5059 c1430.9053 -99.4907 1433.0947 -99.5586 1436.6953 -99.5474 c1447.1021 -99.5142 1458.77 -103.6299 1462.9189 -114.021 c1463.7603 -116.1279 1464.2168 -118.2573 1464.4219 -120.4019 C1462.5503 -125.4199 1461.9775 -130.7192 1461.9678 -136.5869 c1461.9648 -138.1978 1462.4458 -139.4961 1463.2197 -140.4878 C1463.1772 -142.3843 1463.0938 -144.2739 1462.6958 -146.1255 c1462.3467 -147.75 1461.7642 -149.3784 1461.1196 -151 C1461 -151 L1459.6055 -151 1458.46 -151.4009 1457.5518 -152.0527 C1451.8276 -151.1592 1445.2095 -148.8008 1441.3047 -145.4097 cf1479.5474 -215.9331 m1478.6143 -220.7822 1475.1533 -226.9639 1470.2705 -228.7329 c1464.8965 -230.6807 1460.9194 -225.1641 1458.3496 -221.2378 c1454.792 -215.8022 1453.7949 -211.2295 1453.7861 -204.8384 c1453.7769 -198.3013 1455.0259 -191.7642 1457.5894 -185.7461 C1458.9365 -183.9033 1460.1846 -181.9609 1461.3428 -179.9531 C1465.0889 -185.3037 1470.022 -189.2012 1475.5967 -191.9243 C1476.6992 -194.269 1477.6401 -196.707 1478.3672 -199.437 c1479.8018 -204.8232 1480.6104 -210.4063 1479.5474 -215.9331 cf1536.7505 -171.3765 m1526.2852 -178.501 1514.6938 -183.7324 1501.915 -184.1978 c1496.4917 -184.395 1490.5107 -183.8228 1485.1045 -181.9834 C1483.7676 -179.5757 1482.3198 -177.1997 1480.7915 -174.7935 c1478.8584 -171.7495 1476.666 -168.9536 1474.085 -166.7378 C1476.604 -165.4902 1479.3589 -164.7432 1482.1533 -164.1563 C1482.4746 -164.1367 1482.8018 -164.1025 1483.1401 -164.0361 c1483.8389 -163.8989 1484.5254 -163.7358 1485.2065 -163.5615 C1486.4912 -163.3281 1487.77 -163.1045 1489.0239 -162.8594 c1496.7236 -161.355 1504.5029 -160.9185 1512.333 -160.7813 c1519.8599 -160.6494 1527.2627 -160.2266 1534.187 -163.6523 c1536.3662 -164.7305 1538.6577 -165.9092 1539.9756 -168.0181 c1540.415 -168.7207 1537.7285 -170.7104 1536.7505 -171.3765 cf*U2797.0518 -333.4243 m2796.1797 -327.02 2793.7285 -320.4419 2791.5117 -314.4004 c2789.3887 -308.6182 2786.4727 -303.3608 2783.5879 -297.9434 c2780.4131 -291.9824 2778.1064 -285.5215 2775.0928 -279.46 c2769.0186 -267.2397 2763.9346 -255.418 2753.3926 -246.3955 c2748.7773 -242.4453 2743.3555 -239.5552 2738.1289 -236.5205 c2735.4756 -234.979 2733.3145 -232.54 2730.667 -230.9111 c2728.2344 -229.4146 2725.3105 -228.9463 2722.9395 -227.4028 c2717.8789 -224.1074 2712.3066 -221.6206 2706.6631 -219.458 c2700.168 -216.9688 2693.4189 -217.1665 2686.5918 -217.1665 c2679.791 -217.1665 2673.0332 -217.1611 2666.2588 -217.8472 c2658.6025 -218.6226 2651.5303 -220.8608 2644.0771 -222.4917 c2637.8477 -223.855 2631.5576 -225.9966 2625.6895 -228.4307 c2623.5352 -229.3247 2621.4736 -230.231 2619.5771 -231.3301 C2614.6123 -212.2695 2598.4961 -197.7544 2582.5596 -186.6733 c2577.5645 -183.2007 2571.7051 -179.0278 2565.748 -177.3896 c2562.918 -176.6108 2561.6191 -177.0166 2559.1123 -175.3418 c2556.5977 -173.6621 2554.6934 -171.1724 2551.627 -170.3291 c2549.0996 -169.6338 2545.9316 -170.0967 2543.335 -170.0967 c2540.8281 -170.0967 2537.0752 -166.9019 2534.6152 -166.022 c2527.9951 -163.6538 2520.873 -164.2129 2513.9551 -164.2129 c2506.7051 -164.2129 2500.0801 -164.146 2493.0234 -165.8574 c2490.1484 -166.5547 2486.8848 -167.7432 2483.9141 -167.7432 c2481.3105 -167.7432 2477.7021 -167.1104 2475.2129 -167.9756 c2469.0996 -170.0991 2462.5342 -171.3472 2456.0938 -172.1641 c2449.1777 -173.0415 2443.5264 -173.0225 2437.1182 -176.2407 c2431.4199 -179.1025 2425.7383 -182.4282 2420.2109 -185.6284 c2415.0469 -188.6187 2410.084 -192.4395 2405.7979 -196.5879 c2402.5186 -199.7622 2400.1533 -203.6709 2397.4063 -207.2769 C2397.2256 -207.1133 2397.0449 -206.9512 2396.8672 -206.7754 c2393.5586 -203.4961 2389.5664 -199.9165 2385.3789 -197.8311 c2380.3984 -195.3506 2374.6387 -195.6284 2369.6074 -193.3418 c2364.5703 -191.0537 2360.0313 -189.0298 2354.499 -188.2183 c2331.8369 -184.8926 2307.2383 -192.1548 2286.5684 -201.0942 c2281.8887 -203.1182 2277.4063 -205.4165 2273.1338 -208.2041 c2268.2012 -211.4219 2264.0859 -215.5903 2259.0996 -218.7402 c2253.707 -222.146 2249.1563 -225.584 2244.791 -230.2495 c2240.9414 -234.3628 2237.5127 -239.1191 2234.374 -243.7881 c2228.2549 -252.8916 2224.7314 -263.9556 2221.3496 -274.3037 c2220.4951 -276.9185 2219.5859 -279.5454 2218.7061 -282.189 C2216.0322 -276.0771 2212.166 -270.082 2207.6514 -265.1851 c2199.3271 -256.1553 2185.1348 -255.123 2173.8906 -252.7012 c2168.3545 -251.5083 2160.8516 -251.3354 2155.2988 -252.4355 c2147.7002 -253.9414 2140.7295 -258.1123 2133.6895 -261.189 c2127.5361 -263.8784 2119.8447 -266.8062 2113.6758 -271.1611 C2112.4033 -269.043 2111.0762 -266.9639 2109.9277 -264.8813 c2106.2617 -258.229 2098.999 -252.2051 2092.8926 -247.8501 c2085.9932 -242.9287 2077.3047 -241.3911 2069.1602 -239.7573 c2059.3691 -237.7925 2049.0469 -238.3105 2039.1201 -238.3652 c2030.1025 -238.415 2021.1641 -238.895 2012.2305 -240.1421 c2002.916 -241.4424 1994.9697 -244.8252 1986.5469 -248.7949 c1980.2842 -251.7471 1970.0957 -255.0947 1963.877 -260.8247 C1962.1465 -259.6753 1960.1855 -258.9912 1957.8311 -258.481 c1956.3262 -258.1553 1955.0107 -257.8765 1953.627 -257.1992 c1951.0029 -255.9146 1948.208 -255.6538 1945.5967 -254.5586 c1943.9121 -253.8525 1941.7852 -253.8237 1939.9951 -253.689 c1937.5605 -253.5063 1935.4648 -252.8579 1933.0986 -252.2598 c1927.6924 -250.8926 1923.209 -251.3701 1918.0225 -253.2202 c1908.1362 -256.7476 1898.2871 -260.1011 1889.0537 -265.1899 c1880.0557 -270.1494 1871.4053 -276.2227 1863.4429 -282.7021 c1855.0923 -289.4971 1849.0835 -298.2974 1842.9595 -307.0762 c1836.7725 -315.9443 1831.562 -325.8999 1827.5801 -335.936 c1825.6807 -340.7246 1822.1875 -344.7856 1819.5552 -349.1875 c1816.9502 -353.5444 1814.8892 -358.2124 1813.1533 -362.9746 c1811.3491 -367.9263 1811.4502 -372.6514 1811.4609 -377.8086 C1799.8413 -378.9453 1788.2124 -381.4771 1777.4014 -385.6738 c1770.3403 -388.4146 1763.478 -393.7148 1757.5356 -398.3281 c1751.0337 -403.376 1745.6328 -409.209 1740.6387 -415.7275 c1736.1719 -421.5571 1732.5518 -428.001 1729.3906 -434.6133 c1725.8091 -442.105 1723.6104 -450.0449 1720.4365 -457.6689 c1713.8774 -473.4258 1710.2715 -490.2417 1710.2617 -507.2627 c1710.2568 -515.6465 1723.2568 -515.6455 1723.2617 -507.2627 c1723.2661 -499.2344 1723.623 -491.6636 1725.8247 -483.8979 c1727.8428 -476.7788 1729.7583 -469.6455 1732.3496 -462.707 c1737.3096 -449.4248 1741.8979 -436.5815 1750.0327 -424.8057 c1753.9531 -419.1304 1758.7646 -414.0903 1764.0308 -409.6563 c1769.2764 -405.2388 1776.1509 -400.0361 1782.5884 -397.5371 c1791.8379 -393.9468 1801.9336 -391.8027 1811.937 -390.7988 C1812.3784 -391.9063 1812.917 -392.9829 1813.5264 -394.0454 c1817.5972 -401.1411 1828.394 -395.0698 1825.0142 -387.9995 C1827.3159 -385.2397 1827.0977 -380.6211 1824.3569 -378.4287 C1824.4185 -377.8286 1824.4619 -377.2319 1824.4619 -376.6436 c1824.4619 -371.7349 1824.9453 -367.8423 1826.894 -363.2842 c1830.2783 -355.3706 1836.2012 -348.9355 1839.4492 -341.0166 c1842.9297 -332.5317 1847.2983 -324.3062 1852.2271 -316.562 c1857.2539 -308.6631 1862.9341 -300.4131 1869.938 -294.1865 c1876.5117 -288.3423 1883.9443 -283.9189 1891.2266 -279.0732 c1898.1826 -274.4443 1906.3633 -270.5195 1914.418 -268.2749 c1918.2905 -267.1958 1922.6787 -264.2188 1926.7578 -264.3447 c1930.8262 -264.4707 1934.3906 -266.6377 1938.4863 -266.6509 c1942.6758 -266.6646 1946.5586 -268.415 1950.3838 -269.9434 c1951.6807 -270.4619 1953.0098 -270.7344 1954.375 -271.0166 c1956.3154 -271.4185 1957.5703 -272.666 1955.9131 -270.4868 c1956.6699 -271.4814 1957.5713 -272.1738 1958.5371 -272.6162 C1958.5449 -272.7749 1958.543 -272.9292 1958.5557 -273.0898 c1959.2383 -281.3833 1972.2441 -281.4502 1971.5557 -273.0898 c1971.3096 -270.0996 1976.6846 -267.71 1978.8545 -266.4683 c1983.8975 -263.582 1989.417 -261.7598 1994.665 -259.2861 c2008.9355 -252.5601 2023.498 -251.5068 2039.1201 -251.3652 c2046.6299 -251.2969 2054.1641 -251.2197 2061.6563 -251.8008 c2068.7969 -252.355 2077.7832 -253.9443 2084.0264 -257.5864 c2089.459 -260.7554 2094.1201 -265.875 2098.1387 -270.6255 c2099.8633 -272.6646 2100.7129 -275.5 2102.1738 -277.7402 c2102.458 -278.1758 2102.6777 -278.5073 2102.8438 -278.7554 C2102.9902 -279.0386 2103.2217 -279.4697 2103.5723 -280.1064 c2103.7832 -280.4897 2104.1621 -280.9951 2104.5391 -281.5283 C2104.1406 -282.416 2103.7949 -283.3379 2103.5273 -284.3062 c2101.46 -291.7754 2111.9756 -295.2656 2115.3672 -289.4204 C2117.3896 -288.6069 2118.8594 -286.7676 2118.6582 -283.8892 C2120.5693 -282.1406 2123.0811 -280.7803 2124.9785 -279.46 c2129.376 -276.3994 2135.3389 -274.6035 2140.252 -272.4141 c2145.9063 -269.8936 2151.4365 -266.9106 2157.416 -265.2363 c2161.8242 -264.0024 2168.5879 -264.8735 2173.0391 -265.7832 c2181.1602 -267.4429 2193.8379 -268.0254 2199.2852 -275.3018 c2200.8984 -277.457 2202.4463 -279.6494 2203.9082 -281.9102 c2204.4922 -282.8364 2205.0469 -283.7793 2205.5723 -284.7397 c2205.6357 -284.8516 2207.082 -289.02 2206.9414 -287.2163 c2207.3574 -292.5283 2210.918 -296.8999 2211.7881 -301.8833 c2212.0898 -303.6167 2212.8857 -304.8247 2213.9355 -305.585 C2214.5508 -313.2397 2226.793 -312.9888 2226.9102 -304.8618 c2227.0293 -296.6646 2230.4473 -289.0615 2232.7832 -281.29 c2235.6338 -271.8062 2238.8584 -261.8813 2243.7861 -253.2656 c2248.3467 -245.293 2254.7891 -236.9658 2262.5234 -231.9375 c2270.8428 -226.5278 2278.1758 -219.7837 2286.9805 -215.1729 c2295.2607 -210.8369 2304.4854 -208.1274 2313.4131 -205.4746 c2323.3379 -202.5254 2333.4541 -200.4937 2343.833 -200.4009 c2348.5635 -200.3584 2353.5508 -200.7036 2358.0332 -202.2803 c2362.4961 -203.8506 2366.4033 -206.3281 2371.0703 -207.4287 c2374.8623 -208.3232 2378.873 -208.4131 2381.9961 -211.0034 c2384.6934 -213.2412 2387.1445 -215.7681 2389.877 -217.9561 C2388.9219 -220.0645 2388.2754 -222.3252 2388.0684 -224.8433 c2387.3799 -233.2031 2400.3848 -233.1367 2401.0684 -224.8433 c2401.3711 -221.1606 2405.832 -217.6372 2408.0068 -214.9331 c2411.3867 -210.731 2413.9102 -206.5278 2418.085 -202.9731 c2421.9443 -199.688 2426.2773 -197.0381 2430.7305 -194.6504 c2435.8262 -191.918 2440.959 -188.2725 2446.374 -186.2642 c2451.2588 -184.4521 2457.4336 -185.1162 2462.6084 -184.2012 c2465.3867 -183.71 2468.1504 -183.2324 2470.9326 -182.772 c2473.8652 -182.2866 2476.6387 -180.7432 2479.5996 -180.7432 c2484.9688 -180.7432 2489.7617 -179.9619 2494.9961 -178.7456 c2501.4219 -177.2524 2507.3535 -177.2129 2513.9551 -177.2129 c2519.583 -177.2129 2526.0498 -176.2905 2531.3203 -178.6792 c2534.1465 -179.959 2536.9336 -182.0391 2539.9336 -182.8643 c2542.4424 -183.5547 2545.5127 -183.1611 2548.168 -183.1069 C2548.0439 -183.1943 2548.3516 -183.437 2549.1094 -183.8408 C2550.2344 -184.8228 2551.3047 -185.7251 2552.5508 -186.5669 c2554.3477 -187.7803 2556.1426 -188.6675 2558.1758 -189.4287 c2560.2637 -190.21 2561.9814 -189.8809 2563.7285 -190.7031 c2566.6396 -192.0732 2569.4531 -193.4805 2572.1553 -195.2358 c2588.3633 -205.7656 2607.7119 -221.439 2608.1201 -242.4941 c2608.2344 -248.3999 2614.7344 -250.1416 2618.498 -247.7144 C2620.4746 -247.7168 2622.4463 -246.8066 2623.7627 -244.5986 c2625.5459 -241.6069 2631.0576 -239.8193 2634.2686 -238.9624 c2639.8906 -237.4619 2645.6328 -235.8154 2651.166 -234.0425 c2663.2559 -230.1694 2675.7109 -230.1665 2688.2598 -230.1665 c2694.1875 -230.1665 2699.1953 -230.4561 2704.7998 -232.604 c2709.2656 -234.3154 2713.4238 -236.7041 2717.4111 -239.3003 c2719.4629 -240.6362 2721.9463 -240.9985 2724.1055 -242.1362 c2726.457 -243.375 2727.9531 -245.6055 2730.1914 -246.9307 c2735.3438 -249.9805 2740.8301 -252.7031 2745.4004 -256.6152 c2754.0918 -264.0542 2758.1416 -274.5669 2763.1621 -284.6079 c2765.6807 -289.645 2768.0225 -294.7222 2770.2227 -299.9058 c2772.4043 -305.0479 2775.4219 -309.751 2777.791 -314.8027 c2780.1191 -319.7695 2781.6426 -325.3301 2783.0068 -330.626 c2784.3809 -335.9609 2784.6123 -341.2422 2785.7363 -346.5996 c2787.9971 -357.3799 2786.6836 -370.251 2779.4766 -379.1079 c2774.2344 -385.5493 2783.374 -394.8062 2788.668 -388.3003 c2796.791 -378.3188 2799.5938 -366.2803 2799.9697 -353.6128 c2800.0742 -350.1011 2798.8682 -346.5977 2798.2715 -343.1436 c2797.7119 -339.9053 2797.4951 -336.6841 2797.0518 -333.4243 cf3818.9766 -366.4741 m3816.0352 -369.4517 3814.7324 -374.5 3812.4688 -378.0322 c3810.0684 -381.7783 3807.2686 -385.272 3804.6895 -388.8945 c3804.043 -389.812 3803.4141 -390.7412 3802.8018 -391.6821 C3801.5947 -393.0376 3801.4746 -393.4258 3802.4414 -392.8472 C3800.5557 -394.1152 3799.373 -395.9004 3797.9688 -397.6377 c3796.9121 -398.9458 3794.6406 -399.2065 3793.1699 -399.7949 c3790.1543 -401.001 3787.3398 -402.6602 3784.3438 -403.9204 c3779.2012 -406.083 3774.084 -406.0356 3768.5947 -405.915 c3758.4639 -405.6919 3748.1035 -405.8086 3738.0938 -404.1094 c3733.293 -403.2949 3728.7393 -401.8335 3724.1084 -400.3828 c3722.2051 -399.7866 3719.7236 -399.5425 3718.0625 -398.3882 c3716.0273 -396.9731 3714.2676 -395.0566 3712.5107 -393.3232 c3705.7041 -386.6084 3696.2715 -382.8638 3688.9619 -376.6719 c3685.4824 -373.7251 3681.8477 -370.6968 3678.5938 -367.5063 c3677.3154 -366.2539 3676.6709 -364.5518 3675.3945 -363.2651 c3674.9121 -362.7788 3674.416 -362.3159 3673.9883 -361.8184 C3674.123 -358.4658 3672.1309 -355 3668 -355 C3667.0244 -355 3666.6318 -355 v3665.0469 -355 3663.7314 -355.4971 3662.709 -356.3081 C3661.3691 -352.8389 3657.6855 -350.5195 3653.9375 -353.3799 c3648.9678 -357.1724 3645.9189 -362.748 3639.9482 -365.2109 c3633.0742 -368.0459 3626.3789 -371.3594 3619.2031 -373.3716 c3611.084 -375.6479 3603.2441 -376.4404 3594.8506 -376.1035 c3590.7998 -375.9409 3587.0244 -375.8042 3583.0459 -374.9355 c3579.6143 -374.1865 3575.2324 -373.8042 3572.0938 -372.29 c3566.0508 -369.3745 3560.5996 -364.9116 3556.5742 -359.5811 c3551.752 -353.1929 3546.5098 -347.4731 3542.3086 -340.5918 c3537.8027 -333.2119 3534.5596 -325.3745 3531.6143 -317.2549 c3530.4902 -314.1577 3529.6133 -311.0117 3528.3486 -307.9756 c3527.9121 -306.9292 3527.5869 -305.8462 3527.2676 -304.7607 c3526.958 -303.7061 3527.3701 -301.2827 3526.4883 -302.3979 c3527.8701 -300.6504 3528.2129 -298.7051 3527.8857 -296.9189 C3527.9902 -296.6172 3528.0859 -296.3096 3528.1602 -295.9917 c3530.0762 -287.8374 3517.542 -284.3804 3515.625 -292.5396 c3515.9229 -291.272 3514.3906 -293.0288 3513.6475 -293.4561 c3511.9932 -294.4063 3510.3418 -295.3242 3508.7012 -296.3066 c3504.9922 -298.5293 3500.875 -300.0938 3497.2813 -302.4854 c3490.582 -306.9434 3483.7598 -310.333 3476.3301 -313.3037 c3469.4727 -316.0449 3462.5469 -318.6587 3455.5811 -321.0996 c3452.4844 -322.1846 3449.5283 -323.4458 3446.2773 -323.8467 c3442.8711 -324.2676 3439.415 -324.2476 3435.9893 -324.2505 c3427.9482 -324.2573 3419.9072 -324.2505 3411.8652 -324.2505 c3404.626 -324.2505 3398.2383 -320.3257 3393.084 -315.3589 c3387.7568 -310.2251 3384.3184 -303.7202 3380.6045 -297.4165 c3377.7969 -292.6499 3373.6748 -287.2729 3372.3232 -281.6372 C3374.1094 -277.7856 3372.3379 -272 3367 -272 C3365.7773 -272 3365.3848 -272 v3364.541 -272 3363.7051 -272.1973 3362.9277 -272.5459 C3360.8926 -271.1851 3358.1943 -270.833 3355.8105 -272.4746 C3355.7305 -272.4805 3355.6533 -272.4854 3355.5664 -272.4922 c3354.5322 -272.5718 3353.502 -272.6924 3352.4775 -272.853 C3350.4492 -273.374 3348.8672 -274.0781 3346.7412 -274.1694 c3341.7373 -274.3838 3336.6572 -273.6504 3331.6387 -273.6504 c3322.4014 -273.6504 3313.4414 -272.8042 3304.2461 -272.3633 c3286.0254 -271.4897 3265.3477 -256.4854 3267.6533 -236.6108 c3268.7695 -226.9917 3270.4482 -217.5127 3272.8926 -208.1353 c3275.3564 -198.6875 3279.3535 -190.8325 3285.0947 -182.9663 c3287.6338 -179.4883 3290.2813 -176.2368 3293.1709 -173.0542 c3296.4854 -169.4048 3300.8486 -166.3047 3303.6895 -162.3291 c3304.8242 -160.7402 3305.8066 -159.0679 3306.8457 -157.416 c3307.8809 -155.7715 3310.7451 -154.4302 3312.207 -153.0542 c3316.0986 -149.3911 3319.6992 -145.4746 3323.9492 -142.2002 c3325.6846 -140.8623 3326.916 -139.0532 3327.1367 -137.0732 C3329.4121 -133.4116 3327.6309 -126.98 3321.8447 -126.5571 c3318.4404 -126.3081 3315.2734 -121.3613 3313.5566 -118.8545 c3310.3594 -114.1855 3308.7305 -108.6406 3308.375 -103.0171 c3307.9053 -95.5864 3307.1738 -88.4932 3307.5537 -80.9966 c3307.9316 -73.5278 3308.1025 -66.0439 3308.5137 -58.5815 c3309.2227 -45.7109 3311.2383 -32.3345 3318.248 -21.335 c3321.833 -15.7109 3326.9863 -11.269 3330.5967 -5.67822 c3331.5957 -4.13184 3332.5273 -2.5459 3333.5195 -1 C3317.8721 -1 L3317.4189 -1.61279 3316.9512 -2.21924 3316.4492 -2.8125 c3313.5293 -6.26123 3310.6445 -9.71582 3307.9844 -13.3711 c3298.3311 -26.6348 3296.2969 -44.3462 3295.4189 -60.2954 c3294.4707 -77.5298 3292.7041 -95.8882 3296.8438 -112.8408 c3298.8428 -121.0273 3304.1006 -130.5693 3311.5947 -135.7598 C3309.0977 -137.9453 3306.6768 -140.2124 3304.3047 -142.5815 c3302.5654 -144.3179 3299.9805 -145.5146 3298.4219 -147.2886 c3296.7559 -149.1841 3295.3828 -151.1943 3294.084 -153.3525 c3291.4707 -157.6904 3286.3545 -161.2456 3282.8975 -165.0527 c3279.252 -169.0679 3276.041 -173.4297 3272.8418 -177.814 c3266.1436 -186.9917 3262.2539 -197.0273 3259.5117 -207.9917 c3258.1025 -213.6255 3257.1914 -219.2515 3256.2617 -224.9722 c3255.2725 -231.0635 3253.9551 -237.4512 3254.4277 -243.6714 c3255.2852 -254.9663 3262.75 -265.2314 3270.8555 -272.5117 c3278.6904 -279.5493 3290.5313 -283.8442 3300.8662 -285.0322 c3311.6221 -286.269 3322.3916 -286.6504 3333.2188 -286.6504 c3338.749 -286.6504 3344.3027 -287.5425 3349.8174 -286.9365 c3352.3867 -286.6538 3354.5811 -285.5034 3357.1475 -285.4736 c3358.168 -285.4619 3359.0703 -285.3125 3359.9053 -285.0488 C3361.4414 -290.7954 3364.4688 -296.1533 3367.7021 -301.124 c3372.7031 -308.8105 3376.9355 -316.4014 3382.8926 -323.4326 c3388.4238 -329.9604 3396.9209 -334.0859 3404.8418 -336.8638 c3408.7422 -338.231 3414.8105 -337 3418.9258 -337 C3434.0703 -337 L3442.3594 -337 3449.8555 -336.5918 3457.7227 -333.9512 c3466.166 -331.1172 3474.332 -327.5122 3482.7705 -324.6807 c3492.1992 -321.5161 3499.9102 -315.457 3508.6797 -311.0322 c3510.7139 -310.0059 3512.6885 -308.8887 3514.6582 -307.7646 C3515.0352 -309.2837 3515.5518 -310.8047 3516.1797 -312.313 c3519.96 -321.3896 3522.9766 -330.8257 3526.8701 -339.915 c3530.2813 -347.8784 3536.3174 -355.7363 3541.9629 -362.2266 c3544.7998 -365.4888 3547.3545 -368.9692 3550.207 -372.2212 c3553.3701 -375.8267 3557.5127 -378.4336 3561.4648 -381.0747 c3568.6133 -385.8516 3577.7598 -387.5962 3586.209 -388.6411 c3590.8125 -389.2104 3595.5107 -389.1567 3600.1465 -389.2998 c3605.668 -389.4702 3610.6055 -388.1787 3615.9775 -387.3481 c3624.8613 -385.9746 3632.4004 -382.083 3640.6289 -378.8232 c3644.2988 -377.3696 3648.0166 -376.0732 3651.2422 -373.749 c3654.8555 -371.1465 3657.0605 -367.229 3660.498 -364.6055 c3660.5605 -364.5571 3660.6152 -364.5049 3660.6758 -364.4556 C3661.6299 -367.5684 3663.9971 -370.1875 3666.2031 -372.4961 c3667.7373 -374.1025 3668.832 -376.1602 3670.4707 -377.7661 c3672.2529 -379.5127 3674.3496 -380.9521 3676.2422 -382.5757 c3684.4336 -389.5996 3693.0615 -395.2373 3701.9775 -401.2954 c3705.8262 -403.9106 3708.8857 -407.7979 3712.7754 -410.5005 c3714.8174 -411.9204 3718.2793 -412.2041 3720.6523 -412.9199 c3723.0313 -413.6367 3725.3613 -414.4834 3727.7578 -415.1392 c3738.748 -418.1475 3749.9395 -418.2017 3761.2197 -418.6309 c3766.627 -418.8364 3772.0127 -419.1094 3777.4219 -418.7998 c3783.6338 -418.4443 3789.0947 -416.061 3794.6484 -413.4219 c3799.0088 -411.3491 3803.6523 -410.3389 3807.1611 -406.8301 c3810.5938 -403.3975 3813.1582 -399.4458 3815.9141 -395.4561 c3818.7568 -391.3413 3821.873 -387.4355 3824.5742 -383.2207 c3825.9863 -381.0161 3827.0703 -378.6606 3828.168 -376.2915 C3829.0918 -376.4556 3830.0098 -376.7153 3830.9014 -376.9424 c3832.8818 -377.4468 3834.9248 -378.0854 3837 -378.7109 C3837 -365.2397 L3834.7139 -364.5518 3832.4199 -363.8945 3830.0342 -363.5176 c3825.6006 -362.8164 3822.2578 -363.1519 3818.9766 -366.4741 cf3684.5313 -1464.2305 m3681.1016 -1466.0811 3675.0996 -1464.5811 3671.3379 -1464.5195 c3664.9238 -1464.4141 3658.0156 -1466.0146 3651.7422 -1467.2188 c3638.2881 -1469.7988 3625.71 -1473.9883 3613.5156 -1480.1729 c3602.375 -1485.8232 3590.7217 -1489.0898 3580.2705 -1496.2188 c3575.3438 -1499.5801 3571.4473 -1504.1035 3567.7275 -1508.7021 c3566.1582 -1510.6445 3564.5195 -1513.5781 3562.6328 -1515.9756 C3553.1484 -1504.9609 3542.4766 -1494.1973 3531.0566 -1485.4111 c3524.457 -1480.334 3518.459 -1474.5586 3511.3564 -1470.1572 c3505.082 -1466.2695 3498.5723 -1462.7217 3492.167 -1459.0381 C3491.2324 -1457.2813 3489.5107 -1456 3487 -1456 C3485.8047 -1456 3485.4121 -1456 v3478.9199 -1456 3476.5703 -1464.9688 3482.1309 -1468.2539 c3489.1846 -1472.4199 3496.4951 -1476.1826 3503.4619 -1480.4971 c3510.4746 -1484.8408 3516.4434 -1490.4072 3522.9678 -1495.4258 c3529.5244 -1500.4707 3535.2881 -1506.5352 3541.124 -1512.3711 c3546.7891 -1518.0361 3552.2178 -1523.5908 3557.3047 -1529.7373 c3559.2637 -1532.1055 3562.6992 -1531.9141 3565.1816 -1530.7578 c3569.5723 -1528.7129 3572.2793 -1524.1426 3574.96 -1520.3193 c3577.9707 -1516.0254 3581.7197 -1511.9346 3585.6133 -1508.4316 c3595.2188 -1499.792 3608.792 -1497.0371 3620.0771 -1491.3984 c3631.8535 -1485.5137 3644.0098 -1481.9004 3656.9473 -1479.418 c3662.9043 -1478.2754 3668.9883 -1477.3584 3675.0596 -1477.6494 c3680.5273 -1477.9121 3686.1367 -1478.1289 3691.0938 -1475.4551 c3698.4727 -1471.4736 3691.9092 -1460.25 3684.5313 -1464.2305 cf*u1 D1716.2725 -2013.1738 m1709.8374 -2008.6982 1700.9595 -2008.873 1693.4731 -2009.4385 c1689.9063 -2009.708 1686.3232 -2010.1816 1682.7559 -2010.7803 C1684.2041 -2009.2695 1685.6636 -2007.8271 1687.1821 -2006.5742 c1692.6318 -2002.0791 1694.793 -1994.3652 1695.0186 -1987.6104 c1695.2329 -1981.1807 1689.9941 -1977.1494 1684.5225 -1975.2529 c1678.8774 -1973.2979 1670.7656 -1973.2969 1664.9839 -1974.0498 c1657.4795 -1975.0273 1650.791 -1978.8291 1645.6045 -1984.2461 c1645.5449 -1984.3086 1645.4927 -1984.373 1645.4336 -1984.4355 C1645.3516 -1983.7021 1645.2529 -1982.9717 1645.1104 -1982.248 c1644.3013 -1978.1465 1641.4043 -1974.46 1638.6147 -1971.5078 c1627.3472 -1959.5811 1609.5483 -1955.0654 1594.5469 -1961.6934 c1587.8691 -1964.6445 1582.1738 -1968.6152 1580.6582 -1976.1631 c1579.9692 -1979.5957 1580.0957 -1983.3174 1581.2466 -1986.6309 c1581.5483 -1987.4609 1581.9141 -1988.2617 1582.3433 -1989.0322 C1583.5923 -1990.6133 1583.7046 -1990.7813 1582.6802 -1989.5381 C1583.4785 -1991.9629 1584.9697 -1994.1963 1586.6289 -1996.1133 c1592.3672 -2002.7422 1599.457 -2006.7549 1606.7085 -2011.4443 c1607.8848 -2012.2051 1609.1206 -2012.8154 1610.375 -2013.373 C1605.9746 -2013.1143 1601.5698 -2012.8828 1597.1372 -2012.8828 c1592.8242 -2012.8828 1588.1836 -2012.4072 1583.9287 -2013.2188 c1579.7759 -2014.0107 1575.665 -2016.1582 1571.9199 -2018.0869 c1557.6719 -2025.4219 1541.4639 -2044.4707 1553.8774 -2060.3418 c1563.8926 -2073.1465 1584.4565 -2073.0693 1597.5288 -2065.459 c1602.3818 -2062.6328 1607.4731 -2059.7705 1611.9995 -2056.2959 C1610.8691 -2063.7754 1610.8213 -2071.6367 1612.0986 -2078.8154 c1613.7192 -2087.9238 1620.0698 -2095.2129 1626.3418 -2101.6836 c1632.9512 -2108.502 1642.1387 -2113.9492 1651.5981 -2115.168 c1663.3989 -2116.6895 1669.2998 -2107.2617 1671.7744 -2097.0107 c1674.5063 -2085.6963 1669.7817 -2074.4365 1665.3423 -2064.2725 c1663.3125 -2059.624 1660.9111 -2055.1064 1658.1597 -2050.8184 C1666.9951 -2052.873 1676.1353 -2053.8301 1685.0322 -2054.1953 c1692.8833 -2054.5176 1700.6182 -2055.7168 1707.5498 -2051.168 c1710.8579 -2048.9971 1713.5283 -2045.8789 1716.5161 -2043.3105 c1719.9438 -2040.3643 1722.0723 -2036.9893 1723.1777 -2032.5986 c1724.9634 -2025.5059 1722.3315 -2017.3867 1716.2725 -2013.1738 cf0 D1652.0508 -1996.8262 m1658.4229 -1987.5205 1668.2202 -1985.5166 1678.9346 -1987.2705 c1679.6548 -1987.4033 1680.3652 -1987.5762 1681.0664 -1987.7891 c1681.2715 -1987.8457 1681.6533 -1988.0996 1681.9448 -1988.2734 C1681.9487 -1988.4951 1681.9561 -1988.7549 1681.9697 -1989.0801 C1681.9238 -1990.4414 1681.4326 -1991.7852 1681.0249 -1993.0664 c1680.3276 -1995.2598 1678.5718 -1996.9023 1676.8623 -1998.3125 c1674.3037 -2000.4229 1672.064 -2003.084 1669.6548 -2005.373 c1665.0679 -2009.7295 1660.3276 -2012.7139 1654.8589 -2015.8301 c1651.4395 -2017.7773 1647.8262 -2019.2734 1644.4961 -2021.2686 C1644.8857 -2012.3809 1646.8613 -2004.4053 1652.0508 -1996.8262 cf1603.9844 -1994.5762 m1601.6724 -1993.168 1599.6904 -1990.9199 1597.751 -1989.0391 c1595.5264 -1986.8809 1594.9473 -1984.1836 1593.0913 -1981.8379 c1593.8032 -1982.7373 1593.2427 -1980.7246 1593.23 -1980.4023 c1593.1836 -1979.2344 1593.4561 -1978.3418 1593.7822 -1977.2383 c1594.1875 -1975.8691 1598.3091 -1974.2129 1599.8174 -1973.4893 c1610.1914 -1968.5146 1621.5708 -1973.207 1629.4224 -1980.6992 c1634.0044 -1985.0723 1632.5952 -1991.4717 1632.5952 -1997.2686 c1632.5952 -2001.0166 1631.5269 -2004.6133 1630.1504 -2008.1396 C1629.2676 -2008.0205 1628.6563 -2008.0273 1629.5352 -2008.4941 c1627.0986 -2007.2021 1624.8096 -2005.6494 1622.3716 -2004.3564 c1619.3911 -2002.7754 1616.2129 -2002.0244 1613.27 -2000.2188 c1610.1812 -1998.3242 1607.0791 -1996.4629 1603.9844 -1994.5762 cf1623.0449 -2027.377 m1621.186 -2029.6855 1618.0244 -2031.4404 1615.9761 -2033.4482 c1614.8682 -2034.5332 1613.9844 -2035.8672 1613.0747 -2037.1143 c1613.1387 -2037.0264 1610.749 -2039.4199 1610.0908 -2040.1641 c1607.4746 -2043.123 1605.1777 -2045.1777 1601.8574 -2047.3906 c1597.1714 -2050.5146 1590.8257 -2056.1035 1584.9648 -2056.4219 c1581.4673 -2056.6113 1578.1514 -2057.5566 1574.5718 -2057.5967 c1572.1387 -2057.623 1569.5508 -2056.2803 1567.4668 -2055.1387 c1552.6104 -2046.9961 1573.5317 -2031.6826 1581.2837 -2028.0947 c1583.958 -2026.8564 1585.9048 -2026 1588.9238 -2026 C1600.6084 -2026 L1608.1885 -2026 1615.6743 -2026.8359 1623.2256 -2027.0674 C1623.1621 -2027.1689 1623.1021 -2027.2715 1623.0449 -2027.377 Cf1659.4766 -2088.2227 m1659.834 -2092.2959 1658.8145 -2096.2402 1657.0913 -2099.9082 c1655.4976 -2103.3018 1653.7974 -2102.6709 1650.3301 -2101.8672 c1644.3242 -2100.4736 1638.6465 -2095.7021 1634.4814 -2091.4053 c1630.3315 -2087.123 1625.5039 -2081.8906 1624.6899 -2075.7559 c1623.6875 -2068.2051 1624.1162 -2059.6484 1625.9946 -2052.2939 c1627.002 -2048.3496 1628.6855 -2045.0391 1630.8838 -2041.6396 c1631.2324 -2041.1006 1631.5244 -2040.5273 1631.8096 -2039.9521 C1631.9624 -2040.0684 1632.1157 -2040.1836 1632.2842 -2040.292 c1632.873 -2040.6719 1633.4766 -2041.0225 1634.0762 -2041.3828 C1636.0625 -2043.5537 1637.8672 -2046.126 1639.2061 -2047.5137 c1644.335 -2052.8281 1648.1919 -2059.0322 1651.5938 -2065.5586 c1655.2231 -2072.5225 1658.7837 -2080.3271 1659.4766 -2088.2227 cf1710.6421 -2029.1426 m1710.189 -2031.9766 1708.2163 -2033.3506 1706.1504 -2035.127 c1703.9971 -2036.9775 1702.1504 -2039.1797 1699.7705 -2040.7422 c1695.6177 -2043.4678 1687.3682 -2041.2041 1682.6348 -2041.124 c1671.708 -2040.9404 1660.0068 -2038.8926 1649.5718 -2034.6064 C1653.9824 -2033.6426 1658.3701 -2031.8936 1662.3809 -2030.1436 c1668.9927 -2027.2598 1675.2109 -2025.4453 1682.3252 -2024.126 c1688.1685 -2023.042 1712.5068 -2017.4756 1710.6421 -2029.1426 cf*U572.3076 -2153 m571.729 -2152.2656 571.1895 -2151.5234 570.73 -2150.7734 c568.7334 -2147.5156 572.0039 -2141.1875 572.9614 -2137.876 c573.3799 -2136.4297 573.9756 -2135.0625 574.605 -2133.7012 C575.1748 -2133.9463 575.7764 -2134.1416 576.4927 -2134.1426 c580.8804 -2134.1484 585.6323 -2133.9053 589.6392 -2135.9746 c594.0127 -2138.2324 597.4263 -2143.5752 600.2988 -2147.3984 c601.688 -2149.2471 603.0068 -2151.1348 604.3374 -2153 C623.2808 -2153 L621.9209 -2151.123 621.1597 -2148.9932 620.1382 -2146.8887 c617.4688 -2141.3867 616.3159 -2136.1025 616.0283 -2129.9961 c615.8057 -2125.2549 614.957 -2120.3379 618.6128 -2116.8252 c621.3794 -2114.168 628.0444 -2114.3115 631.5801 -2114.1602 c637.4561 -2113.9072 638.105 -2126.2461 638.2334 -2130.1973 c638.3213 -2132.8945 638.6362 -2135.5264 638.9404 -2138.1611 C638.3203 -2143.0801 638.1758 -2148.0361 638.167 -2153 C652.0981 -2153 L652.2881 -2148.0273 652.2817 -2143.083 652.0396 -2138.127 C652.5972 -2134.1074 653.4971 -2130.1201 654.9351 -2126.1904 c657.002 -2120.542 662.0752 -2117.7676 667.4355 -2115.75 c670.1914 -2114.7129 673.2031 -2114.4961 675.896 -2113.3789 c678.0078 -2112.5029 682.9243 -2114.3945 685.0737 -2115.1084 c686.9014 -2115.7148 688.4248 -2116.0449 688.5522 -2118.0313 c688.7041 -2120.3867 688.1587 -2122.8711 687.3345 -2125.0498 c684.8408 -2131.6416 683.8652 -2138.7637 681.0059 -2145.2344 c679.8169 -2147.9258 678.0889 -2150.4668 676.2866 -2152.7813 c676.23 -2152.8535 676.1646 -2152.9277 676.106 -2153 C691.5674 -2153 L691.7876 -2152.5996 692.0249 -2152.21 692.231 -2151.7988 c694.1401 -2147.9922 695.4043 -2143.7305 696.6001 -2139.6563 c697.9263 -2135.1367 699.769 -2130.4219 700.668 -2125.8262 c702.0469 -2118.7773 702.2783 -2109.7529 695.1455 -2105.5586 c688.8281 -2101.8428 678.3628 -2098.4238 671.2578 -2101.3711 c667.5142 -2102.9238 663.3179 -2103.3555 659.5298 -2105.0918 c655.4141 -2106.9785 651.6948 -2109.3535 648.3848 -2112.457 c648.1743 -2112.6543 647.98 -2112.8691 647.7793 -2113.0771 C644.8354 -2106.416 639.6948 -2101.0391 631.5801 -2101.1602 c619.0503 -2101.3467 604.46 -2105.6533 603.1016 -2120.2432 c602.792 -2123.5684 602.7656 -2126.9775 602.9575 -2130.3809 C602.0391 -2129.4463 601.0996 -2128.5342 600.1177 -2127.6699 c595.0767 -2123.2334 589.1855 -2121.7939 582.6377 -2121.2734 c578.9756 -2120.9824 578.522 -2121.3398 575.4717 -2120.1885 c572.0825 -2118.9082 568.1885 -2120.4063 566.0127 -2123.0469 c562.2695 -2127.5879 560.7119 -2133.5059 559.0596 -2139.0381 c557.5537 -2144.0791 556.7827 -2148.4199 557.9009 -2153 C572.3076 -2153 Lf*u1 D390.1475 -1529.4404 m388.0625 -1528.2432 386.3828 -1525.7314 384.7695 -1523.9951 c382.8521 -1521.9307 380.5835 -1520.2822 378.4619 -1518.4463 c374.248 -1514.7988 370.8892 -1510.2129 366.772 -1506.4424 c362.5747 -1502.5967 358.2866 -1498.8574 354.1074 -1494.9902 c349.9854 -1491.1758 347.0254 -1486.7998 344.207 -1481.959 c341.3257 -1477.0107 338.0254 -1472.6172 334.3833 -1468.2061 c330.6353 -1463.667 325.377 -1459.4219 322.2773 -1454.4609 c319.436 -1449.9141 317.0532 -1445.5518 313.2949 -1441.6279 c311.4468 -1439.6982 309.5967 -1437.7607 307.7466 -1435.8184 C307.7485 -1435.8086 307.749 -1435.7988 307.751 -1435.7891 c307.8677 -1435.1104 307.9893 -1434.4521 308.1104 -1433.8027 C308.9648 -1432.1445 309.9639 -1430.5635 310.8564 -1428.9102 c312.3784 -1426.0898 312.9458 -1422.7178 314.6387 -1420.0186 c317.7534 -1415.0547 320.2104 -1409.0381 322.1777 -1403.5342 c324.0337 -1398.3418 325.0405 -1392.7744 326.3765 -1387.4316 c327.8882 -1381.3838 329.8999 -1375.3574 330.7339 -1369.1738 c330.876 -1368.2793 330.9741 -1367.3809 331.0488 -1366.4795 C331.1021 -1366.1396 331.231 -1365.4209 331.4663 -1364.6729 c332.1172 -1362.6055 332.375 -1360.4375 332.5181 -1358.2793 c332.7432 -1354.8896 331.6094 -1351.5293 329.0464 -1349.5811 C331.937 -1344.5107 326.3018 -1336.8711 320.2109 -1340.6699 c316.4883 -1342.9912 311.4346 -1344.4404 308.3052 -1347.5703 c306.8115 -1349.0635 305.6665 -1350.7236 304.0396 -1352.1299 c302.0234 -1353.8721 299.6289 -1355.2061 297.5537 -1356.8965 c290.3931 -1362.7314 281.9502 -1366.7031 274.3516 -1371.8877 C272.7783 -1372.4072 271.4136 -1373.4375 270.2261 -1374.8027 C265.0693 -1378.5371 259.8662 -1382.2148 254.6592 -1385.8916 C253.1973 -1384.6777 251.7451 -1383.4453 250.356 -1382.1162 c245.7871 -1377.7432 242.2793 -1371.9746 238.4951 -1366.9287 c235.0063 -1362.2773 232.4634 -1357.1963 229.7271 -1352.0879 c226.877 -1346.7666 225.1895 -1341.5283 221.0039 -1336.9805 c216.4922 -1332.0781 209.7988 -1336.8623 210.0454 -1342.123 C210.0171 -1342.4053 210 -1342.6963 210 -1343 C210 -1352.9502 210 -1358.0498 v210 -1363.6133 212.4268 -1369.3633 213.1514 -1374.8789 c214.6992 -1386.6631 214.6377 -1398.8906 214.6377 -1410.7598 c214.6377 -1412.4736 214.6836 -1414.1641 214.769 -1415.8447 C208.9438 -1419.9736 202.8794 -1423.7598 197.6909 -1428.7656 c194.2744 -1432.0625 190.9595 -1435.4463 187.4512 -1438.6484 c183.4648 -1442.2881 178.9863 -1445.2529 174.9419 -1448.8105 c167.3091 -1455.5254 160.2314 -1462.8203 152.9736 -1469.9277 c149.5342 -1473.2959 145.6724 -1476.0752 141.6157 -1478.6426 c137.5947 -1481.1875 134.6499 -1485.0137 130.7549 -1487.7637 c125.271 -1491.6348 128.4487 -1499.7344 133.4912 -1500.1523 C135.4922 -1503.5449 140.0737 -1505.3154 143.3389 -1501.502 c145.1914 -1499.3389 154.5493 -1501.5352 157.1973 -1502.0928 c163.6128 -1503.4434 169.6484 -1505.834 176.1299 -1506.9893 c189.7808 -1509.4238 203.5063 -1510.3975 216.4448 -1515.7715 c219.1152 -1516.8809 221.8359 -1517.7568 224.5898 -1518.5088 C224.5972 -1518.5518 224.6035 -1518.5957 224.6113 -1518.6387 c226.3999 -1528.8496 228.4653 -1538.8613 229.9463 -1549.0752 C229.2163 -1553.9473 228.4321 -1559.7363 230.7998 -1563.7314 c231.1226 -1564.2764 231.5479 -1564.7598 232.0337 -1565.1846 C233.2412 -1573.707 234.6704 -1582.1992 235.6279 -1590.7529 C235.4648 -1593.7207 235.5244 -1596.7207 236.0288 -1599.834 c236.1704 -1600.71 236.5469 -1601.4766 237.0684 -1602.1328 C237.3506 -1603.9219 237.6567 -1605.7119 238.0303 -1607.5176 c238.5098 -1609.8359 237.8208 -1612.5693 237.9199 -1614.9443 c238.0356 -1617.7061 238.9395 -1620.1563 240.2139 -1622.5684 c242.4136 -1626.7314 249.2827 -1626.8818 251.4395 -1622.5684 c254.3228 -1616.8018 256.5781 -1611.4307 258.0391 -1605.1299 c259.5566 -1598.583 260.3608 -1592.1895 262.6846 -1585.8447 c264.7134 -1580.3066 267.1118 -1574.9102 269.1865 -1569.3887 c271.4878 -1563.2617 272.6519 -1556.9023 274.1587 -1550.5566 c276.1104 -1542.3369 278.1309 -1534.126 280.1665 -1525.9199 C281.7051 -1525.8926 283.2329 -1525.873 284.7666 -1525.8467 C290.6357 -1528.4199 297.3813 -1529.8975 301.7446 -1531.0674 c308.519 -1532.8838 315.4209 -1533.3867 322.3306 -1534.3633 c323.1846 -1534.4834 324.0347 -1534.6123 324.8823 -1534.7402 C329.4521 -1536.1318 334.0186 -1537.6865 338.7896 -1538.0986 c341.2852 -1538.3145 343.3843 -1538.2656 345.8369 -1538.9668 c348.5078 -1539.7285 351.0283 -1540.9033 353.7202 -1541.6211 c358.5542 -1542.9102 362.7764 -1542.1699 367.2808 -1544.8818 c371.4214 -1547.375 377.2192 -1548.3125 381.7969 -1549.877 c386.3613 -1551.4375 390.8203 -1552.1787 395.5361 -1551.6211 C396.2646 -1551.8633 397.0845 -1552 398 -1552 C398.4116 -1552 398.8037 -1552 v404.3916 -1552 407.5205 -1544.6934 403.3999 -1540.7305 c399.4307 -1536.9121 394.9165 -1532.1797 390.1475 -1529.4404 cf0 D165.3726 -1476.7285 m165.1484 -1476.7793 164.9233 -1476.8291 164.6992 -1476.8818 C165.8301 -1475.8047 166.9473 -1474.71 168.0557 -1473.6055 C168.166 -1473.8516 168.2905 -1474.085 168.4321 -1474.2979 c168.6133 -1474.5703 168.8032 -1474.8145 168.9932 -1475.0566 C167.7925 -1475.6289 166.5859 -1476.1865 165.3726 -1476.7285 Cf230.9087 -1460.9072 m230.8491 -1460.3164 230.79 -1459.7246 230.7344 -1459.1328 C230.7988 -1458.9668 230.8608 -1458.7998 230.9126 -1458.624 c231.5552 -1456.4492 232.0073 -1454.2344 232.3901 -1452.0039 C232.5054 -1453.3555 232.6152 -1454.707 232.7075 -1456.0586 c232.7319 -1456.418 232.7549 -1456.7803 232.7788 -1457.1406 C232.104 -1458.3604 231.4844 -1459.6309 230.9087 -1460.9072 Cf254.9639 -1498.0049 m254.8936 -1498.291 254.8262 -1498.5781 254.7549 -1498.8633 C253.415 -1498.6299 252.0322 -1498.7793 250.8359 -1499.3857 C250.8892 -1499.043 250.9414 -1498.7002 250.9951 -1498.3574 C252.4312 -1497.668 253.8203 -1496.9404 255.1494 -1496.207 C255.0952 -1496.8076 255.0313 -1497.4072 254.9639 -1498.0049 Cf256.02 -1407.7949 m255.4229 -1406.043 254.7451 -1404.3438 253.8628 -1402.7188 C253.8975 -1402.6934 253.9316 -1402.668 253.9663 -1402.6426 C255.4541 -1404.2129 256.96 -1405.6846 258.5 -1407.1133 C257.6475 -1407.1875 256.8027 -1407.416 256.02 -1407.7949 Cf292.7573 -1376.8428 m292.4565 -1376.6104 292.1304 -1376.4063 291.7852 -1376.2275 C292.6074 -1375.7275 293.4282 -1375.2256 294.248 -1374.7207 C293.7427 -1375.4199 293.2471 -1376.1279 292.7573 -1376.8428 Cf*UUu0 0.411658 0.493629 0 1 0.658824 0.498039 Xa3788.7129 -99.6611 m3787.3887 -96.189 3785.3252 -92.916 3784.2715 -89.3667 c3783.2861 -86.0498 3781.9766 -82.8267 3780.4277 -79.7388 c3777.418 -73.7461 3772.6602 -69.7808 3767.4453 -65.8184 c3764.2803 -63.4141 3760.6279 -61.6479 3757.1602 -59.7358 c3753.5225 -57.73 3750.3877 -55.272 3746.5635 -53.6528 c3731.4727 -47.2622 3716.8652 -39.4194 3702.4697 -31.6177 c3695.5156 -27.8486 3688.8701 -24.8311 3681.0781 -23.23 c3673.1211 -21.5957 3664.7686 -21.2744 3656.6729 -21.167 c3639.834 -20.9438 3623 -21.1431 3606 -21.1431 c3598 -21.1431 3598 -34.1431 3606 -34.1431 c3621 -34.1431 3636.3848 -34.1401 3651.5059 -34.1436 c3666.4219 -34.147 3680.7949 -34.6538 3694.1475 -41.9229 c3707.6514 -49.2734 3721.3887 -56.1494 3735.2695 -62.7539 c3738.3926 -64.2393 3742.0215 -65.2466 3744.7813 -67.3433 c3747.4961 -69.4058 3750.6143 -70.9736 3753.5967 -72.6021 c3759.4561 -75.8008 3765.043 -79.2593 3768.5781 -85.0669 c3770.0527 -87.4888 3770.9941 -90.1382 3771.8574 -92.8223 c3773.0137 -96.4155 3774.7148 -99.6421 3776.1768 -103.1172 c3778.8057 -109.3677 3781 -115.7495 3781 -122.543 C3781 -144.064 L3781 -151.2954 3778.2002 -158.4878 3775.5811 -165.1479 c3773.0488 -171.5869 3770.0566 -177.6543 3766.2754 -183.4663 c3764.9043 -185.5732 3763.7168 -187.5967 3761.9414 -189.3926 c3760.9512 -190.396 3759.5996 -190.769 3758.5898 -191.7783 c3757.2949 -193.0737 3756.4668 -194.4214 3755.0215 -195.624 c3750.2354 -199.6089 3746.6992 -204.1597 3741.3203 -207.5757 c3735.4834 -211.2817 3729.0537 -214.8325 3722.252 -216.4067 c3715.7051 -217.9214 3709.7324 -220.9917 3703.0801 -222.3179 c3695.293 -223.8706 3687.3799 -224.5469 3679.4404 -224.6172 c3664.1611 -224.7529 3649.3242 -223.6323 3634.4688 -220.021 c3628.0703 -218.4653 3621.8477 -214.5088 3616.3086 -211.0547 c3613.5586 -209.3398 3609.7637 -208.439 3607.5107 -206.041 c3604.9648 -203.3315 3602.4941 -200.228 3600.4355 -197.1392 c3596.1514 -190.7119 3593.4209 -184.4678 3591.5 -176.9478 c3589.6484 -169.6997 3590.2842 -161.6011 3590.4229 -154.1855 c3590.5547 -147.1382 3591.792 -140.2383 3593.2314 -133.353 c3594.5576 -127.0103 3596.2012 -119.8721 3599.75 -114.4082 c3602.6387 -109.9629 3606.2998 -105.3779 3609.8965 -101.4839 c3612.291 -98.8916 3614.6309 -98.2173 3618.043 -97.6274 c3621.9639 -96.9502 3625.5254 -95.7036 3629.2139 -94.2461 c3642.4766 -89.0049 3658.7109 -88.3745 3672.8477 -89.416 c3679.1465 -89.8799 3685.9932 -91.8657 3691.873 -94.0874 c3694.7148 -95.1616 3697.2051 -96.4941 3699.7598 -98.1523 c3701.1826 -99.0762 3703.2441 -99.3584 3704.834 -99.895 c3707.1348 -100.6724 3709.2754 -101.9443 3711.3584 -103.1694 c3722.1328 -109.5059 3732.5078 -117.7305 3735.8584 -130.4033 c3737.3633 -136.0977 3736.874 -142.728 3736.9531 -148.5869 c3737.0381 -154.8789 3734.5791 -160.8604 3731.793 -166.3979 c3729.127 -171.6982 3725.877 -175.6729 3720.5723 -178.3794 c3717.5146 -179.9399 3714.0908 -180.396 3710.752 -180.9731 c3707.4346 -181.5464 3704.4092 -182.874 3701.0361 -183.2334 c3690.2031 -184.3867 3680.7988 -187.0298 3669.96 -184.3545 c3666.0908 -183.3994 3662.0645 -181.8867 3658.9961 -179.2773 c3654.5205 -175.4731 3653.8877 -170.2114 3653.9814 -164.6831 c3654.1816 -152.8843 3656.0684 -139.4507 3666.8135 -132.4258 c3677.0107 -125.7588 3691.7451 -132.2334 3699.6855 -139.7061 c3701.4297 -141.3477 3705.0508 -149.0146 3701.2539 -150.5269 c3697.6201 -151.9736 3692.8311 -150.1152 3689.4297 -148.8091 c3681.5898 -145.7988 3678.2305 -158.3716 3685.9727 -161.3442 c3695.3047 -164.9277 3707.6006 -165.8301 3713.3721 -155.9976 c3716.2607 -151.0762 3716.1523 -144.2593 3714.3223 -139.0415 c3712.0098 -132.4482 3706.8477 -128.5674 3701.2637 -124.8569 c3689.7539 -117.2085 3675.75 -114.2119 3662.7861 -119.8311 c3650.6396 -125.0957 3644.1123 -138.9712 3641.8652 -151.25 c3639.5635 -163.835 3639.9092 -177.9604 3649.0254 -187.731 c3656.1738 -195.3906 3668.1563 -197.9229 3678.1299 -198.7305 c3682.8789 -199.1147 3687.8057 -198.7471 3692.3779 -197.4023 c3695.6914 -196.4277 3699.2773 -196.4204 3702.6904 -196.0571 c3706.6855 -195.6313 3710.3096 -194.3267 3714.208 -193.5088 c3720.8535 -192.1138 3726.9131 -190.4839 3732.4707 -186.3506 c3737.8633 -182.3408 3741.5547 -176.1577 3744.376 -170.1729 c3750.2939 -157.6206 3751.2451 -143.7485 3748.9893 -130.0996 c3746.7227 -116.3901 3737.2383 -105.3711 3726.4648 -97.2241 c3721.0361 -93.1191 3714.6055 -89.8306 3708.2891 -87.3599 c3701.7998 -84.8208 3695.9365 -81.4331 3689.123 -79.542 c3674.3379 -75.438 3659.8457 -75.9204 3644.7373 -77.5723 c3637.9863 -78.3105 3632.127 -79.2075 3625.7578 -81.7104 c3622.6582 -82.9287 3619.625 -84.1001 3616.3564 -84.7861 c3612.3184 -85.6338 3608.7734 -86.0864 3605.2666 -88.4268 c3600.418 -91.6626 3597.5195 -96.4688 3593.9102 -100.8711 c3589.7656 -105.9268 3586.1289 -110.873 3584.1504 -117.1841 c3575.791 -143.8535 3571.9238 -177.7734 3588.1992 -202.1836 c3590.1094 -205.0483 3592.0352 -207.6973 3594.2715 -210.3071 c3596.2646 -212.6318 3597.9961 -215.6738 3600.6445 -217.3267 c3606.9053 -221.2305 3613.6445 -224.855 3620.248 -228.1567 c3633.0469 -234.5562 3648.2188 -236.9966 3662.4502 -237.1074 c3670.0156 -237.1665 3677.5361 -237.8428 3685.1055 -237.4473 c3692.9463 -237.0376 3700.6055 -236.0366 3708.3086 -234.5005 c3714.8301 -233.2002 3720.7314 -230.0947 3727.1875 -228.6006 c3733.5879 -227.1196 3741.085 -223.4429 3746.4395 -219.6865 c3751.6377 -216.0381 3756.7988 -212.8999 3761.0039 -208.0269 c3765.6133 -202.6851 3768.8105 -201.4937 3773.0088 -196.6226 c3781.7041 -186.5332 3786.7539 -173.2192 3790.9805 -160.7852 c3793.3662 -153.769 3794 -147.5181 3794 -140.1304 C3794 -118.4985 L3794 -112.1572 3790.9375 -105.4932 3788.7129 -99.6611 cf*u1 D3683.3613 -617.8438 m3683.4072 -614.5586 3681.3145 -611.1948 3677.0811 -611.1128 c3669.8154 -610.9722 3662.9453 -609.0547 3655.7998 -608.0308 c3652.2314 -607.5195 3648.7324 -607.0869 3645.2334 -606.1807 c3641.668 -605.2563 3638.584 -602.7197 3635.1523 -601.9053 c3628.5898 -600.3491 3621.8535 -599.6191 3615.4063 -597.5913 c3608.1445 -595.3076 3601.959 -590.0454 3594.7109 -587.4297 c3591.9063 -586.417 3588.877 -586.0562 3586.0039 -585.2778 c3585.9492 -585.2632 3583.999 -579.8926 3583.5781 -578.9775 c3580.9189 -573.1904 3579.1377 -567.1724 3575.9004 -561.6475 c3568.3896 -548.8296 3563.5996 -534.8369 3557.4102 -521.3794 c3555.0176 -516.1768 3549.7012 -512.1616 3544.1875 -515.9277 c3541.7402 -517.5991 3540.5996 -520.0273 3539.5771 -522.7134 c3538.8291 -524.6782 3535.7988 -526.2354 3534.5957 -528.1963 c3533.0781 -530.6694 3531.917 -533.3276 3530.4004 -535.8008 c3529.6494 -537.0244 3528.2871 -537.5313 3527.5166 -538.8159 c3526.5508 -540.4248 3525.5859 -542.0342 3524.6201 -543.6431 c3520.5156 -550.4824 3516.2246 -557.1738 3513.0244 -564.498 c3510.1777 -571.0137 3507.9688 -577.7822 3505.1768 -584.3193 c3502.6016 -590.3496 3501.2109 -595.937 3494.2891 -597.5605 c3487.0928 -599.249 3480.0166 -597.7651 3472.7588 -597.0996 c3465.3467 -596.4204 3457.9355 -598.0068 3450.5322 -598.1333 c3446.1621 -598.208 3441.7285 -599.1255 3437.3203 -599.2568 c3432.4619 -599.4014 3427.9775 -599.6807 3423.168 -600.4868 c3418.9297 -601.1978 3414.7129 -601.6094 3410.415 -601.6733 c3406.4648 -601.7324 3402.6621 -603.8774 3398.6152 -604.0332 c3395.252 -604.1626 3393.2402 -606.3472 3392.5801 -608.8896 C3391.8633 -609.4067 3391.209 -610.0513 3390.6426 -610.792 c3385.5166 -617.5024 3393.2236 -624.4272 3398.1572 -628.0898 c3400.4141 -629.7646 3402.8594 -630.9775 3404.9766 -632.8286 c3409.5146 -636.7969 3414.0723 -640.7412 3418.6807 -644.6279 c3422.9775 -648.252 3427.3486 -651.7852 3431.7773 -655.2476 c3436.0371 -658.5786 3441.0215 -660.2954 3445.7549 -662.7983 c3450.332 -665.2188 3454.1689 -668.6416 3459.0869 -670.5039 c3463.8125 -672.2935 3467.2188 -678.7622 3472.9512 -678.3901 c3473.0322 -678.3848 3473.1133 -678.375 3473.1934 -678.3691 C3473.1396 -678.5103 3473.0928 -678.6489 3473.0322 -678.792 c3470.7383 -684.2241 3469.3184 -689.9443 3467.501 -695.5425 c3463.9102 -706.6025 3457.8945 -716.708 3454.8848 -727.979 c3451.9355 -739.021 3447.0889 -749.5488 3443.624 -760.436 c3442.208 -764.8872 3441.9961 -769.5244 3440.7256 -773.9966 c3440.1582 -775.9932 3440.4932 -778.3804 3440.4932 -780.4448 c3440.4932 -783.291 3439.8242 -785.2041 3440.7256 -788.0723 c3441.8887 -791.7749 3445.1113 -793.1309 3448.7207 -792.6123 c3452.71 -792.0391 3456.1191 -789.1719 3459.1572 -786.7373 c3463.8711 -782.9595 3468.5332 -779.1592 3473.3662 -775.5151 c3483.1211 -768.1602 3493.543 -761.6826 3503.1582 -754.1641 c3507.4053 -750.8433 3510.6816 -746.7666 3513.9385 -742.502 c3517.1143 -738.3423 3520.6777 -734.6553 3524.3281 -730.8989 c3528.1738 -726.9395 3531.832 -723.6348 3536.8223 -721.3018 c3538.6025 -720.4688 3540.127 -719.4414 3541.6543 -718.2813 C3546.0156 -722.5513 3552.7881 -724.8647 3558.166 -728.2402 c3563.793 -731.771 3569.4795 -734.6455 3574.7734 -738.6792 c3579.2822 -742.1157 3584.3096 -744.9497 3589.0693 -748.0273 c3593.1631 -750.6738 3596.7168 -755.4194 3600.2598 -758.7881 c3604.2266 -762.5586 3608.8359 -765.3921 3612.3086 -769.7017 c3614.4746 -772.3916 3618.2754 -774.7197 3621.002 -776.7969 c3624.2891 -779.3008 3628.5625 -781.5171 3632.8115 -781.1021 c3645.3008 -779.8833 3645.4121 -763.1289 3643.9307 -753.938 c3642.8467 -747.2197 3640.6406 -740.4814 3639.1357 -733.8223 c3637.6719 -727.3394 3636.1846 -720.8574 3634.5156 -714.4233 c3632.9316 -708.3208 3630.6914 -702.3979 3628.666 -696.4341 c3627.3262 -692.4878 3626.7402 -688.8848 3625.9258 -684.8149 c3625.459 -682.4805 3624.8379 -679.4727 3623.834 -676.6348 C3626.627 -674.7217 3629.2598 -672.5527 3632.2285 -670.7261 c3638.6387 -666.7827 3645.4053 -663.4302 3651.957 -659.7339 c3658.627 -655.9712 3665.1055 -651.8506 3670.9102 -646.8403 c3673.7246 -644.4111 3677.0547 -641.6797 3679.1533 -638.5928 c3681.166 -635.6343 3683.3447 -632.4565 3686.2617 -630.3047 c3691.6875 -626.3018 3688.4111 -618.0811 3683.3613 -617.8438 Cf0 D3666.5801 -633.0703 m3661.1045 -638.501 3655.1553 -642.7056 3648.5596 -646.6714 c3642.0234 -650.6011 3635.1895 -654.0146 3628.5664 -657.7905 c3623.3389 -660.7705 3618.5547 -666.1748 3612.8164 -667.9824 c3606.9219 -669.8389 3607.1406 -676.6553 3610.9102 -679.4639 C3610.9902 -679.6431 3611.0781 -679.8516 3611.1807 -680.126 c3611.665 -681.4233 3612.0313 -682.7666 3612.4004 -684.1001 c3613.0469 -686.439 3613.7783 -689.7314 3613.9258 -691.4473 c3614.3145 -695.9458 3616.2832 -700.3706 3617.7539 -704.6167 c3619.4727 -709.5791 3621.1162 -714.5503 3622.4355 -719.6357 c3625.0693 -729.79 3627.2402 -740.0752 3629.5156 -750.3145 c3630.752 -755.8779 3632.4512 -760.5347 3631.2129 -766.3271 c3631.0781 -766.9565 3630.9365 -767.4014 3630.8184 -767.7227 C3630.2715 -767.417 3629.6973 -767.0317 3629.3262 -766.8022 c3623.8574 -763.417 3619.9121 -758.2124 3615.0107 -754.167 c3608.3223 -748.646 3602.5625 -741.9517 3595.6309 -736.8018 c3591.9141 -734.0405 3587.7822 -731.8711 3583.9121 -729.3389 c3579.4883 -726.4434 3575.8379 -723.1641 3571.0215 -720.7505 c3566.623 -718.5474 3562.6455 -715.686 3558.2383 -713.4751 c3556.4287 -712.5674 3554.6348 -711.6465 3552.877 -710.6431 c3551.1855 -709.6787 3550.2715 -708.9644 3550.248 -708.4683 c3550.0498 -704.2515 3546.249 -701.0752 3542.0195 -702.2002 c3538.4756 -703.1436 3536.0137 -705.9429 3533.417 -708.3545 c3531.7559 -709.8975 3529.2676 -709.8804 3527.4883 -711.1152 c3525.2637 -712.6592 3523.1348 -714.3135 3521.0654 -716.0586 c3512.9805 -722.8745 3506.8604 -731.1899 3500.0801 -739.1641 c3492.3574 -748.2471 3480.6738 -753.082 3471.5576 -760.5762 c3466.6377 -764.6206 3461.3975 -768.2642 3456.3877 -772.1953 c3455.6475 -772.7759 3454.8594 -773.4971 3454.0332 -774.2642 C3455.0225 -769.5356 3455.7578 -765.0552 3457.2852 -760.415 c3460.6709 -750.126 3465.0908 -740.1572 3467.8896 -729.6782 c3470.7207 -719.0757 3476.4463 -709.3569 3480.0361 -698.9985 c3481.7773 -693.9736 3482.8467 -688.6943 3484.9199 -683.7852 c3486.6357 -679.7217 3487.9844 -675.7993 3487.1182 -671.3423 c3486.2109 -666.6748 3481.0889 -664.6777 3476.9336 -664.9478 c3474.6201 -665.0977 3474.2422 -665.4385 3472.25 -664.1411 c3469.9453 -662.6401 3467.8643 -660.7813 3465.6133 -659.1982 c3463.8838 -657.9824 3461.4131 -657.3286 3459.5439 -656.2393 c3457.0645 -654.7939 3454.7783 -653.0449 3452.3164 -651.5732 c3448.1514 -649.083 3443.3311 -647.9019 3439.46 -644.875 c3430.7861 -638.0933 3422.46 -630.8774 3414.1689 -623.6362 c3411.6523 -621.438 3409.1699 -619.8154 3406.3984 -618.0239 c3405.6309 -617.5273 3404.9043 -616.9907 3404.1934 -616.4272 C3405.9092 -616.1328 3407.6113 -615.7524 3409.3037 -615.3076 c3413.7188 -614.1465 3418.5156 -614.1982 3423.0566 -613.5791 c3432.1289 -612.3438 3441.2734 -612.5723 3450.3301 -611.1943 c3458.665 -609.9268 3467.8789 -609.5303 3476.248 -610.4521 c3485.1064 -611.4277 3495.2002 -612.6865 3503.4463 -608.2339 c3510.7031 -604.3149 3513.2217 -598.0283 3516.4023 -590.8809 c3520.251 -582.2295 3522.96 -573.1206 3527.2617 -564.6694 c3531.2939 -556.75 3536.3926 -549.4521 3541.625 -542.3618 c3543.7402 -539.4956 3544.5986 -536.2783 3547.1641 -533.7134 c3547.4805 -533.397 3547.8691 -533.0518 3548.2705 -532.6899 C3548.3174 -532.7896 3548.3623 -532.8887 3548.4092 -532.9883 c3550.3076 -537.0166 3551.5693 -541.3359 3553.4746 -545.3774 c3557.1074 -553.0869 3560.1836 -560.9434 3564.6758 -568.209 c3568.2441 -573.9805 3570.1191 -580.6777 3572.9434 -586.8223 c3574.3555 -589.894 3574.8965 -593.0132 3577.6523 -595.2451 c3580.252 -597.3496 3583.3086 -598.0576 3586.5098 -598.7456 c3594.2969 -600.4189 3600.2188 -604.938 3607.2842 -608.2686 c3614.4277 -611.6367 3622.3086 -612.3857 3629.9395 -614.0244 c3633.3652 -614.7603 3636.7461 -617.1782 3640.1582 -618.2573 c3644.1162 -619.5098 3648.1992 -620.0493 3652.3027 -620.5728 c3659.7607 -621.5244 3666.9609 -623.4692 3674.459 -623.9834 C3671.8105 -626.959 3669.4961 -630.1777 3666.5801 -633.0703 cf*U*u1 D3408.1006 -1821.4805 m3403.127 -1819.9941 3397.5693 -1820.457 3392.4648 -1820.9561 c3379.5645 -1822.2168 3367.6465 -1828.7227 3357.6465 -1836.6367 c3353.1133 -1840.2246 3349.207 -1843.2334 3345.9912 -1848.1582 c3342.5332 -1853.4541 3341.207 -1859.9922 3338.4258 -1865.6592 c3338.3057 -1865.9043 3338.1875 -1866.1533 3338.0684 -1866.3994 C3336.2832 -1851.5605 3331.4365 -1837.4707 3318.5117 -1828.668 c3312.9795 -1824.9004 3307.4326 -1821.3525 3301.3086 -1818.6807 c3296.6855 -1816.6631 3293.2295 -1812.1611 3288.4258 -1810.6602 c3284.5342 -1809.4443 3279.2314 -1809.5264 3275.2178 -1810.25 c3268.9277 -1811.3848 3264.6289 -1815.0107 3259.7236 -1818.7295 c3251.1943 -1825.1943 3249.4082 -1838.6846 3252.4736 -1848.3164 c3255.8633 -1858.9629 3263.168 -1867.002 3268.6641 -1876.3496 c3271.5713 -1881.293 3276.4043 -1884.7695 3281.123 -1887.8223 c3286.2539 -1891.1436 3291.7441 -1894.2744 3297.377 -1896.6387 c3302.1328 -1898.6348 3306.9209 -1900.2607 3311.6963 -1902.1338 C3299.6123 -1902.7129 3288.0742 -1904.8818 3276.4434 -1908.9639 c3263.8799 -1913.374 3250.6709 -1918.0469 3239.3096 -1924.9805 c3230.4141 -1930.4082 3217.8389 -1939.1777 3215.5508 -1950.0752 c3212.8564 -1962.9102 3219.9766 -1974.6895 3230.1934 -1981.6953 c3240.6719 -1988.8809 3254.5664 -1989.7148 3266.625 -1987.1084 c3279.5059 -1984.3242 3290.5049 -1976.2471 3299.8125 -1967.2637 c3304.3691 -1962.8652 3308.542 -1958.0498 3312.8369 -1953.3994 c3314.8535 -1951.2168 3317.5391 -1949.5332 3319.2695 -1947.1465 c3321.4248 -1944.1738 3323.377 -1941.0684 3325.4756 -1938.0566 c3327.3926 -1935.3066 3329.5898 -1932.7539 3331.7813 -1930.1924 C3332.7939 -1934.4395 3334.3359 -1938.5479 3334.9668 -1942.9219 c3336.5459 -1953.873 3339.6484 -1965.3682 3346.8457 -1973.9902 c3349.9268 -1977.6816 3353.8691 -1980.3369 3357.2656 -1983.6768 c3361.4229 -1987.7627 3365.9121 -1990.918 3371.3574 -1993.0137 c3379.957 -1996.3223 3391.749 -1996.6201 3399.4814 -1991.1689 c3408.8633 -1984.5557 3409.8623 -1972.9365 3409.8281 -1962.4346 c3409.8086 -1956.5156 3407.6885 -1953.1865 3404.3525 -1948.5684 c3400.4854 -1943.2148 3396.3008 -1938.084 3392.0938 -1932.9961 c3384.6963 -1924.0488 3377.5488 -1916.6426 3366.7139 -1911.9453 c3362.2207 -1909.9971 3357.4424 -1908.917 3352.71 -1907.7715 C3366.7949 -1902.3418 3380.0947 -1894.4805 3392.3135 -1886.0498 c3402.2129 -1879.2197 3413.3428 -1871.5107 3420.625 -1861.8379 c3426.5537 -1853.9639 3424.5684 -1838.5459 3419.1738 -1831.0498 c3416.3047 -1827.0615 3413.0234 -1822.9502 3408.1006 -1821.4805 cf0 D3310.2227 -1888.041 m3301.4023 -1885.583 3292.4883 -1879.9414 3284.9873 -1874.8018 c3281.2188 -1872.2188 3279.502 -1868.9023 3277.2949 -1865.0742 c3275.1631 -1861.3789 3271.9053 -1858.6279 3269.8018 -1854.8457 c3265.8779 -1847.791 3260.5645 -1837.4736 3266.6602 -1829.8564 c3269.1836 -1826.7031 3273.4824 -1824.1064 3277.3174 -1823.0303 c3278.9434 -1822.5742 3283.5 -1822.2988 3284.8262 -1823.3506 c3288.4492 -1826.2217 3292.0059 -1828.71 3296.2607 -1830.5664 c3301.3203 -1832.7744 3305.7109 -1835.9229 3310.377 -1838.8701 c3318.5547 -1844.0361 3321.4678 -1852.2188 3323.998 -1861.1914 c3326.8545 -1871.3213 3326.2832 -1881.5752 3326.0859 -1891.9375 C3325.2363 -1891.7822 3324.3818 -1891.6348 3323.5029 -1891.5322 c3318.9863 -1891.0068 3314.5801 -1889.2549 3310.2227 -1888.041 cf3320.5273 -1923.7158 m3316.8564 -1928.1689 3313.4502 -1932.6357 3310.2559 -1937.4521 c3307.5674 -1941.5059 3302.9658 -1944.9688 3299.6309 -1948.6045 c3285.3613 -1964.1611 3267.6797 -1980.2832 3244.8252 -1974.1758 c3234.5967 -1971.4424 3227.7959 -1963.7979 3228.1709 -1953.0811 c3228.2959 -1949.5137 3233.3594 -1945.9961 3235.6641 -1943.835 c3239.6221 -1940.123 3244.2129 -1937.5156 3248.6094 -1934.4102 c3252.8252 -1931.4336 3258.1338 -1930.0898 3262.8691 -1928.1875 c3268.5293 -1925.9131 3274.1631 -1923.5811 3279.8984 -1921.5 c3292.5146 -1916.9209 3304.998 -1914.9756 3318.377 -1914.9678 c3318.9189 -1914.9678 3319.4248 -1914.9102 3319.8965 -1914.8086 C3320.5078 -1914.9521 3321.1738 -1915.0205 3321.917 -1914.9678 c3323.8477 -1914.832 3325.7686 -1914.626 3327.6797 -1914.3691 C3325.5264 -1917.6475 3323.0313 -1920.6787 3320.5273 -1923.7158 cf3353.4033 -1920.9883 m3361.623 -1923.1309 3369.3262 -1927.0332 3375.2832 -1933.1475 c3382.1865 -1940.2334 3388.3965 -1948.5801 3394.1807 -1956.5859 c3395.1836 -1957.9756 3396.3008 -1958.7881 3396.7539 -1960.4473 c3397.3076 -1962.4707 3396.835 -1965.2559 3396.8145 -1967.332 c3396.7725 -1971.5127 3396.207 -1975.957 3393.416 -1979.2881 c3389.1133 -1984.4258 3380.209 -1982.0723 3374.8145 -1980.4727 c3370.6318 -1979.2324 3367.2422 -1975.2725 3364.2715 -1972.3086 c3361.2891 -1969.332 3357.9082 -1967.0176 3355.1523 -1963.7148 c3349.8281 -1957.3369 3348.3379 -1945.9023 3347.2959 -1937.9658 c3346.6807 -1933.2803 3344.375 -1929.084 3343.8242 -1924.418 c3343.6035 -1922.5459 3343.5625 -1920.5586 3343.584 -1918.584 C3346.7871 -1919.417 3350.0703 -1920.1191 3353.4033 -1920.9883 cf3410.9004 -1851.249 m3410.7285 -1854.6621 3407.9961 -1856.9707 3405.6113 -1859.0781 c3397.4863 -1866.2607 3388.9326 -1872.8828 3379.833 -1878.7852 c3369.0488 -1885.7803 3357.3164 -1892.4814 3344.9414 -1896.9004 C3343.8105 -1896.1689 3342.502 -1895.7832 3341.1797 -1895.9121 C3342.6641 -1888.8281 3345.6152 -1882.0479 3348.2998 -1875.3379 c3350.3652 -1870.1777 3353.0566 -1865.3408 3354.8281 -1860.0479 c3356.2402 -1855.8281 3358.3857 -1852.5869 3361.7295 -1849.626 c3369.2559 -1842.9619 3378.5098 -1837.7285 3388.1494 -1834.9141 c3392.3545 -1833.6865 3396.6738 -1833.582 3401.0244 -1833.5527 c3405.0488 -1833.5264 3406.5078 -1835.6074 3408.7217 -1838.6846 c3410.9805 -1841.8242 3411.085 -1847.5557 3410.9004 -1851.249 cf*U*u1 D175.2358 -712.042 m171.1567 -707.6953 166.105 -704.1553 160.917 -701.2729 c154.8364 -697.895 147.7559 -696.479 141.3462 -693.9414 c133.543 -690.8521 130.1914 -703.4287 137.8901 -706.4766 c144.377 -709.0449 151.1777 -710.5498 157.2451 -714.1597 c163.8022 -718.0605 168.2422 -723.4033 172.0977 -729.8647 c179.8594 -742.8706 186.7393 -756.793 191.8164 -771.0737 c196.6738 -784.7358 200.4258 -799.1357 200.3662 -813.6763 c200.3394 -820.3008 200.0479 -827.2148 197.2441 -833.3447 c194.4419 -839.4717 189.2632 -844.3159 184.5796 -849.0054 c179.8833 -853.7075 175.5142 -858.7236 170.8721 -863.4785 c166.0693 -868.3979 160.8242 -871.9497 155.207 -875.8071 c150.7271 -878.8838 146.5752 -882.1851 141.1943 -883.4658 c137.8911 -884.2524 133.9453 -883.6797 130.5718 -883.6797 c125.9463 -883.6797 121.6455 -883.8276 117.1572 -882.5952 c110.0234 -880.6357 103.3125 -878.9937 95.9604 -878.0859 c88.4141 -877.1548 81.8901 -872.7285 77.3438 -866.7764 c73.3223 -861.5112 69.9692 -855.5586 67.0176 -849.6431 c63.5796 -842.7529 59.5649 -835.6904 57.4185 -828.2744 c55.5137 -821.6909 56.2944 -813.7627 56.6133 -806.9937 c56.9819 -799.1641 59.6421 -791.2329 62.3779 -783.9429 c63.7148 -780.3809 65.3447 -776.9443 66.6895 -773.3857 c67.9238 -770.1182 68.6001 -767.1084 70.5571 -764.1724 c74.9946 -757.5166 79.9458 -752.4688 86.3545 -747.6528 c92.2754 -743.2031 98.1055 -740.9746 105.5488 -740.6094 c112.7495 -740.2559 120.6777 -742.0313 127.0181 -745.4639 c132.0742 -748.2012 135.7017 -753.5688 139.147 -758.0039 c143.0815 -763.0698 147.8984 -769.9492 148.6895 -776.4517 c148.9136 -778.2944 149.0166 -780.1484 149.0469 -782.0083 C145.2715 -772.9473 136.9331 -765.6597 127.8853 -762.4063 c125.0098 -761.3721 121.7046 -761.1982 118.6821 -761.0293 c115.7607 -760.8667 112.8911 -760.2705 109.9883 -760.1362 c102.7075 -759.7998 97.2686 -762.9414 91.6289 -767.1631 c80.9126 -775.1841 74.1211 -789.4971 74.1211 -802.8643 c74.1211 -806.1997 73.606 -809.8662 74.9019 -812.9971 c76.1655 -816.0508 78.1309 -818.5337 80.4268 -820.8892 c85.0977 -825.6807 91.0898 -829.9214 97.1045 -832.813 c109.4409 -838.7437 123.3677 -842.1074 137.1104 -841.0752 c150.7993 -840.0469 157.9712 -825.7998 160.1929 -813.8843 c161.4458 -807.1636 161.3384 -800.4019 161.6025 -793.606 c161.9131 -785.6187 162.6543 -777.4272 160.4463 -769.6294 c158.6611 -763.3232 154.5068 -757.8896 151.1304 -752.3857 c147.9077 -747.1343 143.1343 -741.8198 138.499 -737.7959 c128.2568 -728.9053 111.8276 -726.1084 98.7524 -728.2852 c91.5073 -729.4917 85.6875 -732.1226 79.793 -736.4277 c73.9478 -740.6968 67.4253 -745.4717 63.3774 -751.543 c61.355 -754.5771 59.332 -757.6113 57.3091 -760.645 c55.6348 -763.1567 55.1353 -767.0938 54.1538 -769.9297 c51.479 -777.6582 47.8032 -784.8125 46.0352 -792.8765 c43.0234 -806.6104 40.9092 -823.4678 46.6899 -836.8232 c52.3496 -849.8975 58.4204 -863.2588 67.1104 -874.6362 c71.5488 -880.4468 76.1826 -884.0557 82.6504 -887.3853 c89.8325 -891.083 97.2217 -890.646 104.8516 -892.5586 c111.5806 -894.2451 117.6504 -896.6797 124.6724 -896.6797 c131.3198 -896.6797 138.0747 -897.1172 144.6499 -896.0015 c149.6475 -895.1538 154.292 -892.2349 158.3887 -889.4111 c162.7832 -886.3823 167.4321 -883.6362 171.6118 -880.3174 c180.9531 -872.8999 188.6484 -863.4653 196.9731 -854.9639 c206.2021 -845.5396 211.582 -835.6436 213.0063 -822.4443 c215.8306 -796.2725 206.2671 -769.791 195.4546 -746.4175 c190.0332 -734.6982 184.1436 -721.5332 175.2358 -712.042 cf0 D145.1885 -819.6167 m140.1338 -833.4141 121.0503 -828.1519 110.7656 -824.396 c105.0098 -822.2939 99.3423 -819.9941 94.668 -815.9243 c92.2271 -813.7988 89.4194 -811.9785 87.5239 -809.2993 c85.9766 -807.1118 86.9609 -800.2905 87.4482 -797.7695 c88.6797 -791.4019 92.0405 -785.4751 95.9883 -780.4033 c99.5503 -775.8267 106.1963 -771.998 111.9312 -773.7334 c114.8994 -774.6318 118.4512 -773.7988 121.5313 -774.2432 c124.9707 -774.7397 127.3926 -776.5332 130.1763 -778.4722 c135.8154 -782.4009 138.4121 -788.5469 138.0479 -795.3311 c137.8154 -799.6563 133.7534 -805.0493 130.1523 -807.1309 c129.3208 -807.6113 127.27 -806.6699 126.3525 -806.3535 c125.7007 -806.1289 124.9521 -805.6782 124.4111 -805.252 C124.1289 -805.0522 123.8936 -804.8115 123.6816 -804.5493 C123.689 -804.4116 123.6953 -804.2515 123.6992 -804.0439 C124.5215 -795.7017 111.5137 -795.7813 110.6992 -804.0439 c109.665 -814.5366 123.3037 -821.4565 132.2949 -819.8892 c139.5386 -818.6265 145.0342 -812.4053 148.1792 -805.3794 C147.7783 -810.2217 146.896 -814.9561 145.1885 -819.6167 cf*UUu*u1 D0.300267 0.756374 0 0 0.941176 0.247059 1 Xa3481.1523 -953.022 m3480.7852 -949.5562 3480.2598 -946.103 3479.7246 -942.6602 c3479.1846 -939.1909 3477.8535 -936.8701 3476.2969 -933.8086 c3474.0117 -929.313 3472.0137 -924.9746 3468.666 -921.1318 c3464.9775 -916.8979 3457.4121 -913.6514 3451.9219 -913.3335 c3445.2832 -912.9492 3438.7979 -915.3853 3432.5625 -917.376 c3425.4092 -919.6597 3418.0684 -922.1455 3411.0615 -924.8071 c3400.9756 -928.6382 3392.4248 -938.2036 3385.5156 -946.1787 c3379.71 -952.8809 3375.876 -960.4443 3374.5566 -968.9492 C3364.5273 -948.3071 3343.626 -935.2319 3322.4102 -928.1587 c3301.8184 -921.2935 3270.7373 -917.7002 3255.833 -937.3296 c3248.7529 -946.6538 3246.9414 -958.6943 3246.2578 -970.0771 c3245.4941 -982.8154 3246.2402 -995.3662 3249.9141 -1007.6431 c3252.2295 -1015.3828 3255.5059 -1022.814 3259.25 -1030.0059 c3259.2988 -1030.1055 3259.3506 -1030.2026 3259.4043 -1030.2979 c3262.209 -1035.6616 3265.2676 -1040.8936 3268.3848 -1046.019 c3271.8438 -1051.7085 3276.4277 -1057.3101 3278.9336 -1063.4824 c3280.2402 -1066.7031 3281.8174 -1069.7988 3283.3662 -1072.9072 c3285.1719 -1076.5288 3286.1113 -1080.3906 3288.9961 -1083.3076 c3298.4404 -1092.8613 3306.4258 -1104.0371 3316.6992 -1112.7422 c3321.6016 -1116.8955 3327.1543 -1120.1709 3332.6484 -1123.459 c3335.2754 -1125.0313 3337.8613 -1126.6563 3340.375 -1128.4043 c3341.4395 -1129.1445 3342.4209 -1130.083 3343.458 -1130.8643 c3343.9844 -1131.2607 3345.1709 -1132.8652 3344.8984 -1131.7021 c3345.9385 -1136.1406 3350.1172 -1137.1357 3353.4082 -1135.8135 C3353.8906 -1138.5488 3355.9365 -1140.8711 3359.5625 -1140.6729 c3371.9004 -1139.9971 3380.7764 -1129.5127 3388.2998 -1120.752 c3397.2793 -1110.2979 3408.7832 -1102.1816 3418.21 -1092.0645 c3428.1279 -1081.4209 3435.9336 -1069.4067 3443.335 -1056.9424 c3451.1895 -1043.7148 3458.5322 -1030.1855 3465.1563 -1016.2998 c3471.415 -1003.1782 3478.9316 -988.6851 3481.0908 -974.2002 c3482.1426 -967.1465 3481.8984 -960.0913 3481.1523 -953.022 cf0 D3266.3359 -948.0024 m3263.4707 -951.1172 3261.7988 -954.9453 3262.8379 -958.6235 C3260.4756 -968.123 3259.7139 -978.2417 3259.2402 -988.041 C3258.5557 -980.2344 3258.9336 -972.2783 3259.6924 -964.5654 c3260.5771 -955.5688 3263.3994 -946.2813 3270.6367 -941.0264 C3268.8018 -943.0186 3267.4326 -945.4795 3266.3359 -948.0024 Cf3272.0352 -1026.3359 m3272.1572 -1025.8228 3272.2627 -1025.3066 3272.3691 -1024.7896 C3273.2949 -1027.2178 3274.2441 -1029.6416 3275.2109 -1032.0645 C3274.1221 -1030.1699 3273.0625 -1028.2607 3272.0352 -1026.3359 Cf3279.5928 -977.7075 m3279.5801 -986.6958 3279.5293 -995.7456 3278.9316 -1004.7417 C3276.4961 -996.9712 3274.5889 -989.0576 3273.7031 -980.9404 c3273.6074 -980.0601 3273.3652 -979.2554 3273.0137 -978.5361 C3273.3828 -974.6318 3273.8662 -970.7363 3274.5488 -966.8774 C3276.2578 -966.9658 3277.9932 -966.7861 3279.708 -966.3965 C3279.7324 -970.2524 3279.5977 -974.0825 3279.5928 -977.7075 cf3287.3701 -940.0566 m3286.0801 -938.3164 3284.292 -937.0928 3281.668 -936.6284 C3284.7393 -936.0244 3287.8955 -935.7744 3291.0693 -935.7734 C3289.6182 -936.9683 3288.3545 -938.4077 3287.3701 -940.0566 Cf3305.0791 -952.2705 m3305.1338 -952.4082 3305.1807 -952.5493 3305.2383 -952.6865 C3305.2813 -954.7168 3304.9648 -956.7871 3304.5313 -958.8633 C3303.5449 -958.1699 3302.3799 -957.7207 3301.1836 -957.6372 C3303.498 -956.9136 3304.8467 -954.6504 3305.0791 -952.2705 Cf3295.3438 -957.9692 m3296.4189 -958.0977 3297.5381 -958.1079 3298.6953 -958.0176 C3296.1885 -958.8784 3294.1152 -960.2549 3292.3945 -961.9814 C3292.3613 -961.4067 3292.3213 -960.8335 3292.2793 -960.2598 C3293.3145 -959.5166 3294.332 -958.7471 3295.3438 -957.9692 Cf3299.8135 -1003.1465 m3299.0586 -1005.1221 3298.3555 -1007.1172 3297.6875 -1009.1206 c3296.9316 -1011.3867 3295.8828 -1013.8945 3295.1484 -1016.3921 C3294.5459 -1017.1406 3293.9512 -1017.8955 3293.3594 -1018.6519 C3292.9316 -1017.686 3292.4834 -1016.7285 3292.0176 -1015.7773 C3293.0547 -1012.502 3293.7832 -1009.1567 3294.3359 -1005.6626 c3295.252 -999.8657 3296.6406 -993.7456 3296.8242 -987.8921 c3296.9053 -985.3008 3297.2266 -979.7134 3298.6348 -975.5166 C3299.377 -977.9443 3299.9023 -980.4224 3300.2383 -982.9385 C3299.4912 -985.7212 3298.7871 -988.5181 3298.4863 -991.4355 c3298.3086 -993.1689 3299.1914 -994.9238 3300.5361 -996.1763 C3300.376 -998.4941 3300.1289 -1000.8203 3299.8135 -1003.1465 Cf3307.6777 -1067.2461 m3307.3984 -1058.9497 3304.334 -1051.0396 3301.7607 -1042.9985 c3301.5205 -1042.249 3301.2842 -1041.4985 3301.0488 -1040.748 C3301.4912 -1040.3906 3301.9346 -1040.0313 3302.3789 -1039.6704 C3304.0488 -1039.439 3305.5527 -1038.6064 3306.4121 -1037.041 C3306.5977 -1038.5522 3306.7939 -1040.0625 3307 -1041.5723 C3307 -1050.21 L3307 -1054.9131 3308.6992 -1059.8179 3308.9795 -1064.6123 C3308.5293 -1065.4795 3308.0977 -1066.3584 3307.6777 -1067.2461 Cf3316.2881 -1094.5176 m3314.9873 -1093.1211 3313.709 -1091.6953 3312.4473 -1090.2539 C3314.2031 -1089.9727 3315.749 -1088.6465 3316.749 -1087.2715 C3316.8262 -1087.4082 3316.918 -1087.5352 3316.999 -1087.6689 C3316.1924 -1090.0938 3316.0078 -1092.3721 3316.2881 -1094.5176 Cf3326 -1039.8311 m3324.249 -1042.085 3322.4961 -1044.3369 3320.7764 -1046.6074 C3320.4707 -1044.6455 3320.1748 -1042.6816 3319.8926 -1040.7158 c3319.7734 -1039.8828 3319.6611 -1039.0479 3319.5498 -1038.2129 C3319.6807 -1035.1348 3319.8828 -1032.0762 3319.8828 -1029.2192 c3319.8828 -1027.9521 3319.9111 -1026.5684 3319.9141 -1025.1372 C3321.7051 -1023.6846 3323.5156 -1022.2534 3325.3594 -1020.8604 c3325.5703 -1020.7012 3325.7891 -1020.5542 3326 -1020.3965 C3326 -1039.8311 Lf3326 -998.9844 m3326 -1004.5508 L3325.0986 -1005.1597 3324.1904 -1005.7578 3323.2969 -1006.3794 c3321.0957 -1007.9102 3318.9336 -1009.5039 3316.7891 -1011.1235 C3316.5576 -1010.8311 3316.3086 -1010.561 3316.0439 -1010.314 C3317.707 -1007.6992 3319.1768 -1005.0342 3321.2539 -1002.6592 c3322.7646 -1000.9321 3324.374 -999.1943 3326.0225 -997.4336 C3326.0098 -997.9595 3326 -998.4795 3326 -998.9844 Cf3323.4707 -969.377 m3320.8311 -969.9141 3318.293 -971.3418 3316.2129 -973.0532 c3315.8584 -973.3452 3315.5195 -973.6582 3315.1826 -973.9736 C3315.2715 -972.1392 3315.3926 -970.3208 3315.8223 -968.5713 c3316.1904 -967.0732 3316.541 -965.5381 3316.8574 -963.9844 C3316.8945 -963.9971 3316.9297 -964.0137 3316.9678 -964.0259 c3322.084 -965.6729 3326.8457 -963.4937 3328.5479 -958.4409 c3328.5986 -958.291 3328.6348 -958.1387 3328.6758 -957.9873 C3329.7764 -959.1099 3330.8428 -960.2661 3331.8926 -961.4375 C3328.8848 -963.7241 3326.2334 -966.6797 3323.4707 -969.377 Cf3338.127 -1070.7827 m3338.0732 -1071.043 3338.0186 -1071.3086 3337.9639 -1071.5698 C3337.6689 -1071.3433 3337.3633 -1071.1265 3337.0322 -1070.9326 c3336.9434 -1070.8804 3336.8555 -1070.8418 3336.7666 -1070.793 C3337.4121 -1067.7314 3337.8584 -1064.6201 3338.1602 -1061.4775 C3338.4512 -1062.9092 3338.8701 -1064.2705 3339.459 -1065.5298 C3338.9346 -1067.2021 3338.5068 -1068.9536 3338.127 -1070.7827 cf3344.666 -980.9404 m3344.1904 -985.0542 3343.9473 -989.1699 3343.8447 -993.2881 C3343.7852 -993.3237 3343.7256 -993.3604 3343.666 -993.396 C3343.3779 -992.1621 3343.0752 -990.9316 3342.7402 -989.7075 c3342.0547 -987.2017 3340.4912 -985.79 3338.6846 -985.272 C3338.5938 -984.6641 3338.4805 -984.0518 3338.3496 -983.4385 C3339.9814 -981.2803 3341.4805 -979.0532 3342.7773 -976.7437 C3343.4434 -977.7827 3344.1406 -978.8364 3344.8779 -979.8892 C3344.7793 -980.2314 3344.707 -980.583 3344.666 -980.9404 cf3370.8145 -981.1011 m3369.2695 -985.0098 3367.8828 -988.9824 3366.7148 -993.0117 C3366.5557 -992.6021 3366.4004 -992.1904 3366.2393 -991.7817 C3367.7744 -990.1045 3368.5732 -987.6816 3367.9297 -985.5093 c3367.2803 -983.3164 3366.3477 -981.2476 3365.2266 -979.2705 C3366.6582 -981.2124 3368.7988 -981.6563 3370.8145 -981.1011 Cf3357.6904 -1036.1978 m3359.7441 -1034.2056 3361.8203 -1032.2378 3363.917 -1030.292 C3364.4844 -1030.7485 3365.125 -1031.0654 3365.7988 -1031.2627 C3365.7324 -1031.9756 3365.6807 -1032.6929 3365.6572 -1033.417 c3365.6387 -1033.9966 3365.7051 -1034.5415 3365.8281 -1035.0566 C3365.6738 -1035.6836 3365.5137 -1036.3096 3365.3652 -1036.937 c3365.1191 -1037.9717 3364.8867 -1039.0083 3364.6572 -1040.0459 C3363.7461 -1041.5518 3362.8115 -1043.0386 3361.8135 -1044.4712 c3360.1816 -1046.8135 3358.5117 -1049.1396 3356.8457 -1051.4717 C3357.4746 -1046.4258 3357.665 -1041.3066 3357.6904 -1036.1978 Cf3357.3516 -1017.2178 m3357.3594 -1017.2031 3357.3662 -1017.1885 3357.374 -1017.1738 C3357.5537 -1017.6069 3357.7363 -1018.0381 3357.9189 -1018.4702 C3357.4121 -1018.9141 L3357.3926 -1018.3486 3357.3721 -1017.7832 3357.3516 -1017.2178 Cf3364.4463 -977.9238 m3364.459 -977.9541 3364.4766 -977.978 3364.4893 -978.0083 C3362.0586 -974.0947 3358.874 -970.5654 3355.5313 -967.2529 C3354.8066 -965.1807 3354.0098 -963.1025 3353.1592 -961.0337 C3357.8516 -965.9331 3361.707 -971.5898 3364.4463 -977.9238 cf3367.4258 -1123.6934 m3366.6836 -1124.3223 3365.9326 -1124.9395 3365.1602 -1125.5244 c3363.4678 -1126.8066 3361.6855 -1127.5566 3359.5625 -1127.6729 c3358.7646 -1127.7168 3358.0449 -1127.877 3357.3984 -1128.127 C3356.1719 -1123.209 3350.793 -1119.9941 3346.9365 -1117.1787 c3346.5918 -1116.9268 3346.2363 -1116.6875 3345.8867 -1116.4414 C3346.623 -1116.0078 3347.3105 -1115.4619 3347.9785 -1114.8535 C3349.3398 -1114.5918 3350.6064 -1113.9609 3351.5293 -1112.9629 C3353.6406 -1115.0918 3355.9199 -1117.0527 3358.3809 -1118.7939 c3362.1055 -1121.4297 3365.9902 -1119.0635 3367.418 -1115.6172 C3368.0732 -1115.6572 3368.752 -1115.5693 3369.4443 -1115.3271 C3367.9746 -1118.0215 3366.9707 -1120.8555 3367.4258 -1123.6934 Cf3371.335 -1006.2852 m3371.1406 -1005.6152 3370.9238 -1004.9507 3370.7158 -1004.2842 C3371.458 -1004.5635 3372.208 -1004.728 3372.9609 -1004.8008 C3372.4102 -1005.29 3371.8691 -1005.7861 3371.335 -1006.2852 Cf3393.8623 -969.9087 m3391.1406 -973.6211 3388.6387 -977.4658 3386.293 -981.4194 C3385.4092 -982.3066 3384.5176 -983.186 3383.6182 -984.0571 C3385.2139 -980.1499 3386.9727 -976.3066 3388.8652 -972.5269 c3390.584 -969.0962 3392.3066 -965.7842 3394.627 -963.126 C3394.2666 -965.3545 3394.0723 -967.6592 3393.8623 -969.9087 Cf3407.5322 -948.3955 m3406.8418 -947.542 3405.9609 -946.7217 3404.8262 -945.9404 c3404.6152 -945.7949 3404.3955 -945.6699 3404.1738 -945.5552 C3404.9795 -944.7979 3405.7871 -944.0444 3406.5908 -943.2964 c3407.9648 -942.0181 3409.334 -940.96 3410.7236 -940.0527 C3409.5488 -942.7832 3408.4863 -945.5742 3407.5322 -948.3955 Cf3421.9531 -1049.6514 m3420.9824 -1051.4146 3420.041 -1053.1895 3419.1094 -1054.9683 C3417.9336 -1054.54 3416.6064 -1054.4121 3415.3174 -1054.5859 C3415.3105 -1054.2119 3415.3145 -1053.8398 3415.3008 -1053.4658 C3417.9727 -1050.3564 3420.3496 -1046.9502 3422.4629 -1043.3633 C3422.7227 -1044.3506 3423.2402 -1045.2397 3423.9258 -1045.9839 C3423.2773 -1047.2109 3422.623 -1048.4355 3421.9531 -1049.6514 cf3425.8379 -936.0952 m3425.4619 -936.5391 3425.0889 -936.9854 3424.7129 -937.4297 C3424.4717 -936.3164 3423.9072 -935.354 3423.1357 -934.585 C3423.5078 -934.4541 3423.8828 -934.3223 3424.2637 -934.187 c3425.7617 -933.6558 3427.2539 -933.123 3428.7471 -932.5928 C3427.7734 -933.7749 3426.8076 -934.9512 3425.8379 -936.0952 cf3446.3193 -953.8335 m3444.998 -955.3882 3443.5322 -956.7505 3442.4141 -957.4849 c3442.3281 -957.541 3442.1162 -957.6265 3441.8887 -957.7153 C3441.8457 -957.6118 3441.8008 -957.502 3441.7549 -957.375 c3441.6719 -957.1465 3441.6045 -956.915 3441.5449 -956.6821 C3442.5869 -954.1338 3443.6934 -951.6084 3444.7969 -949.083 C3445.5537 -947.9316 3446.292 -946.7676 3447.0137 -945.5923 C3448.0527 -945.5737 3449.1152 -945.8706 3449.4551 -946.5815 C3448.3691 -948.978 3447.3262 -951.3975 3446.3193 -953.8335 Cf3463.4395 -987.7969 m3461.3379 -993.2339 3459.0615 -998.6006 3456.6514 -1003.9082 C3455.832 -1003.1792 3454.8242 -1002.6265 3453.7354 -1002.3198 C3457.5313 -995.5562 3461.5117 -988.8843 3465.5039 -982.2349 C3464.8613 -984.082 3464.1611 -985.9292 3463.4395 -987.7969 cf3463.1025 -960.8667 m3461.8916 -962.937 3460.668 -965.0034 3459.4414 -967.0688 C3458.334 -968.7803 3457.1855 -970.4658 3456.0176 -972.1494 c3453.5576 -975.6963 3451.8809 -979.3804 3449.7197 -983.0391 C3450.6631 -979.5879 3451.7246 -976.1416 3452.8877 -972.7134 C3457.8057 -963.874 3462.3252 -954.687 3464.4873 -944.8848 c3465.498 -940.3047 3461.4277 -936.5635 3457.584 -936.5811 C3456.5166 -935.6772 3455.2832 -934.8784 3453.8242 -934.2451 c3453.6875 -934.186 3453.5537 -934.1357 3453.418 -934.0801 C3454.4443 -932.0493 3455.4297 -930.0073 3456.3789 -927.9585 C3457.7695 -928.6587 3459.002 -929.6006 3459.9248 -930.8052 c3461.3877 -932.7144 3462.4375 -934.96 3463.4912 -937.1084 c3464.5898 -939.3486 3466.5146 -941.9946 3466.918 -944.4399 c3467.6455 -948.8452 3468.2295 -953.2539 3468.5518 -957.6875 C3466.5254 -957.6113 3464.4717 -958.5254 3463.1025 -960.8667 cf*U139.376 -1862.5527 m139.376 -1866.0527 142.3325 -1869.1094 145.876 -1869.0527 c149.6455 -1868.9922 152.0317 -1867.6465 154.6704 -1865.0488 c158.4727 -1861.3066 156.1396 -1856.2354 152.4009 -1854.5449 C152.4263 -1849.1328 152.4502 -1843.7188 152.356 -1838.3096 c152.2515 -1832.3066 150.3735 -1825.127 153.5884 -1819.6533 c157.8433 -1812.4092 146.6045 -1805.8701 142.3628 -1813.0928 c138.2778 -1820.0479 138.7139 -1828.0234 139.2261 -1835.7832 c139.8115 -1844.6543 139.376 -1853.666 139.376 -1862.5527 cf257.1572 -1836.9922 m259.1982 -1845.1191 271.7358 -1841.6709 269.6924 -1833.5371 c265.5869 -1817.1914 260.8789 -1801.0596 254.9985 -1785.2588 c252.1021 -1777.4746 239.5332 -1780.8408 242.4634 -1788.7139 c248.3433 -1804.5156 253.0513 -1820.6475 257.1572 -1836.9922 cf388.2979 -1879.6133 m385.874 -1869.6348 381.6411 -1859.2871 371.6592 -1854.8408 c364.0713 -1851.4609 357.4521 -1862.6602 365.0977 -1866.0654 c374.8618 -1870.415 375.9497 -1883.0908 377.2407 -1892.4082 c378.1753 -1899.1563 380.8984 -1905.4189 380.7349 -1912.3203 c380.5498 -1920.1123 378.7734 -1927.7715 378.6431 -1935.5996 c378.4243 -1948.708 369.855 -1960.584 364.1626 -1971.9229 c360.8491 -1978.5225 356.4487 -1982.5811 350.873 -1987.2568 c345.29 -1991.9385 339.7173 -1996.5254 333.5376 -2000.4102 c327.249 -2004.3643 320.9175 -2008.1406 314.7197 -2012.2715 c308.3833 -2016.4961 301.7734 -2019.3047 294.7568 -2022.249 c281.7651 -2027.7002 268.5728 -2030.6338 254.4712 -2031.0234 c225.3999 -2031.8262 197.6162 -2020.8154 173.7529 -2004.9014 c165.6011 -1999.4648 157.5728 -1995.0537 150.4722 -1988.0996 c146.7026 -1984.4072 143.0083 -1980.6348 139.2773 -1976.9043 c136.2925 -1973.9189 134.0801 -1970.3164 130.6772 -1967.7568 c123.2085 -1962.1377 117.2661 -1955.5869 111.6089 -1948.1299 c106.6953 -1941.6533 100.4302 -1935.8027 97.5679 -1927.9951 c94.708 -1920.1914 82.1411 -1923.5615 85.0327 -1931.4502 c89.4199 -1943.4219 98.8682 -1953.1191 106.7686 -1962.8828 c110.8867 -1967.9727 115.8716 -1973.9775 121.605 -1977.3174 c124.0469 -1978.7402 125.52 -1980.8721 127.2632 -1983.0332 c129.7788 -1986.1523 132.8516 -1988.8633 135.6826 -1991.6934 c140.8691 -1996.8809 146.001 -2001.9932 151.8901 -2006.3975 c158.2031 -2011.1182 165.1182 -2014.8613 171.7446 -2019.1006 c184.0195 -2026.9521 197.3721 -2033.1836 211.2383 -2037.6465 c237.6099 -2046.1328 267.4731 -2046.6611 293.4932 -2036.6914 c299.7358 -2034.2998 305.812 -2031.4902 311.9873 -2028.9346 c319.2383 -2025.9336 325.7739 -2020.502 332.3013 -2016.1504 c338.1045 -2012.2813 344.1885 -2009.1504 349.7539 -2004.8545 c355.5283 -2000.3984 361.001 -1995.5732 366.6772 -1990.9941 c371.7651 -1986.8906 374.7559 -1979.8936 377.2949 -1974.0918 c379.7163 -1968.5596 383.0859 -1962.9248 386.0537 -1957.666 c392.8965 -1945.5391 391.6055 -1930.5488 393.2959 -1917.1797 c394.1592 -1910.3535 393.2778 -1903.9941 391.6484 -1897.3486 c390.2007 -1891.4443 389.7256 -1885.4922 388.2979 -1879.6133 cfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF