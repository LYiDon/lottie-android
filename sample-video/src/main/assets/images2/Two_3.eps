%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.1.0%%For: (Evgeny Bakal) ()%%Title: (Two 3.eps)%%CreationDate: 28.09.18 2:50%%Canvassize: 16383%%BoundingBox: 3 -2151 3640 -8%%HiResBoundingBox: 3.32373 -2150.2373 3639.5039 -8.66553%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1920.5 -1080.5 1920.5 -1080.5%AI3_TileBox: 1524 -1386 2316 -774%AI3_DocumentPreview: Header%AI5_ArtSize: 3840 2160%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -3380 1665 0.1667 1831 940 18 0 0 6 130 0 0%AI5_OpenViewLayers: 7%%PageOrigin:1520 -1380%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 76 8%%BeginData: 4296 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD08FFAFA9FD24FF85FD59FF61FD25FF8585AFFD56FFA9AFFD1CFF%85FD09FFA985FD56FFA985FD1CFF85A9FD09FF5BFD56FF85AFFD1CFF61FD%09FF85AFFD57FF61FD19FFA98561AFFD08FFAF61A9FD56FF85AFFD1AFF5B%FD0BFFA985FD55FF8585FD06FFA9AFFD13FFA985FD0BFF84FD55FFA9A9FD%05FFAF85FD14FF85FD0CFFAFA9FD54FFA961FD05FFA9A9FD12FFA961AFFD%0CFF5BFD55FFAF85FD05FF85FD13FFAFFD0DFF61AFFD54FFAF5AFD06FFA9%5A855BFD1DFF85FD56FF85AFFD08FF85A9FD73FFA985FD09FFAF85FD73FF%AFA9FD09FFA985FFFF85FFFFAF61FD6CFF85AFFD0AFF5A856185848561FD%6DFF85FD0CFFA9FD72FF85FD6DFF3785FD10FFAF61FD05FFAFFD65FF85AF%85FD11FFA95A8585855A8585FD64FF85A9A985FD12FFAFAFA9FFFF85AFFD%63FFA98585FD18FFA985A9FF85AFFD60FFA9FD1AFFAF8585A985FD09FF85%AFFD74FFA961FD07FFA985A9FD75FFAF61FD05FF8585FD78FFAFFD048561%A9FD7BFFAFAFAFFDFCFFFD81FF6185FD7DFFAF8585FD4FFFAF5BFD2CFF5A%FF85AFFD4EFF85A95AFD2BFFAFFF85A9FD4DFFAF85FF85FD2BFF858585FD%4FFF61AF85FD7EFF85FD0EFFAF85FD07FF85FD76FF85AFFD06FFA9AFFDFC%FFFDFCFFFDFCFFFD89FF37FD08FFCACBCACAA1FD04CAFFCAFD70FFCACAFD%07C3CAC4C4C3CAFD05C3CACAFD6AFFC3C3C3C9C2C9A6CEC9CEA7FD05CFC9%CAC9C9C3C3BCC3CAFD67FFCEC9CEC9CFCFFFFFFFCFCFC9CFC9CEC9CFC9CF%C9CECACFC4C3BDCAFD65FFA8FFCFFFCACFCECEC9CFC9CFCECFCECFCFFFFF%FFCACEA6C9A7CABDBDA1FD63FFCFCECFCFFFCFFD07FFA9FFFD04CFCEFFFF%FFCFCFC9CEC9CABCCAFD61FFCFFFAEFFFD04AE83AE898A366084AEAEFFFF%CFC9CECECFFFFFCAC9A7C9BCC3FD60FFFD0489AE89FD04AECF8485AE8589%8989AEAEFFFFFFCFCFCECFFFFFC9C9C2C3CAFD5EFFAEFD0AFFA9A9FF85FF%FFFF83895F8AAEFFFFFFC9CECFFFA8C9C2BDA1FD5DFFFD05AF8BAF8BAF8B%AF618B8585FD06FF8A8989FD04FFCFCEFFFFCEC9C3C3FD5CFF8BAFAFFFFD%08AF616185AF858BA9FD04FFAE898989FFFFFFC9CFFFC9A7CABCCAFD5BFF%CBFFCBFFFD05CBFD07FFAFAF85AFAFFFFFFFAE8965FFFFFFCECFFFCFC9FF%BCCAFD59FFA3CBA3CBA2CBA3CBA3CBA3C5A2CBA3CBA9FFFFFFA88B85FD05%FF5E8AFFFFC9CFFFC9A6FFBCC3FD67FFCBCBC5CBFFFFFFAF85AFFD04FF89%AEFFFFCECFFFCFC9FFBCCAFD69FFA3C5A3CBFFFF858BAFFFFFFF89AEFFFF%CECFFFC9C9FFBCFD6CFFA3C5CBFFAF8BAFFFFFFF65AEFFFFCECFFFC9CFCA%C3FD6CFFA9C5A3FFAF8B85FFFFFF5EFFFFFFC9FFCBC8CABDCAFD6DFFCBA3%FFFFAF8BFFFFAE89FFFFFFCEFFFFC9CABDCAFD6DFFCB9DFFFFAF85FFFF89%AEFFFFCFC9FFCAC9CABCCAFD6EFF9DFFFFAF85FFFF89AEFFFFCFCEFFC9CE%CABDFD6EFFCB9CFFFF8B84FFAE65AEFFFFCEC9FFA6CFC3C3FD6EFFCBA3FF%FFAFAFFFAE89FFFFFFCECFFFC8FFC3CAFD6EFFCBA9FFFF8BAFFF83AEFFFF%CFCEFFCFA6FFBCFD6FFFC5FFFFAF8BFFFF65FFFFFFCFCFFFC9CFCABCFD6E%FFA9C5FFFF84AFFFAE5FFFFFFFC9CFCAC9FFC3C3FD6EFFC5FFFFFF8BFFFF%8AAEFFFFFFCEFFC8FFFFBDCAFD6EFFA3FFFFAF85FFAE89FFFFFFCFCFCFA7%FFCABCFD6EFFCBCBFFFF8BAFFF89AEFFFFCFCFFFC9FFFFC3CAFD6DFFA9CB%FFFFA88BFFFF5EFFFFFFC9FFC9CFFFFFBCFD6EFFC5FFFFFF8BFFFFAE89FF%FFCFCFFFC8FFFFC3C3FD6DFFCBCBFFFFAF85FFFF89AEFFCFCFFFC9CAFFCA%BDFD6DFFCBCBFFFFFF8BFFFF8A89FFFFCEFFCFC9FFFFBCCAFD6DFFA9FFFF%FFA8FFFFFF83FFFFFFCAFFC9FFFFCACAFD4AFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Fade To Edge Black)(Fade To Edge Black) 0 3 Bd[0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br[0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Neon Rings Vignette)(Neon Rings Vignette) 1 17 Bd[0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B5B6B8B9BABDBEC0C1C3C4C5C7C8CACBCDCFD0D2D3D4D5D7D7D8DADBDBDDDEDFE0E2E3E4E5E6E7E7E8EAEAEBECECEDEDEEEEEEEFEFF0F0F1F1F1F2F2F2F2F3F3F2F3F4F3F3F4F4F4F4F5F4F4F5F5F4F4F4F4F4F4F4F3F3F4F4F3F3F3F3F2F3F2F2F2F2F2F2F2F1F1F0F1F0EFF0EFEEEEEEEEEDEDEDECECECECEBEAEBEAEAEAE9E8E8E8E7E7E7E6E6E5E5E5E4E3E3E3E2E2E1E1E0E0DFDFDFDEDDDDDCDCDBDBDAD9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D0D0D0CFCECECDCDCCCCCBCACAC9C8C7C7C6C5C5C4C4C3C3C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B8B7B7B6B5B5B4B3B2B2B1><B0B0B1B1B1B0B1B1B1B2B2B2B1B3B3B2B2B4B3B2B4B4B3B3B5B4B4B6B5B4B3B5B5B4B6B6B5B4B6B5B5B4B6B5B4B6B5B4B4B5B5B4B6B5B4B3B4B4B3B4B3B2B1B3B1B0AFB1B0AFB0AFAEADAFADACAEADABAAACAAA9AAA9A8A7A8A7A5A4A5A4A3A4A3A1A0A1A09E9F9E9D9B9C9B999A9997969795949293929091908E8D8E8C8A8B8A888787868485838280817F7D7B7C7A797977767475737172706F6D6D6C6A6A69676565646260615F5D5D5C5A5858565555535250504E4D4D4B4A4848474544444241413F3E3C3C3B393A3837353634323331302E2F2D2C2A2B2928292726242524><A5A5A3A3A3A3A2A1A19F9F9E9E9C9C9C9B999998979796969594949292929290908F8D8D8C8C8A8A8A8A88888886868686848483828281817F7F7F7D7C7C7C7A797979777776757474737271716F6F6E6E6C6C6C6A6A696967676665646363616160605E5D5D5C5B5B5A58585756555554535251514F4E4E4C4B4B4A484847454544444241413F3E3E3D3B3B3A3A3837373534333331302F2E2D2D2C2A2A292727262624232222201F1F1D1C1B1B191817151514131211110F0E0E0D0B0B0A0908070705050404030202000000000000000000000000000000000000000000000000><D5D4D3D2D1D0CFCECDCCCBC9C8C7C5C4C3C2C0BFBDBCBAB8B7B5B3B1AFADABA9A8A6A4A29F9D9B99979593918F8D8B89878583817E7C7A79777573716F6D6B6968666462605E5C5B5957555352504E4C4B494846444342403F3D3C3A383736343332302F2E2C2B2A29272625242221201F1E1D1C1B1A191716151514131211100F0E0E0D0C0B0B0A090908080706060505040404030303030202020202010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><1313131313131212121212121212121212121111111111111111111111111010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0909090909090909090909090808080808080808080808080707070707070707070707070606060606060606060606050505050505050505050505040404040404040404040404030303030303030303030303020202020202020202020202010101010101010101010101000000000000><0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F40414142434344454646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF>4 %_Br<B1B1B0B0B0B0B0B0AFAFAFAFAEAEAEAEADADADADADACACACABABAAAAAAA9A9A8A8A7A7A7A6A6A6A6A5A4A4A4A3A3A3A3A2A2A2A1A1A1A09F9F9E9E9E9D9D9D9C9B9B9A9A99989897969695959494939292919190908F8E8E8D8C8C8B8B8A898988888786868584848382828180807F7E7D7C7C7B7A797878777675747373727170706F6E6D6C6B6B6A69696867666564636261605F5E5D5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484747464544434241403F3F3E3D3C><2424222222222020211F1F201E1E1E1E1C1C1C1B1B1B1919191A17171816161614141414121213111212101010100E0E0F0D0D0D0D0B0B0C0A0A0B0909090A080909080808070708080607070506060505050504040403040403040404030304020303030202030202020101010201010100010100010101010101000101000001010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001010001>00<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC><AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6><EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB>4 %_Br<3C3D3E3F3F40414243444546474748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5D5E5F60616263646566676869696A6B6B6C6D6E6F707071727373747576777878797A7B7C7C7D7E7F808081828283848485868687888889898A8B8B8C8C8D8E8E8F90909191929293949495959696979898999A9A9B9B9C9D9D9D9E9E9E9F9FA0A1A1A1A2A2A2A3A3A3A3A4A4A4A5A6A6A6A6A7A7A7A8A8A9A9AAAAAAABABACACACADADADADADAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1><0100010100000100000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010100000101000101010101010001010001010102010101020202030202030303020403030404040304040304040405050505060605070706080807070808080909080A0909090B0A0A0C0B0B0D0D0D0D0F0E0E10101010121211131212141414141616161817171A1919191B1B1B1C1C1C1E1E1E1E201F1F212020222222222424>00<BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF>4 %_Br<B1B2B2B3B4B5B5B6B7B7B8B9BABABBBCBCBDBEBEBFBFC0C1C1C2C3C3C4C4C5C5C6C7C7C8C9CACACBCCCCCDCDCECECFD0D0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9DADBDBDCDCDDDDDEDFDFDFE0E0E1E1E2E2E3E3E3E4E5E5E5E6E6E7E7E7E8E8E8E9EAEAEAEBEAEBECECECECEDEDEDEEEEEEEEEFF0EFF0F1F0F1F1F2F2F2F2F2F2F2F3F2F3F3F3F3F4F4F3F3F4F4F4F4F4F4F4F5F5F4F4F5F4F4F4F4F3F3F4F3F2F3F3F2F2F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEAEAE8E7E7E6E5E4E3E2E0DFDEDDDBDBDAD8D7D7D5D4D3D2D0CFCDCBCAC8C7C5C4C3C1C0BEBDBAB9B8B6B5B4><24252426272928292B2A2C2D2F2E3031333234363537383A393B3C3C3E3F4141424444454748484A4B4D4D4E5050525355555658585A5C5D5D5F61606264656567696A6A6C6D6D6F707271737574767779797A7C7B7D7F818082838584868787888A8B8A8C8E8D8E9091909293929495979697999A999B9C9B9D9E9F9EA0A1A0A1A3A4A3A4A5A4A5A7A8A7A8A9AAA9AAACAAABADAEACADAFADAEAFB0AFB0B1AFB0B1B3B1B2B3B4B3B4B4B3B4B5B6B4B5B5B4B4B5B6B4B5B6B4B5B5B6B4B5B6B6B4B5B5B3B4B5B6B4B4B5B3B3B4B4B2B3B4B2B2B3B3B1B2B2B2B1B1B1B0B1B1B1B0B0><00000000000000000000000000000000000000000000000002020304040505070708090A0B0B0D0E0E0F111112131415151718191B1B1C1D1F1F202222232426262727292A2A2C2D2D2E2F3031333334353737383A3A3B3B3D3E3E3F414142444445454748484A4B4B4C4E4E4F51515253545555565758585A5B5B5C5D5D5E606061616363646566676769696A6A6C6C6C6E6E6F6F717172737474757677777979797A7C7C7C7D7F7F7F81818282838484868686868888888A8A8A8A8C8C8D8D8F909092929292949495969697979899999B9C9C9C9E9E9F9FA1A1A2A3A3A3A3A5A5><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010202020202030303030404040505060607080809090A0B0B0C0D0E0E0F101112131415151617191A1B1C1D1E1F20212224252627292A2B2C2E2F303233343637383A3C3D3F404243444648494B4C4E5052535557595B5C5E6062646668696B6D6F71737577797A7C7E81838587898B8D8F91939597999B9D9FA2A4A6A8A9ABADAFB1B3B5B7B8BABCBDBFC0C2C3C4C5C7C8C9CBCCCDCECFD0D1D2D3D4D5><00000000000001010101010101010101010102020202020202020202020203030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606060707070707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010111111111111111111111111121212121212121212121212131313131313><AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A59585857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B3B2B0B0AEADABAAA9A9A7A6A4A4A2A2A0A09E9E9D9D9C9C9A9A989896969595939391918F8F8C8C8988868684848383818180807E7F7D7D7C7B7A7A79797777757574747272717170706F6F6E6E6D6D6C6C6B6B6A6A696968686767666665656464636462626162616160605F5F5E5E5D5D5C5C5B5C5A5A5959585857575656555554545353525150504F4F4E4E4D4C4B4B4A4A49494747464645444343424140403F3E3D3D3C3B3A39383837363534333231302F2E2D2C2B2A282726242322201F1E1C1B1A181716141312100F0E0C0B0A080706050403020000><B0B1B2B3B3B4B5B6B8B8BABABCBDBFC0C2C3C5C4C5C5C6C6C7C7C8C8C9C9CBCBCDCCCECFD1D1D3D5D7D7D9DBDDDEDFE0E0E0E1E2E3E3E4E3E4E5E6E6E8E8EAEAEBECEDEEEFEFEFEFF0F1F1F2F3F2F2F2F3F3F4F4F4F4F5F5F6F6F7F7F6F7F7F7F8F8F9F8F8F9F9FAFAFAFAFAFBFBFBFBFCFCFBFCFCFCFCFDFDFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F2F2F1F1><A5A5A3A3A3A3A1A19FA09FA09F9F9E9E9D9D9C9D9C9C9B9B9A9A9A9A999998989798979796979596949594949394939393949293929291929192909190908F908F908E8F8E8F8E8F8E8F8D8E8D8E8D8E8C8D8B8C8B8C8B8C8A8B8A8B8A8B898A898A888A8889888887888788868786868586858684858384838482838182808180807F7F7E7E7D7D7C7D7B7C7A7B797A787977787677757674757373717270706F6F6D6E6C6D6B6B696A686866666464626260615F5F5D5D5B5B595A57575454525250504E4E4B4B49494646444441413F3F3D3D3A3A383836363434><D5D5D4D3D2D2D1D1D0CFCECECDCDCCCBCACAC9C9C7C7C5C5C4C3C2C1C0BFBDBDBBBAB9B8B6B6B4B3B1B0AFAEACABA9A8A6A5A3A2A0A09D9D9B9A9796949391908E8D8B8A8887858482817F7E7C7A7877757472716F6E6C6B696866656362605F5D5C5A595756545351504F4E4C4B49484646444341403E3D3C3B39383736343332312F2E2D2C2A2928272525232221201F1E1D1C1A1A181816161414131211100F0F0E0D0C0B0A0A09090807070606050404030302020202010101010101000000000000000000000000000000000000000000000000000000000000><131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F101010101010101111111111111111121212121212121313131313131314141414141414141515151515151516161616161616171717171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F202020202020202121212121212122222222222222222323232323232324242424242424252525252525252526262626262626272727272727272828282828282828292929292929292A2A2A2A><0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7B7B>4 %_Br<0000000000000000000101010101010101010101010101010102020202020202020202020202030202020304030404040404050505050505050505060606060606060606070707070707070809090909090909090A0A0A0A09090A0A0B0B0B0B0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0D0D0D0D0E0E0E0E0E0E0E0E0E0E101010101011111111><F1F1F0EFEFEEEDEDECECEBEBEAE9E8E8E7E6E6E5E4E3E3E2E1E0DFDFDEDDDDDCDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBCBBBAB9B7B6B5B4B3B2B1B0AEADACAAA9A8A6A5A3A2A19F9E9D9B9A999796949391908E8D8B8A888786848382807E7D7B7A787776747372706F6E6C6B6A686765646261605E5D><343233302E2F2D2E2B292A2826272523232120201F1F1E1C1D1B1A1A1917181617151314131112100F100E0F0D0C0D0C0B0C0B0A0B0A090A090908070807060605040505060504050404040303040304030203020203020102020102010202010101000100000000010000000000000000000000000000000000000000000000000000000000>0<EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6><2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF><7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F9091919293939495959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCDCECFCFD0>4 %_Br<1111111110101010100E0E0E0E0E0E0E0E0E0E0D0D0D0D0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0B0B0B0B0A0A09090A0A0A0A090909090909090908070707070707070606060606060606060505050505050505050404040404030403020202030202020202020202020202020201010101010101010101010101010101000000000000000000><5D5E606162646567686A6B6C6E6F707273747677787A7B7D7E808283848687888A8B8D8E909193949697999A9B9D9E9FA1A2A3A5A6A8A9AAACADAEB0B1B2B3B4B5B6B7B9BABBBCBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDCDDDDDEDFDFE0E1E2E3E3E4E5E6E6E7E8E8E9EAEBEBECECEDEDEEEFEFF0F1F1><0000000000000000000000000000000000000000000000000000000000010000000001000101010202010201020201020302020302030403040303040404050405060505040506060708070809090A090A0B0A0B0C0B0C0D0C0D0F0E100F1012111314131517161817191A1A1B1D1C1E1F1F2020212323252726282A292B2E2D2F2E30333234>0<E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEE><AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A><D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A8988888787868585848383828181807F7F7E7E7D7C7C7B>4 %_Br<0000020304050607080A0B0C0E0F101213141617181A1B1C1E1F202223242627282A2B2C2D2E2F30313233343536373838393A3B3C3D3D3E3F40404142434344454646474749494A4A4B4B4C4D4E4E4F4F5050515253535454555556565757585859595A5A5C5B5C5C5D5D5E5E5F5F606061616261626264636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727274747575777779797A7A7B7C7D7D7F7E8080818183838484868688898C8C8F8F919193939595969698989A9A9C9C9D9D9E9EA0A0A2A2A4A4A6A7A9A9AAABADAEB0B0B2B3B4><F1F1F2F2F3F3F3F4F4F4F4F5F5F5F5F6F6F6F6F7F7F7F7F7F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFDFDFCFCFCFCFBFCFCFBFBFBFBFAFAFAFAFAF9F9F8F8F9F8F8F7F7F7F6F7F7F6F6F5F5F4F4F4F4F3F3F2F2F2F3F2F1F1F0EFEFEFEFEEEDECEBEAEAE8E8E6E6E5E4E3E4E3E3E2E1E0E0E0DFDEDDDBD9D7D7D5D3D1D1CFCECCCDCBCBC9C9C8C8C7C7C6C6C5C5C4C5C3C2C0BFBDBCBABAB8B8B6B5B4B3B3B2B1B0><3434363638383A3A3D3D3F3F41414444464649494B4B4E4E50505252545457575A595B5B5D5D5F5F616062626464666668686A696B6B6D6C6E6D6F6F707072717373757476757776787779787A797B7A7C7B7D7C7D7D7E7E7F7F8080818082818382848384838584868586858686878688878887888889888A888A898A898B8A8B8A8B8A8C8B8C8B8C8B8D8C8E8D8E8D8E8D8F8E8F8E8F8E8F8E908F908F909091909291929192929392949393939493949495949695979697979897989899999A9A9A9A9B9B9C9C9D9C9D9D9E9E9F9FA09FA09FA1A1A3A3A3A3A5A5><000000000000000000000000000000000000000000000000000000000000010101010101020202020303040405060607070809090A0A0B0C0D0E0F0F101112131414161618181A1A1C1D1E1F2021222325252728292A2C2D2E2F31323334363738393B3C3D3E40414344464648494B4C4E4F505153545657595A5C5D5F606263656668696B6C6E6F7172747577787A7C7E7F8182848587888A8B8D8E9091939496979A9B9D9DA0A0A2A3A5A6A8A9ABACAEAFB0B1B3B4B6B6B8B9BABBBDBDBFC0C1C2C3C4C5C5C7C7C9C9CACACBCCCDCDCECECFD0D1D1D2D2D3D4D5D5><EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413><2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A191919191919191818181818181818171717171717171616161616161615151515151515141414141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C><7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B4B5B4B4B4B5B5B4B4B6B6B6B5B7B7B7B7B9B9B9BBBBBBBABCBCBCBCBEBDBDBCBEBEBEBEBFBFBFBFC0C1C0C2C2C1C1C2C2C2C2C3C3C2C2C3C3C3C2C3C3C3C4C4C3C3C4C4C3C3C4C3C3C2C4C3C3C2C3C2C2C1C2C1C0C2C1C0BFC0C0BFBFBFBFBEBDBDBDBCBBBCBBBABABAB9B8B8B8B6B6B6B5B4B3B4B2B1B0B0AFAEADADACAAAAA9A8A6A6A5A3A2A2A09F9D9D9C9A989896><B0B2B1B3B3B5B5B7B8B9B9BCBEBEC0C0C2C2C4C4C6C6C8CACACCCCCECDCFCFD0D0D1D3D3D5D4D6D5D7D7D8D8DADBDBDCDCDDDCDEDDDEDEDFE0DFE1E0E1E1E2E1E2E1E3E4E3E4E3E4E3E4E3E4E4E5E4E5E6E4E5E4E5E4E5E4E5E4E5E5E4E5E4E5E4E4E3E4E3E3E4E3E3E2E3E1E2E1E1E0E0E1DFE0DEDFDEDEDDDDDCDCDDDBDBDADAD9D9D8D8D7D7D7D6D6D4D4D3D3D2D2D1D1><A5A3A3A2A2A0A09E9E9C9C9A9898969594939191908F8E8C8C8A898887868584838281807F7E7D7C7B7B797978777675747373727170706F6D6D6C6B6A6A69686766656463626160605E5E5C5C5B5A595857565554535251504F4E4D4C4A4A48474645444342403F3D3C3B3A383736353331302E2E2C2B292826252321201D1C1A1917151312100E0D0B0A09080605030200><D5D4D3D2D1D0CECDCCCBCAC9C7C6C5C3C2C1BFBEBCBBB9B7B5B3B1AFADABA9A7A5A3A19F9C9A989693918F8D8B888684827F7D7B79777572706E6C6A68666462605E5B59575553514F4D4B4948454442403E3C3A38363533312F2E2C2A292726242221201E1D1B1A181715141312100F0E0D0C0A0A0808070605050403030302020201010101010101000000000000000000><1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E><0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F303030313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F>4 %_Br<96959392908F8D8C8A898786848382807F7D7B7A787775747371706F6D6C6B69686665646261605E5D5C5A59575655545251504F4C4B4A48474645444241403E3D3C3B3A39383735343332302F2D2C2B2928272625242221201F1E1D1C1B1A191817161514131211><D1CFCECCCBC9C8C7C5C5C4C2C1C0BFBDBCBBBAB9B7B6B5B3B2B1B1AFAEACABAAA9A7A6A5A3A2A1A09E9D9C9C9B99989795949391918F8E8D8C8B898887878685848381807F7E7D7C7B7A7977767575747372706F6E6D6C6B6A6968676665646463636261605F5E5D>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6><4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF><9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0>4 %_Br<1112131415161718191A1B1C1D1E1F2021222425262728292B2C2D2F30323334353738393A3B3C3D3E40414244454647484A4B4C4F50515254555657595A5C5D5E60616264656668696B6C6D6F707173747577787A7B7D7F808283848687898A8C8D8F9092939596><5D5E5F6061626363646465666768696A6B6C6D6E6F7072737475757677797A7B7C7D7E7F808183848586878788898B8C8D8E8F91919394959798999B9C9C9D9EA0A1A2A3A5A6A7A9AAABACAEAFB1B1B2B3B5B6B7B9BABBBCBDBFC0C1C2C4C5C5C7C8C9CBCCCECFD1>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E><AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756565554535251504F4E><D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F>4 %_Br<9698989A9C9D9D9FA0A2A2A3A5A6A6A8A9AAAAACADADAEAFB0B0B1B2B4B3B4B5B6B6B6B8B8B8B9BABABABBBCBBBCBDBDBDBEBFBFBFBFC0C0BFC0C1C2C0C1C2C1C2C2C3C2C3C3C4C2C3C3C4C3C3C4C4C3C3C4C4C3C3C3C2C3C3C3C2C2C3C3C2C2C2C2C1C1C2C2C0C1C0BFBFBFBFBEBEBEBEBCBDBDBEBCBCBCBCBABBBBBBB9B9B9B7B7B7B7B5B6B6B6B4B4B5B5B4B4B4B5B4B4><D1D1D2D2D3D3D4D4D6D6D7D7D7D8D8D9D9DADADBDBDDDCDCDDDDDEDEDFDEE0DFE1E0E0E1E1E2E1E3E2E3E3E4E3E3E4E3E4E4E5E4E5E4E5E5E4E5E4E5E4E5E4E5E4E6E5E4E5E4E4E3E4E3E4E3E4E3E4E3E1E2E1E2E1E1E0E1DFE0DFDEDEDDDEDCDDDCDCDBDBDAD8D8D7D7D5D6D4D5D3D3D1D0D0CFCFCDCECCCCCACAC8C6C6C4C4C2C2C0C0BEBEBCB9B9B8B7B5B5B3B3B1B2B0><000203050608090A0B0D0E1012131517191A1C1D202123252628292B2C2E2E303133353637383A3B3C3D3F40424344454647484A4A4C4D4E4F505152535455565758595A5B5C5C5E5E60606162636465666768696A6A6B6C6D6D6F707071727373747576777879797B7B7C7D7E7F808182838485868788898A8C8C8E8F9091919394959698989A9C9C9E9EA0A0A2A2A3A3A5><00000000000000000001010101010101020202030303040505060708080A0A0C0D0E0F101213141517181A1B1D1E202122242627292A2C2E2F31333536383A3C3E4042444548494B4D4F51535557595B5E60626466686A6C6E70727577797B7D7F828486888B8D8F919396989A9C9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBCBEBFC1C2C3C5C6C7C9CACBCCCDCED0D1D2D3D4D5><7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A69696867666665646363626160605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A494847474645444443424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A29282827262525242322222120201F1E1D1D1C1B1A1A191817171615141413><4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A191918181717161616151514141313121211111110100F0F0E0E0D0D0C0C><9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br[0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 Bs0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS%_0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink Radial)(Pink Radial) 1 2 Bd[0<00000102030405060708090B0C0D0E1011121314141617191A1C1D1E202122232426272728292A2C2D2E2F31313234353638393A3A3B3C3E3F414242434546474848494B4C4D4D4E4F51525254555758585A5B5C5D5D5F60616162636565666869696A6B6C6C6E6F6F707273737576767779797A7B7B7D7E7E7F8181828383848585878888898A8A8C8C8D8E8E8F8F91929294939596969898999B9A9C9C9D9D9F9FA0A2A2A3A3A4A4A6A6A7A7A8A8A9A9AAAAACACADADAEAEAFAFB1B1B2B2B3B3B3B4B4B5B5B6B6B6B7B7B9B9BAB9B9BABABBBBBBBCBCBEBDBDBFBFBFC0C0C0C1C1C2C2C2C3C3C3C4C4C4C4C5C5C5C6C6C6C7C7C7C7C8C8C8C9C9C9C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCCCDCDCDCDCDCDCECECECECECECFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1><0000000001010102020303030303040405050606070808090909090A0A0B0C0C0D0E0E0E0F0F10101112121113131415151615161818191A191A1A1C1C1C1C1D1E1F1E1F20212221222324252425262727282829282A2B2C2B2D2D2E2D2F302F3031323132343334363536373837383A393A3C3B3C3E3D3E403F40404142424445454647474847494A4A4B4A4C4D4D4E4D4F4E505150525153525355555756585759585A5A5B5B5D5D5E5E5F5F616162626363646465656767686869696A6A696B6B6D6D6E6E6D6F6F7171707272747473757577777678787A7A797B7B7A7C7C7C7E7D7D7F7F7F8180808282818184838385858587878686888888888A8A8A8A8C8B8B8B8B8D8D8D8D8F8E8E8E8E909090909090919191919191939292929292929294949494949494949494949595959595959595959595959595>01<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A89888887878685858484838382828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F6F6E6E6D6D6C6C6C6B6B6A6A6A69696868686767676666666565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A59595959595858585858585757575757575656565656565656555555555555555555555454545454545454545454545454><FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777776767575747474737372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A6969696868686767676666666665656564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959>4 %_Br[0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 %_BS%_0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 3 Bd[0<A9A9AAAAABABADADAEAEAEAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B8B9B9BABABABBBBBCBCBDBDBDBEBEBFBFC0C0C1C1C1C2C2C3C3C4C4C5C5C5C6C6C7C7C8C8C8C9C9C9C9CACACBCB><080A0B0C0D0F1012131517191B1C1E1F2123242627292B2D2E3032333537383A3C3D3F414244484A4B4E505153545657595B5D5F6062636567696A6C6F70727476787A7C7D7F81838587898B>01<7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A><ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160>4 %_Br0<8282828383838383838585858585858686878787878888888888888A8A8A8A8A8A8C8C8C8C8C8C8D8D8D8D8D8D8F8F8F8F8F8F90909090909192929292929294949494949495959595959797979797979999999999999B9B9B9B9B9B9D9D9D9D9D9D9E9E9E9E9F9FA0A0A0A0A0A0A2A2A2A2A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7A7A7A7A9A9A9><F5F4F4F3F2F1F0EFEEEDECEAE9E8E6E6E5E4E3E2E1E0DFDEDDDBDAD8D7D6D4D3D2D1D0CFCDCCCAC8C6C5C4C2C1C0BFBEBDBCBAB9B7B6B4B3B1AFADACAAA9A7A5A3A2A09F9D9B9998969492908E8C8A88868482817F7D7A78777573716F6D6B69676562605F5D5B59565452504F4D4A484644413F3C3B39373533302E2D2B29272422201E1C1A17151312100E0B0A08>01<9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A89898989898988888888888887878787878686868686868585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B><1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 %_BS%_0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 Bs0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 %_BS%_0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 Bs0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 %_BS%_0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 139)(Unnamed gradient 139) 1 2 Bd[00001114 %_Br[0 0 0 0 1 1 1 2 87 36.6667 %_BS%_0 0 0 0 1 1 1 2 87 36.6667 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F50525354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBBBCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F80818182838384858686878889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACACADADADADADADADAD><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F4041424344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F8081818283848485858687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E80838587898C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Water)(Water) 0 5 Bd[<D5D6D6D7D7D8D9D9D9DADADBDCDCDDDEDEDFDFE0E1E1E1E2E3E3E4E4E5><5253545657595A5A5B5D5E606163646567686A6B6C6C6D6E7071727475><3F3F404141424345454647474848494B4B4C4C4D4D4F4F505151525353><02020203030304040505050606070709090A0A0B0C0C0D0E0F10101112>0<8A89888786858484838281807F7E7D7C7B7A7978777776757473727170><A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C>4 %_Br<B9BABBBBBCBDBDBEBFBFC0C1C1C2C2C3C3C4C4C5C5C6C6C7C8C8C9C9CACBCCCCCDCDCECFD0D0D0D1D2D2D3D4D4D4D5><17181A1A1B1D1E2021212324262829292B2D2E3032313335363838393B3C3E403F414344464747494A4C4D4F4F5052><15161718191A1A1B1B1D1E1E1F1F202223232425252728292B2C2E2E2F30303133343535363738393A3A3B3C3D3E3F><0000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010202>0<B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929191908F8E8D8C8C8B8A><D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9>4 %_Br<7576777879797A7B7C7D7E7E7F808182828384858586878888898A8B8C8C8D8E8E8F9090919293939494959696979899999A9A9B9C9C9D9E9E9E9FA0A1A1A2A2A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAAAABABACACADADADADAEAEAFAFB0B0B0B1B2B2B2B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B8B8B8B8B8B9B9B9B9B9><02020202020102020201020202010202020102020101020201010202010102010101020202010302020203030202030303030404030304040404050404040505040505050506060605070706060707070708080808090909080A0A09090B0B0B0A0C0C0C0C0E0E0E0E10100F0F111111111212121214141414151515151717><10111010121211111111101112121212121211111313121313131212141413141414131315151414141513141516141515151414161614151515141416161414151414161615151515141416161515151615151617161616161515171716161617161618181717171716161717161616161515171716161616151516171515>0<7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B1B1B1B1B0B0><E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9D9D9D9D8D8D8D8>4 %_Br<000001010203040505060708090A0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233343535363738393A3A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F616162636465666768696A6B6B6C6D6E6F70707172737475><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000010100010102010102010102010202010202><000000000000000000010101010102010202010103020202020203030303030403040403040404050405060506050506060606060607060706060707080807080808090808080909090909080A0A09090A0A0B0B0A0B0A0B0C0B0B0C0C0C0C0C0C0B0D0D0C0C0D0D0E0D0D0D0D0E0F0E0E0E0E0F0F0F0F0E101010100F0F111010>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F><FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0><FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8>4 %_Br[0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 %_BS%_0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 Bs0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 %_BS%_0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 Bs0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 %_BS%_0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 Bs0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS%_0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Diamond Cubes)(Diamond Cubes) 6.5605 11.3652 85.3018 79.5596 [%AI3_Tile(0 O 0 R 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 Xa 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR45.9316 56.8281 m39.3691 45.4609 L26.2471 45.4609 L32.8066 56.8281 L45.9316 56.8281 Lf45.9316 34.0957 m39.3691 22.7305 L26.2471 22.7305 L32.8066 34.0957 L45.9316 34.0957 Lf65.6162 22.7305 m59.0537 11.3652 L45.9316 11.3652 L52.4932 22.7305 L65.6162 22.7305 Lf65.6162 45.4609 m59.0537 34.0977 L45.9316 34.0977 L52.4932 45.4609 L65.6162 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L6.5605 11.3652 L13.123 22.7305 L26.2471 22.7305 Lf26.2471 45.4609 m19.6846 34.0977 L6.5605 34.0977 L13.123 45.4609 L26.2471 45.4609 Lf45.9316 79.5586 m39.3691 68.1924 L26.2471 68.1924 L32.8066 79.5586 L45.9316 79.5586 Lf65.6162 68.1934 m59.0537 56.8281 L45.9316 56.8281 L52.4932 68.1924 L65.6162 68.1934 Lf85.3018 56.8281 m78.7402 45.4609 L65.6162 45.4609 L72.1777 56.8281 L85.3018 56.8281 Lf85.3018 34.0957 m78.7402 22.7305 L65.6162 22.7305 L72.1777 34.0957 L85.3018 34.0957 Lf85.3018 79.5586 m78.7402 68.1924 L65.6162 68.1924 L72.1777 79.5586 L85.3018 79.5586 Lf26.2471 68.1924 m19.6846 56.8281 L6.5605 56.8281 L13.123 68.1924 L26.2471 68.1924 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 Xa 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR26.2471 68.1924 m19.6846 56.8281 L26.2471 45.4609 L32.8066 56.8281 L26.2471 68.1924 Lf26.2471 45.4609 m19.6846 34.0957 L26.2471 22.7305 L32.8066 34.0957 L26.2471 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L26.2471 0 L32.8066 11.3652 L26.2471 22.7305 Lf45.9316 34.0957 m39.3691 22.7305 L45.9316 11.3652 L52.4932 22.7305 L45.9316 34.0957 Lf45.9316 56.8281 m39.3691 45.4609 L45.9316 34.0977 L52.4932 45.4609 L45.9316 56.8281 Lf6.5605 34.0957 m0 22.7305 L6.5605 11.3652 L13.123 22.7305 L6.5605 34.0957 Lf6.5605 56.8281 m0 45.4609 L6.5605 34.0977 L13.123 45.4609 L6.5605 56.8281 Lf26.2471 90.9238 m19.6846 79.5586 L26.2471 68.1924 L32.8066 79.5586 L26.2471 90.9238 Lf45.9316 79.5586 m39.3691 68.1924 L45.9316 56.8281 L52.4932 68.1924 L45.9316 79.5586 Lf65.6162 68.1924 m59.0537 56.8281 L65.6162 45.4609 L72.1777 56.8281 L65.6162 68.1924 Lf65.6162 45.4609 m59.0537 34.0957 L65.6162 22.7305 L72.1777 34.0957 L65.6162 45.4609 Lf65.6162 22.7305 m59.0537 11.3652 L65.6162 0 L72.1777 11.3652 L65.6162 22.7305 Lf85.3018 34.0957 m78.7402 22.7305 L85.3018 11.3652 L91.8643 22.7305 L85.3018 34.0957 Lf85.3018 56.8281 m78.7402 45.4609 L85.3018 34.0977 L91.8643 45.4609 L85.3018 56.8281 Lf65.6162 90.9238 m59.0537 79.5586 L65.6162 68.1924 L72.1777 79.5586 L65.6162 90.9238 Lf85.3018 79.5586 m78.7402 68.1924 L85.3018 56.8281 L91.8643 68.1924 L85.3018 79.5586 Lf6.5605 79.5576 m0 68.1924 L6.5605 56.8281 L13.123 68.1924 L6.5605 79.5576 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6091.6558 7111 L-6091.6558 7075.8271 L-6271 7075.8271 L-6271 7111 Lnuu0 O0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa0 R0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA0.5 w-6109.8286 7076.0781 m-6252.8276 7076.0781 L-6252.8276 7078.647 L-6109.8286 7078.647 L-6109.8286 7076.0781 Lb-6252.8276 7101.4829 m-6109.8286 7101.4829 L-6109.8286 7098.7109 L-6252.8276 7098.7109 L-6252.8276 7101.4829 Lb0 0 0 0 1 1 1 Xa-6252.8276 7078.647 m-6252.8276 7098.7109 L-6109.8286 7098.7109 L-6109.8286 7078.647 L-6252.8276 7078.647 LbU0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7110.6191 m-6092.2544 7110.6191 L-6094.4292 7108.3984 L-6125.9976 7108.3984 L-6131.1978 7110.6191 Lb-6092.2544 7086.5854 m-6109.8286 7086.5854 L-6109.8286 7088.6797 L-6094.3237 7088.6797 L-6092.2544 7086.5854 Lb0 0 0 0 1 1 1 Xa-6094.3237 7088.6797 m-6109.8286 7088.6797 L-6109.8286 7101.4829 L-6125.9976 7108.3984 L-6094.4292 7108.3984 L-6104.6465 7099.1279 L-6094.3237 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6270.4019 7110.6191 m-6231.4595 7110.6191 L-6236.6587 7108.3984 L-6268.2285 7108.3984 L-6270.4019 7110.6191 Lb0 0 0 0 1 1 1 Xa-6252.8286 7088.6797 m-6268.3345 7088.6797 L-6258.0112 7099.1279 L-6268.2285 7108.3984 L-6236.6587 7108.3984 L-6252.8286 7101.4829 L-6252.8286 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6252.8286 7086.5854 m-6270.4019 7086.5854 L-6268.3345 7088.6797 L-6252.8286 7088.6797 L-6252.8286 7086.5854 Lb-6231.4595 7110.6191 m-6252.8286 7101.4829 LSu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6131.1978 7101.4829 m-6131.1978 7108.1836 L-6115.5269 7101.4829 L-6131.1978 7101.4829 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7108.1836 m-6131.1978 7110.6191 L-6109.8286 7101.4829 L-6115.5269 7101.4829 L-6131.1978 7108.1836 Lb-6252.8286 7101.4829 m-6231.4595 7110.6191 L-6231.4595 7108.1836 L-6247.1294 7101.4829 L-6252.8286 7101.4829 Lb0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6247.1294 7101.4829 m-6231.4595 7108.1836 L-6231.4595 7101.4829 L-6247.1294 7101.4829 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 44)0 Au1 Ap0 J 0 j 1 w 4 M []0 d1 XR-6266.6665 7111 m-6271 7111 L-6271 7107.3989 L-6266.6665 7107.3989 L-6266.6665 7111 Lnu0 Ap0 XR-6269.9702 7110.3359 m-6267.6963 7110.3359 L-6267.6963 7108.062 L-6269.9702 7108.062 L-6269.9702 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6267.6963 7109.1992 m-6267.6963 7109.8271 -6268.2056 7110.3359 -6268.8335 7110.3359 c-6269.4614 7110.3359 -6269.9702 7109.8271 -6269.9702 7109.1992 c-6269.9702 7108.5718 -6269.4614 7108.062 -6268.8335 7108.062 c-6268.2056 7108.062 -6267.6963 7108.5718 -6267.6963 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 47)0 Au0 Ap0 J 0 j 1 w 4 M []0 d1 XR-6264.6064 7111 m-6271 7111 L-6271 7107.3989 L-6264.6064 7107.3989 L-6264.6064 7111 Lnu0 XR-6268.9404 7110.3359 m-6266.6665 7110.3359 L-6266.6665 7108.062 L-6268.9404 7108.062 L-6268.9404 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6266.6665 7109.1992 m-6266.6665 7109.8271 -6267.1753 7110.3359 -6267.8032 7110.3359 c-6268.4312 7110.3359 -6268.9404 7109.8271 -6268.9404 7109.1992 c-6268.9404 7108.5718 -6268.4312 7108.062 -6267.8032 7108.062 c-6267.1753 7108.062 -6266.6665 7108.5718 -6266.6665 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 48)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6263.1465 7111 L-6263.1465 7102.5957 L-6271 7102.5957 L-6271 7111 Lnu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa3.86371 M-6270.1582 7102.5957 m-6269.6812 7102.5845 -6269.2842 7102.9595 -6269.2725 7103.4375 c-6269.2593 7103.9141 -6269.6357 7104.3101 -6270.1138 7104.3237 c-6270.5903 7104.3359 -6270.9878 7103.96 -6270.9995 7103.4824 c-6271.0122 7103.0054 -6270.6357 7102.6069 -6270.1582 7102.5957 cf-6270.1357 7103.46 mFUu-6270.1558 7104.8188 m-6269.6782 7104.8086 -6269.2813 7105.1846 -6269.2686 7105.6621 c-6269.2563 7106.1382 -6269.6333 7106.5356 -6270.1104 7106.5488 c-6270.5874 7106.5615 -6270.9849 7106.1846 -6270.9971 7105.7075 c-6271.0093 7105.23 -6270.6328 7104.8345 -6270.1558 7104.8188 cf-6270.1333 7105.6846 mFUu-6270.1523 7107.0469 m-6269.6753 7107.0342 -6269.2783 7107.4102 -6269.2661 7107.8877 c-6269.2539 7108.3638 -6269.6304 7108.7612 -6270.1074 7108.7744 c-6270.5845 7108.7871 -6270.9814 7108.4102 -6270.9937 7107.9326 c-6271.0068 7107.4561 -6270.6299 7107.0581 -6270.1523 7107.0469 cf-6270.1299 7107.9102 mFUu-6270.1499 7109.2725 m-6269.6724 7109.2588 -6269.2754 7109.6357 -6269.2627 7110.1133 c-6269.25 7110.5894 -6269.6274 7110.9863 -6270.1045 7111 c-6270.5815 7111.0127 -6270.9785 7110.6357 -6270.9912 7110.1582 c-6271.0029 7109.6816 -6270.6274 7109.2832 -6270.1499 7109.2725 cf-6270.1274 7110.1357 mFUu-6268.1538 7103.6665 m-6267.6763 7103.6533 -6267.2793 7104.0293 -6267.2666 7104.5068 c-6267.2539 7104.9829 -6267.6309 7105.3809 -6268.1084 7105.394 c-6268.5854 7105.4063 -6268.9824 7105.0293 -6268.9946 7104.5527 c-6269.0068 7104.0752 -6268.6304 7103.6768 -6268.1538 7103.6665 cf-6268.1304 7104.5293 mFUu-6268.1499 7105.8901 m-6267.6729 7105.8789 -6267.2764 7106.2549 -6267.2632 7106.7324 c-6267.2515 7107.21 -6267.6274 7107.6069 -6268.1055 7107.6191 c-6268.5825 7107.6318 -6268.9795 7107.2549 -6268.9917 7106.7773 c-6269.0039 7106.3008 -6268.6274 7105.9023 -6268.1499 7105.8901 cf-6268.1274 7106.7549 mFUu-6268.1475 7108.1157 m-6267.6699 7108.1045 -6267.2729 7108.4805 -6267.2607 7108.9595 c-6267.2485 7109.4341 -6267.6255 7109.8325 -6268.1025 7109.8447 c-6268.5791 7109.8574 -6268.9766 7109.4814 -6268.9888 7109.0029 c-6269.0015 7108.5264 -6268.6245 7108.1279 -6268.1475 7108.1157 cf-6268.1245 7108.9805 mFUu-6266.0723 7104.7119 m-6265.5952 7104.6997 -6265.1987 7105.0781 -6265.1865 7105.5532 c-6265.1738 7106.0303 -6265.5508 7106.4287 -6266.0273 7106.4414 c-6266.5054 7106.4541 -6266.9019 7106.0757 -6266.9141 7105.5996 c-6266.9272 7105.1235 -6266.5498 7104.7261 -6266.0723 7104.7119 cf-6266.0503 7105.5781 mFUu-6266.0698 7106.939 m-6265.5928 7106.9253 -6265.1953 7107.3013 -6265.1831 7107.7788 c-6265.1704 7108.2573 -6265.5474 7108.6543 -6266.0249 7108.6685 c-6266.5024 7108.6797 -6266.8994 7108.3013 -6266.9116 7107.8252 c-6266.9233 7107.3486 -6266.5469 7106.9512 -6266.0698 7106.939 cf-6266.0474 7107.8013 mFUu-6264.0332 7105.7822 m-6263.5557 7105.7695 -6263.1592 7106.147 -6263.1465 7106.6255 c-6263.1333 7107.1016 -6263.5103 7107.4985 -6263.9883 7107.5117 c-6264.4653 7107.5229 -6264.8618 7107.147 -6264.8745 7106.6685 c-6264.8862 7106.1909 -6264.5098 7105.7949 -6264.0332 7105.7822 cf-6264.0103 7106.647 mFUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Banner/ Adobe Patte) -(rnOnPath Brush Tool/ Arrow Brush Circles/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Arrow Brush Circles)(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -( 1 0 4 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(Black)Pc0 0.993988 1 0 1 0 0 Xa(RGB Red)Pc0.061982 0 0.965148 0 1 1 0 Xa(RGB Yellow)Pc0.627649 0 1 0 0 1 0 Xa(RGB Green)Pc0.517937 0 0.125399 0 0 1 1 Xa(RGB Cyan)Pc0.883665 0.769161 0 0 0 0 1 Xa(RGB Blue)Pc0.269902 0.816403 0 0 1 0 1 Xa(RGB Magenta)Pc0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0.000366 0.500664 0.985656 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0.000214 0.348486 0.871305 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.045136 0 0.931884 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188968 0.000397 0.98233 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501091 0.001373 0.990387 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.746151 0 0.99704 0.000092 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.761959 0 0.749783 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.6972 0.14847 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.875364 0.526451 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262516 0.245243 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.970001 0.204959 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.22855 0.274266 0.39942 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.362341 0.574029 0.840574 0.226139 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Fade To Edge Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Fade To Edge Black)PcBb0 0 0 0 Bh2 (Neon Rings Vignette) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Neon Rings Vignette)PcBb2 (Water) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Water)PcBb0 0 0 0 Bh2 (Pink Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Pink Radial)Pc(Diamond Cubes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Diamond Cubes)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(R=0 G=0 B=0)Pc0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.306798 0.242466 0.247654 0 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.193668 0.150057 0.155337 0 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.084596 0.061311 0.065766 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.037049 0.025086 0.025086 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.6318 0.219425 0 0 0.247059 0.662745 0.960784 Xa(R=63 G=169 B=245)Pc0.55407 0 0.965515 0 0.478431 0.788235 0.262745 Xa(R=122 G=201 B=67)Pc0 0.508354 0.961639 0 1 0.576471 0.117647 Xa(R=255 G=147 B=30)Pc0 0.965057 0.900572 0 1 0.113725 0.145098 Xa(R=255 G=29 B=37)Pc0 0.661738 0.032776 0 1 0.482353 0.67451 Xa(R=255 G=123 B=172)Pc0.253758 0.127169 0.116762 0 0.741176 0.8 0.831373 Xa(R=189 G=204 B=212)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 3 79 79 255 0 50 Lb(Layer 4) Ln0 A0 O0 0.961273 0.932555 0.000031 0.988235 0.133333 0.133333 Xa0 J 0 j 1 w 10 M []0 d0 XR1470.541 -2096.6162 m1462.4927 -2075.9912 1450.874 -2056.5957 1440.6904 -2036.9678 c1430.5098 -2017.3457 1421.9658 -1997.1406 1409.3213 -1978.8652 c1395.6479 -1959.1016 1381.5186 -1939.7373 1368.1807 -1919.7305 c1361.5981 -1909.8564 1355.0156 -1899.9824 1348.4326 -1890.1094 c1342.8994 -1881.8096 1337.1445 -1873.1377 1328.9033 -1867.2617 c1325.4546 -1864.8027 1323.4043 -1857.7021 1321.7295 -1853.9492 c1319.9077 -1849.8652 1318.4199 -1846.3203 1315.5464 -1842.8662 c1308.4385 -1834.3232 1301.5068 -1825.6563 1295.0942 -1816.5742 c1284.2539 -1801.2217 1276.0571 -1783.457 1263.0776 -1769.6992 c1259.8584 -1766.2861 1255.6572 -1764.1084 1252.3599 -1760.8389 c1248.6548 -1757.1641 1244.8369 -1753.6025 1241.0352 -1750.0293 c1232.3984 -1741.9121 1223.7998 -1733.7793 1215.7739 -1725.0498 c1200.2222 -1708.1338 1186.4282 -1691.6777 1177.6245 -1670.1855 c1173.4414 -1659.9736 1168.8652 -1649.9648 1163.4385 -1640.3496 c1158.356 -1631.3438 1149.6621 -1622.6152 1142.4531 -1615.2061 c1134.9692 -1607.5146 1129.6274 -1598.291 1123.2891 -1589.7217 c1117.0752 -1581.3223 1109.3301 -1574.2617 1101.0703 -1567.9238 c1083.0908 -1554.1299 1064.0166 -1541.7305 1045.772 -1528.2764 c1037.4868 -1522.166 1030.0737 -1515.1719 1021.522 -1509.3496 c1012.041 -1502.8936 1002.6987 -1496.5 993.5806 -1489.5313 c974.7251 -1475.123 954.5254 -1462.9463 934.9126 -1449.6797 c915.6938 -1436.6787 897.5908 -1422.04 878.8711 -1408.3477 c861.1045 -1395.3516 844.0854 -1380.8926 824.5508 -1370.5771 c815.6714 -1365.8887 806.1812 -1362.668 796.6172 -1359.707 c785.917 -1356.3936 776.3032 -1351.5693 766.4927 -1346.2256 c757.5347 -1341.3467 747.7661 -1337.9648 739.1196 -1332.6123 c730.5703 -1327.3193 722.0107 -1322.3887 712.4902 -1319.0439 c707.4204 -1317.2627 702.2803 -1316.4424 697.2637 -1314.4463 c691.8184 -1312.2793 686.3394 -1310.209 680.8071 -1308.2734 c669.1499 -1304.1934 657.0791 -1302.3809 645.1519 -1299.3643 c622.396 -1293.6094 600.7212 -1285.1592 577.6167 -1280.5801 c556.2729 -1276.3496 535.6094 -1270.0137 514.0464 -1266.4443 c468.9727 -1258.9824 422.877 -1260.2676 377.3789 -1257.4326 c341.6797 -1255.208 305.4341 -1254.4131 269.6641 -1254.916 c236.1709 -1255.3887 202.8745 -1263.1318 169.6792 -1267.2813 c151.7832 -1269.5186 133.9199 -1272.0859 116.0356 -1274.3242 c107.6304 -1275.376 99.1899 -1276.0234 90.7988 -1277.2109 c83.0063 -1278.3145 75.6792 -1281.5938 68.0005 -1283.3906 c60.4736 -1285.1514 52.7891 -1285.957 45.0757 -1286.2061 c37.0205 -1286.4668 29.0308 -1288.3691 20.9194 -1288.7578 c15.0615 -1289.0381 9.1792 -1288.7891 3.32373 -1289.0342 C3.32373 -1302.0283 L3.67188 -1302.0137 4.01855 -1301.9824 4.36719 -1301.9736 c15.9458 -1301.6699 27.2671 -1301.6641 38.7681 -1300.0146 c48.8252 -1298.5723 58.9219 -1298.3848 68.9487 -1296.459 c73.9595 -1295.4971 78.8696 -1294.0898 83.7119 -1292.498 c90.5107 -1290.2627 97.1392 -1289.3037 104.2813 -1288.5557 c151.2979 -1283.6299 198.3496 -1277.0049 244.9868 -1269.2402 c256.8784 -1267.2607 269.6152 -1267.8203 281.6328 -1267.8496 c294.6011 -1267.8818 307.5669 -1268.3535 320.5293 -1268.6953 c345.5107 -1269.3525 370.3677 -1270.2744 395.3311 -1271.4434 c440.9526 -1273.5791 486.2959 -1273.8223 531.2759 -1282.6445 c541.7397 -1284.6963 552.0249 -1287.4561 562.1567 -1290.7705 c572.6328 -1294.1982 584.3931 -1295.0518 595.1284 -1297.7461 c606.2554 -1300.5391 617.0376 -1304.5703 627.9824 -1307.9805 c639.7466 -1311.6455 651.686 -1313.8486 663.6377 -1316.6924 c674.9258 -1319.3789 685.7964 -1323.7939 696.5508 -1328.0732 c701.2949 -1329.9609 706.4438 -1330.6689 711.2954 -1332.374 c716.6318 -1334.249 721.606 -1337.2197 726.4507 -1340.0908 c730.6318 -1342.5674 734.7246 -1345.1953 738.8813 -1347.7129 c743.1333 -1350.2881 748.5913 -1351.584 753.0996 -1353.835 c762.8511 -1358.7031 772.1348 -1364.2686 782.2002 -1368.5107 c791.1035 -1372.2627 800.6611 -1374.3672 809.6694 -1377.8877 c820.188 -1381.998 829.9414 -1388.3984 839.1191 -1394.8857 c857.9009 -1408.1611 875.8638 -1422.6533 894.4775 -1436.1641 c913.4463 -1449.9326 932.5127 -1463.0586 951.9824 -1476.0723 c971.2153 -1488.9287 989.2012 -1503.4824 1008.459 -1516.248 c1026.9375 -1528.498 1044.0005 -1542.8418 1062.0664 -1555.7637 c1079.918 -1568.5313 1100.3413 -1580.4355 1113.585 -1598.3398 c1119.5391 -1606.3887 1124.7397 -1614.7773 1131.3638 -1622.3418 c1138.9634 -1631.0186 1147.9585 -1639.3711 1153.6641 -1649.4814 c1159.4106 -1659.6641 1163.8657 -1670.5273 1168.2168 -1681.3555 c1172.4028 -1691.7744 1178.7256 -1701.2451 1185.5107 -1710.1436 c1198.5581 -1727.2559 1214.2471 -1742.6875 1229.897 -1757.3945 c1237.2397 -1764.2949 1244.8101 -1770.7158 1252.2998 -1777.3496 c1259.3516 -1783.5947 1263.8115 -1792.3232 1268.9854 -1800.0518 c1280.4717 -1817.209 1291.502 -1834.0557 1304.6812 -1850.04 c1310.9375 -1857.6279 1311.9941 -1869.0127 1319.0249 -1876.043 c1322.5054 -1879.5244 1326.4087 -1882.1592 1329.6533 -1885.9863 c1333.7266 -1890.791 1337.0122 -1896.377 1340.499 -1901.6074 c1358.2681 -1928.2598 1376.1909 -1954.6846 1394.8052 -1980.752 c1412.0386 -2004.8857 1423.2676 -2032.1885 1437.2549 -2058.1807 c1444.0718 -2070.8486 1450.8047 -2083.7881 1456.6895 -2096.9053 c1462.7114 -2110.3291 1466.2373 -2124.875 1470.4551 -2138.9248 c1471.603 -2142.75 1472.9219 -2146.5127 1474.3486 -2150.2373 C1487.7666 -2150.2373 L1481.2656 -2132.6377 1477.3701 -2114.1172 1470.541 -2096.6162 cf0.043763 0.323857 1 0 0.94902 0.694118 0.113725 Xa1379.8325 -2126.3672 m1374.9937 -2116.4355 1369.8462 -2105.6953 1366.5103 -2095.1953 c1360.1553 -2075.1924 1348.7603 -2057.5293 1341.6724 -2037.7373 c1334.1626 -2016.7666 1327.1064 -1995.8633 1317.4976 -1975.6787 c1312.7607 -1965.7295 1307.9863 -1956.1514 1303.9736 -1945.8633 c1300.0908 -1935.9072 1296.1035 -1925.9961 1291.7183 -1916.25 c1282.8545 -1896.5488 1270.9189 -1878.166 1260.2466 -1859.4053 c1255.0649 -1850.2979 1249.5596 -1841.3857 1243.3652 -1832.9287 c1237.084 -1824.3535 1231.5479 -1815.2598 1225.022 -1806.8545 c1218.3999 -1798.3252 1210.6631 -1791.1641 1205.6787 -1781.4961 c1200.3003 -1771.0635 1194.3594 -1761.6465 1187.0332 -1752.4629 c1173.0859 -1734.9775 1156.2231 -1719.9844 1140.8115 -1703.8408 c1126.3818 -1688.7266 1115.2412 -1671.418 1099.6968 -1657.3438 c1092.4795 -1650.8096 1083.2944 -1644.127 1078.3789 -1635.5742 c1073.1235 -1626.4307 1067.458 -1617.543 1061.0664 -1609.1494 c1055.4014 -1601.709 1049.1055 -1594.8867 1042.1055 -1588.6865 c1038.7773 -1585.7393 1035.2002 -1583.3682 1032.207 -1580.0371 c1028.9346 -1576.3955 1027.2139 -1571.334 1023.7739 -1567.8945 c1016.4448 -1560.5654 1007.7183 -1554.3672 1000.2466 -1547.0664 c992.4678 -1539.4648 983.7275 -1533.2881 975.5786 -1526.0928 c968.2788 -1519.6465 962.4238 -1511.8438 955.3472 -1505.1504 c947.0332 -1497.2871 937.5674 -1491.1807 928.2627 -1484.5947 c909.7485 -1471.4922 891.123 -1458.5059 872.7813 -1445.166 c864.0986 -1438.8506 855.3291 -1432.6807 846.1821 -1427.0518 c836.8486 -1421.3076 826.437 -1416.9209 816.7764 -1411.6484 c796.4204 -1400.5371 773.6221 -1393.2939 752.1396 -1384.6523 c746.4917 -1382.3809 740.8672 -1380.0566 735.2842 -1377.6289 c730.9058 -1375.7246 726.5024 -1372.8828 721.9478 -1371.4883 c710.0728 -1367.8506 698.1484 -1364.3848 686.207 -1360.9717 c664.2129 -1354.6855 642.187 -1348.5107 620.4668 -1341.3184 c600.9956 -1334.8701 584.9277 -1318.7334 564.1138 -1316.6426 c555.1597 -1315.7422 547.1675 -1316.1318 538.4849 -1313.1621 c527.5527 -1309.4238 516.3081 -1309.4746 504.835 -1309.9512 c481.4668 -1310.9219 458.1221 -1311.7559 434.7612 -1312.9951 c424.2017 -1313.5557 413.6582 -1313.6582 403.0869 -1313.6582 c391.0977 -1313.6582 379.8237 -1314.0703 368.1357 -1311.1484 c350.1284 -1306.6465 332.9326 -1302.2803 314.2954 -1301.6113 c295.7969 -1300.9492 277.7354 -1298.6211 259.353 -1296.5928 c242.3765 -1294.7197 225.1719 -1293.2959 208.2422 -1296.1133 c199.6787 -1297.5381 191.3213 -1299.4414 182.6196 -1299.8955 c172.7847 -1300.4082 163.2363 -1300.9639 153.4893 -1302.5469 c134.9922 -1305.5498 117.0571 -1311.0342 98.7769 -1315.0605 c79.6563 -1319.2725 60.1108 -1320.8779 40.9229 -1324.8213 c31.9092 -1326.6738 22.9219 -1328.6367 13.8696 -1330.2988 c10.3262 -1330.9502 6.81152 -1331.4307 3.32373 -1331.9561 C3.32373 -1345.0117 L25.7744 -1342.1348 47.6094 -1335.7832 70.0405 -1332.7861 c93.0308 -1329.7148 115.1699 -1324.6055 137.6416 -1318.9131 c159.7778 -1313.3047 182.333 -1314.1699 204.6001 -1309.9697 c226.4653 -1305.8447 248.2153 -1308.1885 270.1592 -1310.8467 c281.2139 -1312.1855 292.188 -1313.8008 303.3247 -1314.2715 c315.6572 -1314.7939 327.8911 -1314.7051 339.9951 -1317.4688 c351.0112 -1319.9824 361.9438 -1323 372.9077 -1325.7402 c383.1294 -1328.2959 395.1514 -1326.6582 405.6572 -1326.6582 c428.3545 -1326.6582 450.9219 -1324.6865 473.5942 -1324.0254 c484.9868 -1323.6924 496.3496 -1323.3037 507.7388 -1322.8301 c513.5591 -1322.5889 519.3584 -1322.7002 525.1636 -1323.1621 c530.5327 -1323.5898 535.4248 -1325.9629 540.5571 -1327.4551 c549.2358 -1329.9775 558.1328 -1328.6494 566.9307 -1329.9814 c572.2075 -1330.7803 576.9771 -1333.9922 581.6289 -1336.4277 c587.0708 -1339.2764 592.4775 -1342.1895 597.9312 -1345.0156 c617.2153 -1355.0068 638.0049 -1360.6543 658.7896 -1366.6621 c681.2598 -1373.1582 704.9219 -1378.0889 726.249 -1387.7568 c768.0898 -1406.7236 812.6201 -1419.791 851.0439 -1445.6436 c869.5278 -1458.0801 887.7178 -1471.2461 905.771 -1484.3008 c923.7866 -1497.3281 943.1035 -1508.9717 957.4502 -1526.2217 c963.7915 -1533.8467 971.7646 -1540.0039 979.5742 -1546.0283 c988.4473 -1552.873 996.001 -1561.2871 1004.3799 -1568.7363 c1007.5728 -1571.5742 1012.5288 -1574.1982 1014.8843 -1577.7725 c1017.104 -1581.1406 1019.2305 -1584.5791 1021.7813 -1587.7139 c1027.9736 -1595.3242 1036.5239 -1600.7461 1043.2441 -1607.958 c1057.1729 -1622.9053 1064.793 -1642.1348 1079.4141 -1656.373 c1086.5806 -1663.3535 1094.313 -1669.7139 1101.3721 -1676.8105 c1108.8477 -1684.3262 1114.4658 -1693.6123 1121.334 -1701.6973 c1135.6904 -1718.5986 1152.3467 -1733.3975 1167.418 -1749.6367 c1174.9561 -1757.7598 1181.9771 -1766.3555 1187.9258 -1775.7158 c1190.9116 -1780.4131 1193.1797 -1785.5869 1195.7266 -1790.5264 c1198.6128 -1796.125 1202.1143 -1800.1875 1206.3569 -1804.7461 c1213.3203 -1812.2256 1219.2715 -1820.5078 1224.752 -1829.1143 c1230.7554 -1838.541 1237.7847 -1847.2188 1243.6387 -1856.7969 c1249.1665 -1865.8398 1254.1963 -1875.1855 1259.3521 -1884.4424 c1264.8354 -1894.2871 1271.0479 -1903.6309 1276.1528 -1913.7021 c1283.5669 -1928.3271 1289.2563 -1943.7646 1295.2217 -1959.0137 c1301.4756 -1975.002 1310.1611 -1989.9395 1316.5669 -2005.9424 c1322.8486 -2021.6338 1327.4023 -2037.9082 1333.9111 -2053.4844 c1339.9619 -2067.9668 1349.0039 -2081.3506 1353.3257 -2096.4434 c1355.3506 -2103.5137 1358.7222 -2109.8906 1361.4326 -2116.6924 c1364.6035 -2124.6504 1368.2612 -2132.4023 1372.147 -2140.0322 c1373.897 -2143.4688 1375.7217 -2146.8652 1377.5903 -2150.2373 C1392.5713 -2150.2373 L1388.0674 -2142.4199 1383.7856 -2134.4805 1379.8325 -2126.3672 cf0.022278 0.006043 0.758541 0 1 0.937255 0.372549 Xa1308.7217 -2125.5264 m1298.0303 -2107.3252 1288.6812 -2088.2178 1282.8813 -2067.9014 c1277.1543 -2047.8379 1272.1655 -2027.7568 1264.7773 -2008.1982 c1257.6475 -1989.3223 1250.9888 -1970.2813 1243.8853 -1951.3994 c1240.9688 -1943.6484 1238.1025 -1935.2236 1233.3257 -1928.4189 c1227.9688 -1920.7871 1221.7383 -1914.0176 1216.5596 -1906.1904 c1205.3755 -1889.2891 1194.146 -1872.459 1181.5781 -1856.541 c1175.8745 -1849.3164 1169.5869 -1842.8311 1163.3423 -1836.1006 c1157.0645 -1829.334 1152.6313 -1821.1045 1147.8877 -1813.2354 c1143.4531 -1805.8799 1139.54 -1800.1377 1132.3472 -1795.334 c1123.4707 -1789.4053 1118.0049 -1781.8018 1111.5415 -1773.5977 c1105.4551 -1765.8721 1100.1421 -1757.5908 1094.2285 -1749.7383 c1088.1309 -1741.6426 1080.7715 -1734.7461 1074.8457 -1726.5039 c1063.5762 -1710.8311 1051.2446 -1695.1924 1038.3271 -1680.8818 c1025.0562 -1666.1797 1014.7246 -1649.3545 1000.6563 -1635.2861 c984.7676 -1619.3975 969.0132 -1603.5703 952.2871 -1588.5957 c945.2051 -1582.2559 938.6738 -1575.334 932.4883 -1568.125 c925.5762 -1560.0684 918.0576 -1553.5244 909.4331 -1547.3203 c901.7959 -1541.8262 893.7979 -1536.8594 886.2153 -1531.2842 c878.3975 -1525.5361 872.4629 -1518.7188 865.9629 -1511.6084 c860.2393 -1505.3467 850.7314 -1501.54 843.6182 -1496.998 c836.2427 -1492.29 830.4585 -1485.8672 822.5957 -1481.6201 c815.3174 -1477.6885 807.2402 -1474.5918 799.293 -1472.3496 c788.8838 -1469.4121 779.6592 -1462.082 770.1274 -1457.168 c762.3101 -1453.1377 755.0688 -1449.6768 746.4717 -1447.4541 c737.5356 -1445.1436 728.3574 -1443.9043 719.3936 -1441.7041 c698.5381 -1436.5869 678.5508 -1427.6543 658.0034 -1421.4551 c648.8198 -1418.6846 639.2412 -1417.4189 630.0234 -1414.7285 c619.2393 -1411.5811 608.6831 -1406.873 597.9766 -1403.3037 c589.8169 -1400.584 582.4775 -1397.0811 573.835 -1396.0195 c564.4727 -1394.8701 555.5977 -1388.1943 547.9658 -1383.1143 c544.248 -1380.6387 538.3022 -1379.7559 534.0708 -1378.3447 c528.7646 -1376.5762 523.4912 -1374.8584 518.3442 -1372.6563 c508.6611 -1368.5127 498.3555 -1366.8584 487.9106 -1366.123 c477.8589 -1365.416 467.8286 -1366.2705 457.8452 -1364.6152 c448.0869 -1362.9971 438.6289 -1359.9619 428.8477 -1358.4346 c419.5391 -1356.9805 409.9995 -1357.542 400.6108 -1357.542 c395.6133 -1357.542 390.7617 -1355.2773 385.9634 -1354.0029 c380.415 -1352.5293 374.8252 -1352.3154 369.1504 -1351.8145 c346.3599 -1349.8047 323.4478 -1349.4473 300.582 -1349.3398 c283.9043 -1349.2617 267.146 -1348.8984 250.502 -1350.126 c242.5708 -1350.7109 234.8477 -1351.5596 227.2983 -1354.0449 c220.623 -1356.2422 212.291 -1360 205.2183 -1360 C160.8042 -1360 L153.3384 -1360 146.2886 -1360.3213 138.9922 -1362.0986 c131.0874 -1364.0244 123.5737 -1367.332 115.6387 -1369.1865 c108.687 -1370.8105 101.4492 -1371.0254 94.3442 -1371.168 c90.4761 -1371.2461 85.9473 -1370.5449 82.1782 -1371.4707 c78.2988 -1372.4238 74.4092 -1373.3145 70.4966 -1374.1201 c62.6187 -1375.7412 54.2515 -1375.2754 46.5229 -1376.9688 c38.0068 -1378.8359 29.4526 -1380.4922 20.8745 -1382.0488 c15.0283 -1383.1094 9.17822 -1384.2754 3.32373 -1385.4434 C3.32373 -1398.3672 L18.0073 -1395.6738 32.7427 -1393.2422 47.3442 -1390.127 c56.7964 -1388.1094 66.8086 -1388.1543 76.3765 -1386.1855 c87.0732 -1383.9834 97.6445 -1384.5059 108.4893 -1383.4531 c117.8257 -1382.5459 126.5337 -1379.6807 135.395 -1376.7529 c145.4341 -1373.4375 154.709 -1373 165.1597 -1373 C207.3291 -1373 L212.2744 -1373 218.0522 -1370.5264 222.7646 -1369.1123 c232.1626 -1366.293 240.6309 -1363.9092 250.502 -1363.0547 c261.6714 -1362.0889 272.9258 -1362.2773 284.1255 -1362.2773 c306.9907 -1362.2793 329.8564 -1362.3975 352.6938 -1363.6377 c363.4395 -1364.2207 374.5479 -1364.6445 384.9761 -1367.4141 c389.5098 -1368.6172 393.7637 -1371 398.5039 -1371 C415.7803 -1371 L435.2593 -1371 453.502 -1378.9922 473.0996 -1379 c483.3271 -1379.0039 493.4526 -1379.1934 503.4619 -1381.4746 c508.6958 -1382.667 513.25 -1385.1494 518.2725 -1386.8232 c524.0322 -1388.7432 529.792 -1390.6348 535.5518 -1392.5547 c544.3608 -1395.4912 551.5576 -1401.3389 560.0356 -1405.1084 c568.5708 -1408.9043 577.7593 -1409.0205 586.3086 -1412.7256 c595.646 -1416.7725 606.0005 -1418.5762 615.1836 -1422.9453 c624.7979 -1427.5186 635.2705 -1429.5869 645.605 -1431.8057 c666.6641 -1436.3262 687.2441 -1444.9199 707.6655 -1451.7266 c724.7666 -1457.4268 743.6699 -1457.6875 759.8232 -1466.1289 c768.521 -1470.6758 776.7744 -1476.0801 785.5078 -1480.583 c794.1211 -1485.0234 803.7109 -1487.0586 812.5186 -1491.0977 c819.7676 -1494.4219 826.2422 -1498.8857 832.0645 -1504.3125 c839.2622 -1511.0205 849.9844 -1513.7734 856.7705 -1520.8008 c862.5352 -1526.7695 867.3091 -1533.5313 874.1665 -1538.3926 c882.4097 -1544.2354 890.5903 -1550.1084 898.9434 -1555.8047 c907.311 -1561.5107 915.2642 -1567.6055 921.7227 -1575.4463 c928.2861 -1583.4141 935.4824 -1590.8232 943.0947 -1597.7881 c950.8159 -1604.8525 958.5811 -1611.5957 965.9961 -1619.0107 C991.4639 -1644.4785 L1005.5142 -1658.5293 1016.1201 -1675.1533 1029.1348 -1690.0742 c1042.207 -1705.0605 1054.644 -1720.8418 1066.3882 -1736.8799 c1071.8867 -1744.3887 1078.7524 -1750.6553 1084.3462 -1758.082 c1090.3711 -1766.083 1097.5073 -1774.5635 1102.3447 -1783.3037 c1106.4268 -1790.6787 1113.7979 -1798.1367 1120.5928 -1803.0166 c1123.9121 -1805.4004 1127.5459 -1807.3984 1130.5283 -1810.207 c1134.022 -1813.498 1136.4521 -1819.4385 1138.9209 -1823.5518 c1143.1377 -1830.5771 1147.353 -1837.5059 1152.7266 -1843.7119 c1159.1934 -1851.1797 1166.1875 -1857.998 1172.3857 -1865.7334 c1181.7363 -1877.4023 1190.1133 -1889.8428 1198.3975 -1902.2783 c1202.627 -1908.627 1206.8145 -1915.0039 1211.042 -1921.3545 c1214.2993 -1926.249 1218.5391 -1930.3311 1222.1006 -1934.9805 c1226.0049 -1940.0762 1228.1079 -1946.8506 1230.5288 -1952.7578 c1233.2065 -1959.293 1235.334 -1966.0566 1237.7241 -1972.6992 c1242.6855 -1986.4912 1247.9082 -2000.1807 1253.0879 -2013.8945 c1263.4834 -2041.415 1267.1357 -2071.667 1280.041 -2098.1807 c1286.7949 -2112.0566 1293.6401 -2125.665 1301.5557 -2138.9453 c1303.8125 -2142.7314 1305.998 -2146.4258 1307.9766 -2150.2373 C1322.4253 -2150.2373 L1318.6758 -2141.5654 1313.5181 -2133.6914 1308.7217 -2125.5264 cf0.609094 0 1 0 0.219608 0.94902 0.270588 Xa1214.1406 -2141.7285 m1209.8179 -2132.5195 1206.7363 -2122.832 1202.2549 -2113.6924 c1198.1934 -2105.4082 1193.3101 -2097.5371 1188.96 -2089.4043 c1183.7324 -2079.6318 1179.5811 -2069.3848 1174.1079 -2059.7012 c1163.5488 -2041.0205 1154.0752 -2021.7939 1143.5117 -2003.1123 c1138.6602 -1994.5322 1134.9302 -1985.4277 1130.043 -1976.8477 c1124.7344 -1967.5293 1118.293 -1959.0098 1111.8721 -1950.4492 c1105.7012 -1942.2207 1099.5303 -1933.9922 1093.3584 -1925.7646 c1090.3892 -1921.8047 1088.5459 -1916.1523 1086.3057 -1911.7227 c1083.6162 -1906.4053 1080.874 -1901.1152 1078.0776 -1895.8525 c1073.5146 -1887.2656 1068.6152 -1879.2432 1062.9741 -1871.3379 c1057.4834 -1863.6426 1053.7158 -1854.6191 1048.103 -1847.1396 c1042.7607 -1840.0205 1037.3228 -1832.9854 1031.1895 -1826.5234 c1028.2437 -1823.4189 1023.3325 -1820.7051 1020.9873 -1817.2236 c1018.3008 -1813.2354 1015.436 -1809.3633 1012.4863 -1805.5664 c1000.4663 -1790.0967 986.1836 -1776.5381 973.8955 -1761.2334 c961.7354 -1746.0879 949.4326 -1731.6025 940.605 -1714.1934 c936.6294 -1706.3525 932.9077 -1698.4072 928.4053 -1690.8457 c923.2866 -1682.251 915.874 -1674.7754 909.5444 -1667.0488 c903.5249 -1659.7002 897.5166 -1652.3428 891.4653 -1645.0195 c885.1172 -1637.3379 879.7427 -1629.1592 872.79 -1621.9463 c860.7026 -1609.4082 848.1919 -1596.4072 833.7295 -1586.6523 c826.3389 -1581.668 819.0127 -1576.8672 812.5835 -1570.6367 c806.5444 -1564.7832 799.5264 -1559.7852 792.0688 -1555.9063 c775.0996 -1547.0801 757.6846 -1538.6055 739.4814 -1532.626 c731.0923 -1529.8701 722.1787 -1528.0059 714.3545 -1523.8174 c706.1265 -1519.4131 698.2793 -1514.6318 689.5732 -1511.1758 c680.4976 -1507.5723 671.1719 -1504.332 662 -1500.8838 c652.1353 -1497.1768 644.082 -1491.4941 634.8296 -1486.6738 c626.9194 -1482.5537 618.1113 -1479.7939 609.874 -1476.3613 c600.3608 -1472.3984 590.6694 -1468.8857 581.126 -1464.998 c572.5371 -1461.499 564.5122 -1457.0664 555.584 -1454.4131 c546.2031 -1451.624 536.3936 -1450.4063 526.8359 -1448.3799 c506.9995 -1444.1758 487.4937 -1437.5801 467.8677 -1432.4463 c426.9893 -1421.752 386.3291 -1415.5703 344.0024 -1417.1113 c324.2446 -1417.8301 303.9575 -1416.6406 284.373 -1419.5859 c274.1021 -1421.1299 263.6958 -1420.625 253.3228 -1420.625 c242.1045 -1420.625 230.9658 -1422.0664 219.7915 -1423.041 c191.73 -1425.4873 163.6167 -1427.3066 135.4951 -1428.8965 c108.7729 -1430.4072 81.4321 -1429.9951 54.96 -1434.0684 c42.1694 -1436.0361 30.0894 -1440.4893 17.2344 -1442.042 c12.5796 -1442.6035 7.94482 -1443.1836 3.32373 -1443.8242 C3.32373 -1457.0723 L9.4873 -1456.124 15.6875 -1455.2793 21.9375 -1454.4688 c31.2827 -1453.2568 39.9946 -1450.4063 49.1553 -1448.3535 c59.1426 -1446.1172 69.3369 -1445.0205 79.5547 -1444.6621 c100.7637 -1443.917 121.9658 -1442.6836 143.1553 -1441.4609 c185.77 -1439.002 228.3818 -1433.626 271.0449 -1433.626 c280.8481 -1433.626 290.3525 -1431.5918 300.1548 -1431.1113 c310.5869 -1430.6016 321.0542 -1430.9307 331.4951 -1430.585 c352.9946 -1429.873 374.0425 -1429.5117 395.4966 -1431.4639 c436.6445 -1435.207 477.4204 -1447.9014 516.9551 -1459.3428 c525.5605 -1461.833 534.5347 -1463 543.2969 -1464.7988 c553.4873 -1466.8916 562.3286 -1470.8867 571.7778 -1475.0469 c580.2681 -1478.7842 588.9888 -1481.9795 597.6299 -1485.3438 c602.2344 -1487.1367 606.792 -1489.0283 611.29 -1491.0742 c616.2227 -1493.3174 621.3467 -1494.7432 626.2881 -1496.9414 c634.5825 -1500.6299 641.5771 -1506.4248 649.9385 -1509.9941 c654.3193 -1511.8643 658.7881 -1513.5117 663.2456 -1515.1875 c668.6709 -1517.2266 673.9722 -1520.4033 679.6118 -1521.667 c688.4326 -1523.6426 696.3467 -1528.5713 704.1099 -1532.9883 c712.2305 -1537.6094 720.6611 -1540.4229 729.5703 -1543.1465 c738.4834 -1545.8711 747.2256 -1548.7441 755.3374 -1553.417 c759.1758 -1555.6279 764.2744 -1556.3467 768.3638 -1558.2393 c773.4165 -1560.5781 778.2627 -1563.3818 783.1963 -1565.957 c798.8076 -1574.1035 810.8086 -1587.0068 825.4399 -1596.7256 c840.2163 -1606.541 852.8613 -1620.002 865.1563 -1632.7559 c871.5488 -1639.3867 876.417 -1647.1416 882.2729 -1654.2119 c888.832 -1662.1318 895.3267 -1670.1055 901.8428 -1678.0605 c907.9937 -1685.5693 914.5469 -1692.7354 919.3862 -1701.1846 c924.1323 -1709.4697 927.9873 -1718.2471 932.4487 -1726.6855 c941.2695 -1743.3691 954.4224 -1757.6211 966.1831 -1772.2686 c978.5552 -1787.6777 993.1685 -1801.1709 1004.96 -1817.0088 c1007.0469 -1819.8115 1009.0845 -1824.542 1011.8389 -1826.6738 c1015.4458 -1829.4668 1018.7886 -1832.4746 1021.9971 -1835.7148 c1028.9072 -1842.6943 1035.7534 -1850.833 1040.312 -1859.5254 c1044.3955 -1867.3115 1049.3291 -1874.5967 1054.4863 -1881.7021 c1060.6938 -1890.2549 1065.4951 -1899.752 1070.3789 -1909.1123 c1075.1372 -1918.2324 1079.0449 -1928.208 1085.2192 -1936.4395 c1091.9048 -1945.3535 1098.5898 -1954.2676 1105.2754 -1963.1816 c1112.6934 -1973.0732 1119.25 -1983.4297 1124.7266 -1994.5244 c1130.1475 -2005.5049 1136.0142 -2016.1719 1141.6899 -2027.0498 c1147.7715 -2038.7051 1153.582 -2050.3535 1160.2427 -2061.6914 c1167.2026 -2073.5391 1172.4478 -2086.082 1178.9048 -2098.1523 c1184.4067 -2108.4385 1190.7017 -2118.3008 1195.0332 -2129.1729 c1197.8726 -2136.2979 1200.7554 -2143.3242 1203.9546 -2150.2373 C1218.5488 -2150.2373 L1217.002 -2147.4434 1215.4995 -2144.624 1214.1406 -2141.7285 cf0.488899 0 0.065187 0 0.352941 0.890196 0.976471 Xa1107.897 -2128.041 m1103.7705 -2118.7393 1098.585 -2110.0137 1093.3584 -2101.2988 c1088.5586 -2093.2949 1086.334 -2083.5195 1082.6509 -2074.9688 c1078.5195 -2065.377 1073.2275 -2056.2773 1068.6753 -2046.873 c1060.2456 -2029.459 1052.5703 -2011.6904 1043.583 -1994.5488 c1034.562 -1977.3428 1025.1221 -1960.2607 1015.1323 -1943.5918 c1010.165 -1935.3037 1005.0503 -1927.1045 999.9336 -1918.9072 c995.2456 -1911.3975 991.7549 -1903.1992 987.7007 -1895.332 c979.6743 -1879.7578 968.9946 -1866.8955 957.4766 -1853.8232 c951.2373 -1846.7422 944.6431 -1839.9736 938.0205 -1833.2529 c931.6025 -1826.7383 925.6641 -1819.9238 919.3828 -1813.2998 c913.6846 -1807.291 907.6655 -1801.5986 902.0054 -1795.5508 c895.1567 -1788.2344 889.4448 -1779.9678 883.249 -1772.1094 c877.6118 -1764.96 871.7153 -1758.6934 864.8252 -1752.7861 c857.8184 -1746.7793 851.8022 -1739.7539 844.6348 -1733.9092 c842.3516 -1732.0479 840.7798 -1729.5898 838.4873 -1727.6836 c835.6753 -1725.3447 832.4956 -1723.4697 829.4814 -1721.4131 c822.2988 -1716.5098 817.0205 -1710.1045 811.2119 -1703.7109 c806.2549 -1698.2549 799.23 -1694.1367 793.7822 -1689.0264 c787.6372 -1683.2627 781.6729 -1677.3438 775.1196 -1672.0332 c768.5991 -1666.75 761.5435 -1662.8682 754.2598 -1658.7861 c745.9814 -1654.1475 738.1318 -1648.7568 730.3574 -1643.3311 c723.0117 -1638.2041 715.7485 -1632.9639 708.3359 -1627.9336 c700.3711 -1622.5293 693.3428 -1616.2607 685.6509 -1610.4912 c670.8848 -1599.415 655.6807 -1592.3975 638.1602 -1586.9268 c630.3101 -1584.4756 623.313 -1579.6191 616.5342 -1575.1055 c609.1143 -1570.165 600.3877 -1567.584 592.5313 -1563.4521 c576.9883 -1555.2793 561.2959 -1547.3672 544.1187 -1543.1729 c539.8975 -1542.1416 535.7158 -1541.6445 531.5986 -1540.2266 c527.5923 -1538.8457 523.6152 -1537.3799 519.6323 -1535.9346 c510.8726 -1532.7549 502.0913 -1529.6465 493.0898 -1527.2129 c484.7168 -1524.9502 476.0864 -1523.5264 467.4971 -1522.4014 c462.5605 -1521.7549 457.6509 -1521.1309 452.7686 -1520.1426 c447.9741 -1519.1729 443.2402 -1519.0088 438.5112 -1517.5928 c429.9604 -1515.0313 422.2847 -1512.1445 413.2832 -1511.3926 c408.8472 -1511.0215 404.3828 -1511.2109 399.9385 -1511.0645 c395.7417 -1510.9268 391.541 -1509.0938 387.5977 -1507.8125 c380.0137 -1505.3486 371.6157 -1505.1436 363.7222 -1504.3906 c353.9165 -1503.4551 344.0503 -1503.1719 334.2061 -1503.0088 c294.8481 -1502.3545 255.439 -1502.9072 216.0762 -1502.9072 c187.6162 -1502.9072 159.1533 -1502.7803 130.6943 -1502.958 c116.9727 -1503.0439 103.2544 -1503.3633 89.5532 -1504.1338 c75.335 -1504.9336 61.3003 -1507.0918 47.1138 -1508.1914 c32.5396 -1509.3213 17.9224 -1509.6758 3.32373 -1510.292 C3.32373 -1523.1543 L10.0952 -1522.8965 16.8647 -1522.7012 23.6074 -1522.4395 c43.3003 -1521.6738 62.6782 -1519.0801 82.293 -1517.6035 c102.4165 -1516.0889 122.624 -1515.9443 142.7944 -1515.9092 c183.3989 -1515.8369 224.0039 -1515.9063 264.6084 -1515.9063 c284.0693 -1515.9063 303.5308 -1515.8701 322.9917 -1515.915 c341.5327 -1515.959 360.5767 -1516.0381 378.9199 -1518.9873 c386.1138 -1520.1445 392.584 -1523.3408 399.9385 -1524.0645 c404.3364 -1524.498 408.8623 -1524.1445 413.2832 -1524.3926 c418.8657 -1524.7051 424.0376 -1526.2705 429.2686 -1528.125 c446.6318 -1534.2813 465.7036 -1534.7432 483.7183 -1538.3428 c491.9878 -1539.9951 500.0405 -1542.7607 507.9868 -1545.5342 c516.4561 -1548.4893 525.314 -1553.041 534.1895 -1554.4131 c551.2251 -1557.0459 569.6665 -1564.4756 584.2261 -1573.6787 c591.1748 -1578.0713 599.2861 -1580.4512 606.5483 -1584.2695 c614.3047 -1588.3477 621.0366 -1593.8047 629.1563 -1597.3164 c637.4438 -1600.9014 646.3115 -1602.5186 654.5376 -1606.3574 c662.6816 -1610.1572 670.1426 -1615.3203 677.4438 -1620.5156 c684.6162 -1625.6191 690.627 -1631.834 698.0024 -1636.6455 c706.1499 -1641.9609 714.0308 -1647.6797 721.981 -1653.2822 c729.1626 -1658.3428 736.4292 -1663.2725 743.9473 -1667.8223 c751.9424 -1672.6611 760.1665 -1676.5586 767.4775 -1682.4824 c773.4976 -1687.3604 778.9722 -1692.8945 784.5898 -1698.2188 c790.542 -1703.8613 797.916 -1708.3867 803.3911 -1714.4131 c808.771 -1720.335 813.8291 -1725.4482 820.0381 -1730.4756 c822.9292 -1732.8164 826.1211 -1734.7461 829.1865 -1736.8408 c830.5913 -1737.8008 831.6714 -1738.8877 832.5449 -1740.334 c833.9629 -1742.6836 836.8701 -1744.251 838.917 -1746.0059 c845.3359 -1751.5088 850.9019 -1757.9229 857.3267 -1763.4307 c864.9766 -1769.9883 871.2495 -1777.5977 877.3965 -1785.5781 c882.8691 -1792.6836 888.1489 -1799.7607 894.2871 -1806.3184 c900.3252 -1812.7695 906.7944 -1818.7988 912.8037 -1825.2783 c925.5518 -1839.0234 938.9746 -1852.2637 951.2827 -1866.4443 c956.8228 -1872.8281 962.5718 -1879.0791 967.3145 -1886.0918 c972.2266 -1893.3555 976.2119 -1901.2334 980.1025 -1909.0742 c988.5771 -1926.1543 999.1328 -1941.9443 1008.7915 -1958.3818 c1018.5474 -1974.9844 1027.8818 -1992.0439 1036.5342 -2009.2451 c1046.7441 -2029.543 1055.5342 -2050.5146 1066.105 -2070.6377 c1071.3096 -2080.5459 1074.7129 -2091.0273 1079.1274 -2101.2773 c1083.7998 -2112.125 1090.7471 -2121.8271 1095.7593 -2132.5449 c1097.9844 -2137.3027 1099.5527 -2142.3281 1100.6777 -2147.4492 c1100.8809 -2148.375 1101.1558 -2149.3057 1101.4575 -2150.2373 C1115.6221 -2150.2373 L1112.9561 -2142.8535 1111.0938 -2135.2451 1107.897 -2128.041 cf0.336645 0.664637 0 0 0.858824 0.372549 1 Xa983.6494 -2125.9844 m976.5938 -2110.5449 971.0405 -2094.5059 965.6514 -2078.4268 c960.3032 -2062.4678 955.0806 -2046.4678 948.791 -2030.8467 c942.7231 -2015.7754 934.8091 -2001.5557 928.353 -1986.623 c925.0928 -1979.084 921.6738 -1971.7295 918.8364 -1964.0254 c916.1445 -1956.7158 912.4854 -1949.8135 908.4434 -1943.1729 c904.6563 -1936.9502 900.4287 -1930.9971 896.3193 -1924.9863 c891.4863 -1917.9189 887.8384 -1910.1045 883.3984 -1902.7725 c874.7759 -1888.5313 863.8071 -1876.0664 854.8027 -1862.1328 c850.6069 -1855.6396 846.8413 -1848.8789 842.6445 -1842.3848 c837.8394 -1834.9492 832.1235 -1828.25 826.2974 -1821.6074 c820.895 -1815.4482 815.3438 -1809.4209 809.8408 -1803.3516 c807.0781 -1800.3047 804.3354 -1797.2402 801.6128 -1794.1582 c798.6201 -1790.7705 795.7729 -1786.1436 792.0688 -1783.5537 c786.1807 -1779.4365 781.6118 -1773.7236 776.8667 -1768.4004 c771.8511 -1762.7725 766.4072 -1757.4912 760.8311 -1752.4229 c755.3677 -1747.457 749.457 -1743.1436 743.2192 -1739.209 c737.2793 -1735.4639 730.25 -1732.4053 725.2593 -1727.415 c715.0942 -1717.251 703.731 -1707.9424 692.04 -1699.5234 c680.2686 -1691.0469 668.0015 -1683.3047 656.249 -1674.8184 c649.8242 -1670.1777 642.478 -1667.0947 635.5376 -1663.332 c628.8877 -1659.7285 622.0952 -1656.6797 615.1689 -1653.5596 c611.8545 -1652.0664 608.4766 -1650.7324 605.0308 -1649.5771 c602.3447 -1648.6758 600.5981 -1647.0605 598.0547 -1645.6729 c591.8794 -1642.3027 584.6694 -1644.457 578.6558 -1641.5859 c572.3218 -1638.5625 566.7852 -1634.4727 560.127 -1632.0479 c552.144 -1629.1406 543.2959 -1627.8115 535.1113 -1625.4492 c527.5522 -1623.2666 520.1055 -1620.7275 512.8159 -1617.7666 c504.7178 -1614.4766 497.3447 -1610.126 489.0649 -1607.2295 c472.7329 -1601.5156 455.9619 -1597.1367 439.1973 -1592.9063 c423.2949 -1588.8926 407.7168 -1584.877 391.4316 -1582.6191 c375.0098 -1580.3418 358.4805 -1579.0059 341.9834 -1577.416 c308.623 -1574.2002 275.7012 -1568.6143 242.1719 -1566.9043 c216.7373 -1565.6074 190.3652 -1564.4453 165.0327 -1567.5771 c152.0537 -1569.1816 139.5317 -1570.1543 126.4194 -1569.793 c113.7466 -1569.4443 101.1221 -1568.6572 88.4375 -1568.7656 c61.2319 -1568.999 34.0718 -1570.9082 6.87109 -1571.3857 c5.68555 -1571.4063 4.50488 -1571.4316 3.32373 -1571.457 C3.32373 -1584.127 L13.8115 -1583.958 24.3135 -1583.9551 34.7754 -1583.5439 c52.6602 -1582.8418 70.5376 -1581.9756 88.4375 -1581.7656 c105.2808 -1581.5684 122.0762 -1583.0557 138.9165 -1582.9355 c155.4619 -1582.8184 171.6685 -1579.4453 188.2314 -1579.0918 c205.5205 -1578.7227 222.8481 -1579.0225 240.1216 -1579.8057 c273.686 -1581.3271 306.6196 -1586.9004 339.9893 -1590.2207 c356.6431 -1591.8779 373.3481 -1593.127 389.9321 -1595.4258 c406.2212 -1597.6846 421.832 -1601.9316 437.7358 -1605.9453 c454.5322 -1610.1836 471.2451 -1614.7393 487.604 -1620.4629 c495.0903 -1623.082 502.0308 -1627.2227 509.3599 -1630.3018 c517.2188 -1633.6045 525.377 -1636.1719 533.5591 -1638.5342 c541.21 -1640.7432 548.9468 -1642.6514 556.6709 -1644.583 c563.8931 -1646.3896 569.8628 -1652.3662 576.8896 -1654.9258 c582.3511 -1656.916 588.8574 -1654.3809 593.7676 -1658.2744 c596.8594 -1660.7256 599.6387 -1661.4629 603.3789 -1662.7178 c607.3301 -1664.043 611.0859 -1665.9053 614.8535 -1667.667 c642.0068 -1680.3672 668.0767 -1696.3623 691.4229 -1715.3291 c697.0762 -1719.9209 703.6934 -1724.2344 708.8257 -1729.3662 c713.3916 -1733.9316 717.6089 -1738.6133 723.0566 -1742.1221 c729.1807 -1746.0674 735.5381 -1749.627 741.6235 -1753.6367 c748.0425 -1757.8672 753.6396 -1763.3232 759.105 -1768.6895 c764.2529 -1773.7451 768.9761 -1779.1475 773.8262 -1784.4814 c776.1831 -1787.0732 778.6929 -1789.4854 781.3926 -1791.7168 c785.0483 -1794.7373 787.9316 -1798.2051 791.0488 -1801.7871 c802.3491 -1814.7715 814.2749 -1827.1904 825.333 -1840.3887 c835.9067 -1853.0078 842.5776 -1868.5469 852.7603 -1881.5293 c863.0625 -1894.6621 872.2988 -1908.5537 880.1099 -1923.3145 c887.2563 -1936.8213 897.4258 -1948.4297 904.0933 -1962.2998 c907.4546 -1969.293 909.6973 -1976.7324 912.9644 -1983.7949 c916.6235 -1991.7041 919.8999 -1999.7852 923.4971 -2007.7227 c928.1348 -2017.9561 933.604 -2027.5801 937.7559 -2038.0586 c942.2188 -2049.3232 946.0811 -2060.8203 949.9209 -2072.3076 c953.7617 -2083.7969 957.564 -2095.2988 961.7583 -2106.666 c966.0039 -2118.1719 971.4639 -2129.1885 974.8247 -2140.9932 c975.6968 -2144.0576 976.5156 -2147.1406 977.2993 -2150.2373 C990.5903 -2150.2373 L988.8076 -2142.1748 987.0664 -2133.4609 983.6494 -2125.9844 cfu0.628016 0.2916 0 0 0.247059 0.635294 1 Xa328.8989 -547.5972 m320.5356 -555.6348 308.6348 -559.3057 297.6841 -562.2456 c284.7056 -565.7305 271.9155 -566.335 258.5137 -565.978 c234.4146 -565.3354 209.7944 -566.3013 187.25 -556.481 c168.0112 -548.1006 150.4648 -533.3652 144.1758 -512.7534 c139.8745 -498.6563 142.0894 -483.4312 143.7246 -469.0889 c145.3169 -455.124 144.7495 -441.0503 147.6875 -427.2622 c153.3872 -400.5117 170.7085 -378.6895 180.6772 -353.623 c188.1724 -334.7769 198.2939 -309.2559 220.0283 -303.3877 c221.8306 -302.9009 222.9141 -301.8979 223.6475 -300.6597 C226.8955 -300.6602 230 -298.5679 230 -294.377 C230 -291.6338 L230 -287.9805 227.1821 -285.2793 223.6431 -285.1338 c216.0034 -284.8198 212.4609 -273.04 210.4453 -267.1851 c209.0234 -263.0581 207.8101 -258.8828 206.3403 -254.7705 c205.2827 -251.8125 204.2954 -248.8599 203.5327 -245.8105 c202.5225 -241.7705 203.4878 -238.6719 204.4248 -234.7412 c205.8525 -228.752 207.144 -222.7607 208.6743 -216.7993 c209.8931 -212.0518 213.832 -208.6035 217.7651 -206.0264 c226.7241 -200.1558 237.4487 -198.1777 246.3076 -192.1699 c250.3608 -189.4214 252.9019 -185.7617 252.0967 -180.7046 c251.7397 -178.4648 250.582 -176.3848 249.4355 -174.4561 c247.3184 -170.894 245.585 -167.1841 244.4336 -163.1919 c243.52 -160.0229 243.6157 -157.4722 241.8882 -154.5015 c240.5156 -152.1406 238.9585 -149.9004 237.6318 -147.5098 c234.5166 -141.8965 235.7715 -134.3608 235.7715 -128.1802 c235.7715 -111.9224 235.2236 -95.4736 238.2817 -79.4292 c240.8628 -65.8911 246.2051 -54.062 252.2212 -41.7485 c256.5435 -32.9019 260.459 -24.4531 266.353 -16.4771 c268.2603 -13.8965 270.3682 -11.3638 272.1602 -8.66553 C256.0835 -8.66553 L248.7666 -18.7202 243.8101 -29.4409 238.3457 -40.5967 c232.1001 -53.3457 227.4521 -65.8765 225.0352 -79.8911 c222.2891 -95.812 222.7715 -112.0913 222.7715 -128.1802 c222.7715 -134.4678 222.2607 -140.9595 223.5962 -147.1416 c224.2119 -149.9912 225.688 -152.7764 227.0913 -155.3052 c227.7593 -156.5088 228.5259 -157.6626 229.2637 -158.8232 c229.7397 -159.564 230.2061 -160.3105 230.6631 -161.063 C230.8486 -161.4111 230.9907 -161.6729 231.0967 -161.8613 C231.4795 -168.3979 234.7134 -175.606 238.2109 -181.0176 c238.3833 -181.2847 238.5269 -181.5137 238.6543 -181.7207 C236.7002 -183.0928 234.6387 -184.3384 232.4316 -185.1895 c222.3623 -189.0762 212.1099 -192.8496 204.0786 -200.3306 c195.1523 -208.6445 194.1978 -221.6382 191.5303 -232.8286 c190.5322 -237.0151 189.6865 -240.1309 190.2095 -244.4878 c190.7158 -248.709 191.8911 -252.6821 193.2896 -256.6831 c195.2583 -262.3169 196.9956 -268.04 199.0469 -273.6436 c201.6055 -280.6318 205.2275 -288.0327 210.7715 -292.8521 C192.1406 -300.7158 181.7461 -319.8784 173.0591 -337.4204 c170.29 -343.0117 168.7549 -349.0625 166.1899 -354.7622 c163.25 -361.2964 159.6802 -367.54 156.2378 -373.8164 c149.8555 -385.4517 143.415 -397.5425 138.9946 -410.0781 c134.7476 -422.1221 132.3779 -435.1973 132.2612 -447.9697 c132.1143 -464.0469 128.6118 -479.8765 128.7695 -495.9678 c129.001 -519.6382 140.5063 -540.3438 159.0112 -554.7197 c170.333 -563.5151 183.3618 -569.7583 197.1211 -573.7095 c211.9775 -577.9756 226.9673 -577.6694 242.2495 -578.3164 c260.2227 -579.0776 278.1646 -580.1621 295.8354 -576.0981 c310.7363 -572.6709 326.8271 -567.6147 338.0913 -556.7896 c344.1455 -550.9717 334.9414 -541.79 328.8989 -547.5972 cf425.4854 -355.731 m436.1675 -355.7266 448.4531 -355.9971 457.8501 -350.252 C457.3765 -351.5874 456.9111 -352.9253 456.4482 -354.2612 c452.9453 -364.3628 453 -374.5391 453 -385.0923 C453 -416.7109 L453 -419.0029 452.667 -421.7881 453.9678 -423.8232 c455.4053 -426.0732 456.6987 -428.3896 457.8691 -430.7891 c460.2632 -435.6987 462.1958 -440.8281 464.5908 -445.7402 c468.9072 -454.5923 477.4102 -461.3403 486.4941 -464.9741 c494.938 -468.3521 503.9814 -468.1836 512.9229 -468.1836 c515.5415 -468.1836 519.2397 -468.854 521.7266 -467.9512 c524.3491 -466.9995 526.8799 -465.9053 529.3301 -464.5688 c533.9023 -462.0742 537.8872 -458.3584 541.5952 -454.7534 c548.0234 -448.5039 553.5327 -441.5786 558.6797 -434.3306 C559.0264 -435.3633 559.3433 -436.4048 559.7266 -437.3569 c561.6162 -442.0518 565.3296 -444.6885 569.543 -447.2842 c576.731 -451.7124 584.7451 -454.2905 592.7334 -456.749 c601.5391 -459.46 610.459 -461.4561 619.7085 -460.2671 c630.1172 -458.9292 640.3633 -453.9312 649.397 -448.793 c662.2539 -441.481 696.5249 -407.7314 669.8364 -397.8184 c661.9609 -394.8931 658.5938 -407.4614 666.3804 -410.3535 c666.5518 -410.417 666.6655 -410.4736 666.7563 -410.5229 C666.6616 -411.1982 666.3965 -412.1494 665.9673 -413.0513 c664.0894 -416.9976 661.2031 -420.4219 658.3311 -423.6704 c655.5303 -426.8384 652.5239 -429.8218 649.4941 -432.7681 c645.4487 -436.7026 640.1699 -439.1748 635.124 -441.6328 c627.6089 -445.2935 619.6826 -447.9946 611.2607 -447.6167 c604.1504 -447.2979 597.1836 -444.4443 590.4185 -442.4727 c584.2437 -440.6724 577.3335 -437.5996 572.3555 -433.4644 c570.4624 -431.8916 569.6548 -426.9014 568.6069 -424.6631 c567.189 -421.6338 564.5 -419.3291 561.6802 -417.6729 c558.4888 -415.7979 554.7471 -417.0659 552.7871 -420.0044 c547.2656 -428.2813 541.5947 -436.2534 534.604 -443.3735 c531.3467 -446.6909 528.0156 -449.9326 524.1357 -452.5156 c519.522 -455.5864 515.1719 -455.1836 509.8428 -455.1836 c502.7856 -455.1836 495.7383 -455.2134 489.2549 -452.04 c485.4473 -450.1763 482.2402 -447.4434 479.1787 -444.5591 c475.8926 -441.4624 474.2046 -435.792 472.4551 -431.7334 c470.7334 -427.7378 468.9355 -423.7622 466.8408 -419.9448 C466.1543 -418.3115 466 -418.0884 466 -419.2754 C466 -380.1084 L466 -371.1694 466.918 -363.5547 469.8965 -355.1045 c473.3926 -345.188 478.8364 -336.1694 482.3447 -326.2749 c484.1968 -321.0522 477.4087 -315.7061 472.8164 -318.9346 c466.4292 -323.4248 461.7896 -329.5537 456.2734 -334.9849 c449.3506 -341.8008 441.1533 -342.377 431.833 -342.6616 c424.3286 -342.8906 417.8818 -342.2808 412.1738 -336.9448 c407.3159 -332.4043 404.7969 -325.8652 402.9673 -319.6294 c400.7935 -312.2212 400.1841 -305.3989 400.5078 -297.6968 c400.707 -292.957 401.4761 -288.3862 402.8018 -283.8345 c403.5 -281.4385 404.9351 -279.2808 405.5889 -276.9058 c406.3022 -274.311 405.9678 -271.353 406.5029 -268.6772 c407.46 -263.8911 409.6108 -259.5698 412.1011 -255.4194 c413.8354 -252.5288 415.0264 -249.4204 417.1313 -246.7212 c419.5928 -243.5645 423.9126 -238.603 428.3164 -236.2998 C432.0527 -239.3438 439 -237.5811 439 -231 C439 -229.4653 439 -228.5513 v439 -225.1514 435.9077 -221.8618 432.3667 -222.0513 c424.0898 -222.4946 417.0654 -228.0376 411.4258 -233.6724 c408.4541 -236.6426 405.7725 -240.0737 403.6128 -243.6738 c400.7983 -248.3662 397.9731 -253.4995 396.0317 -258.6387 c395.0112 -261.3403 394.2129 -264.0352 393.6465 -266.8672 c393.2739 -268.7285 393.6641 -271.9995 392.8906 -273.6294 c390.0449 -279.6313 388.7393 -285.9551 387.9204 -292.5 c386.6587 -302.5845 387.5503 -312.1934 390.1206 -321.958 c394.5254 -338.689 406.3325 -355.7383 425.4854 -355.731 cf1063.0615 -76.6865 m1054.6772 -76.668 1054.6792 -89.668 1063.0615 -89.6865 c1066.644 -89.6943 1070.2754 -89.5513 1070.2754 -94.1211 c1070.2754 -99.3354 1071.189 -105.4839 1070.1641 -110.5996 c1067.9204 -121.8052 1065.8296 -137.1685 1057.2715 -145.5908 c1052.6548 -150.1343 1047.5552 -154.0596 1041.9976 -157.3789 c1036.9976 -160.3652 1031.3066 -162.1035 1025.918 -164.2305 c1020.752 -166.2695 1015.3872 -166.3423 1010.2422 -167.9756 c1005.0649 -169.6191 999.8809 -169.9351 994.4937 -169.9395 c990.0381 -169.9434 985.7607 -175.6577 988.8809 -179.7202 c997.6958 -191.1968 1008.9063 -200.4214 1018.1533 -211.5103 c1021.6602 -215.7158 1022.061 -222.8945 1022.2593 -228.1357 c1022.4536 -233.2676 1022.0352 -239.001 1019.5811 -243.6113 c1013.6821 -254.6953 1002.3188 -261.9014 991.6724 -267.7866 c985.373 -271.2695 979.0874 -273.1475 972.2095 -275.1636 c964.2305 -277.5029 956.2207 -279.5063 947.8672 -279.6484 c939.4932 -279.791 939.4795 -292.791 947.8672 -292.6484 c956.7925 -292.4966 965.4619 -290.5894 974.019 -288.1748 c982.0327 -285.9131 989.4609 -283.6934 996.8281 -279.7739 c1010.0259 -272.7515 1022.2939 -263.916 1030.2764 -251.0313 c1037.2554 -239.7651 1036.4502 -223.2686 1032.4126 -211.1431 c1029.9331 -203.6978 1023.7866 -198.0562 1018.4175 -192.5659 c1014.9106 -188.9805 1011.2485 -185.4902 1007.7441 -181.8628 C1009.7349 -181.5127 1011.7188 -181.0757 1013.6982 -180.5112 c1016.8877 -179.6021 1020.3076 -179.4961 1023.5527 -178.6689 c1027.04 -177.7808 1030.3633 -176.3867 1033.6694 -174.9912 c1040.9951 -171.8984 1047.8574 -169.3999 1054.4678 -164.772 c1061.0488 -160.1646 1067.2554 -154.9155 1071.5132 -148.0557 c1079.4209 -135.3159 1083.2754 -118.1948 1083.2754 -103.3794 c1083.2754 -96.0527 1084.292 -88.8931 1079.4189 -82.8032 c1075.3184 -77.6782 1069.2695 -76.7002 1063.0615 -76.6865 cf798.7451 -637.2183 m798.4517 -650.4248 789.6992 -659.9292 780.8979 -668.8247 c771.0396 -678.7881 760.4814 -687.8652 749.5298 -696.5972 c744.6855 -700.4595 739.6758 -703.6953 734.6265 -707.2358 c729.6055 -710.7568 724.9614 -714.7329 719.6709 -717.8677 c717.1665 -719.3516 714.5645 -720.3525 711.7656 -721.123 c708.376 -722.0557 705.3047 -723.7969 702.0962 -725.2412 c695.5898 -728.1704 688.6938 -730.1992 681.8047 -731.998 c675.0205 -733.769 667.4473 -733.9316 660.4736 -734.5386 c652.7661 -735.2095 645.0317 -735.5073 637.2974 -735.2695 c623.4243 -734.8428 609.3477 -731.2104 596.665 -725.6484 c585.7207 -720.8486 574.5581 -715.8101 564.4229 -709.5576 c558.3711 -705.8242 554.4736 -699.498 548.229 -696.1245 c542.1289 -692.8286 536.5498 -688.6113 531.3433 -684.0586 c522.3252 -676.1724 515.3799 -666.3486 508.6675 -656.5059 c504.8291 -650.8784 501.335 -645.0313 498.0884 -639.0449 c497.9253 -638.7441 496.1592 -633.7417 496.3032 -636.6528 c496.249 -635.5557 496.0283 -634.459 495.8574 -633.375 c495.5195 -631.2275 494.8857 -629.1221 494.1992 -627.0645 c492.9839 -623.4204 490.7837 -618.3086 486.5566 -617.3472 c481.0352 -616.0908 476.231 -619.335 472.3481 -622.8906 c470.4893 -624.5928 468.9072 -626.6113 467.2725 -628.5225 c465.6265 -630.4468 462.1841 -631.1284 459.8555 -631.9409 c453.7612 -634.0659 447.3398 -635.3726 440.9199 -635.9546 c429.8354 -636.96 417.5508 -635.4458 407.6094 -630.2319 c395.6201 -623.9434 386.3164 -615.0483 376.8408 -605.541 c368.7666 -597.4404 361.4614 -589.3638 358.9619 -577.8931 c358.479 -575.6753 356.7817 -573.5879 356.1177 -571.3389 c355.3652 -568.7896 355.1689 -566.186 355.0859 -563.5439 c354.9121 -558.0244 355.9404 -552.2495 358.3066 -547.2461 c361.8701 -539.7119 350.6646 -533.1099 347.082 -540.6846 c341.9312 -551.5742 340.5083 -564.3828 343.9434 -576.0186 c344.6348 -578.3604 346.2412 -580.498 346.7539 -582.8506 c347.3882 -585.7632 348.4668 -588.6108 349.6929 -591.3218 c352.2856 -597.0537 355.9849 -602.0273 360.085 -606.7686 c368.9136 -616.9766 379.061 -626.8501 389.9868 -634.7788 c400.7983 -642.624 412.8154 -646.9238 425.9766 -648.6436 c438.9658 -650.3413 452.5747 -648.2202 464.8721 -643.9321 c467.9595 -642.8555 470.9717 -641.5117 473.9126 -640.0879 c475.8623 -639.1445 477.4106 -636.5981 478.7832 -635.0088 c479.8125 -633.8169 480.8774 -632.6816 482.0532 -631.6738 C482.2695 -632.3833 482.4648 -633.0996 482.6587 -633.8115 c483.2354 -635.9268 483.0186 -636.9653 483.5635 -638.9463 c484.499 -642.3491 486.9233 -645.7505 488.6265 -648.8213 c492.0884 -655.064 495.9927 -661.0498 500.0869 -666.8926 c507.7134 -677.7769 515.6875 -688.0239 525.9961 -696.5142 c530.9053 -700.5566 536.1328 -704.2183 541.668 -707.3496 c544.7676 -709.103 547.0928 -711.8857 549.689 -714.2983 c552.626 -717.0278 555.8208 -719.5239 559.2329 -721.6289 c569.3149 -727.8481 580.7026 -732.7505 591.5957 -737.5278 c604.4341 -743.1582 618.1738 -746.7407 632.1436 -747.9702 c646.9189 -749.271 661.9126 -747.5962 676.5781 -745.8447 c683.415 -745.0283 689.8159 -743.4453 696.3589 -741.2979 c703.271 -739.0293 709.7051 -735.1763 716.6807 -733.2568 c728.4209 -730.0264 736.667 -720.6084 746.9775 -714.7734 c752.5356 -711.6279 757.5171 -706.7686 762.5039 -702.7642 c768.0225 -698.3325 773.4307 -693.772 778.6782 -689.021 c788.4604 -680.1636 798.6831 -670.6172 805.5698 -659.2485 c809.6064 -652.585 811.5732 -644.9644 811.7451 -637.2183 c811.9316 -628.8301 798.9312 -628.8481 798.7451 -637.2183 cf1391.165 -214.8286 m1389.5469 -208.0391 1388.6265 -201.4102 1385.457 -195.1021 c1382.6885 -189.5933 1379.7329 -184.2104 1376.1431 -179.1885 c1372.4365 -174.0039 1367.353 -167.521 1361.4258 -164.8271 c1358.0059 -163.2729 1354.3076 -162.5518 1350.7905 -161.3574 C1351.5518 -161.0801 1352.3154 -160.8115 1353.0684 -160.5317 c1362.3096 -157.0972 1370.0566 -150.7505 1376.0522 -142.5518 c1379.0723 -138.4224 1381.9326 -134.374 1383.5869 -129.4839 c1385.5913 -123.5576 1385.4922 -116.7827 1385.3706 -110.6099 c1385.2539 -104.667 1385.4702 -98.4209 1384.2368 -92.5996 c1382.9141 -86.3574 1380.2529 -80.3394 1377.4014 -74.6646 c1371.8232 -63.5669 1363.7739 -53.3379 1353.6948 -46.0322 c1351.1152 -44.1631 1348.1143 -43.0752 1345.0967 -42.1294 c1341.3086 -40.9424 1337.3774 -39.5654 1333.5776 -38.5205 c1329.7915 -37.479 1325.8213 -38.0171 1321.915 -37.772 C1323.1157 -36.5317 1324.4053 -35.3843 1325.1133 -34.5737 c1328.0474 -31.2163 1329.9956 -27.5957 1331.6255 -23.4668 c1333.54 -18.6152 1334.6245 -13.6865 1335.4243 -8.66553 C1322.167 -8.66553 L1321.2363 -13.7622 1320.0596 -18.6641 1317.3911 -23.4053 c1313.5562 -30.2188 1306.9678 -33.5596 1306.1504 -42.0454 c1305.9541 -44.0859 1307.4873 -46.811 1309.3696 -47.6582 c1314.9014 -50.1465 1320.5732 -50.9673 1326.604 -51.2241 c1330.2354 -51.3789 1330.1729 -51.2065 1333.4131 -52.4165 c1337.207 -53.8325 1341.3149 -54.2041 1345.0249 -55.8862 c1349.7642 -58.0347 1353.77 -63.0767 1357.0171 -66.958 c1361.2891 -72.0649 1364.6616 -78.0107 1367.5352 -83.9917 c1372.8555 -95.0645 1372.9727 -107.5396 1372.229 -119.6147 c1371.6025 -129.7783 1363.354 -139.5171 1355.1724 -145.0361 c1354.062 -145.7852 1352.9775 -146.2769 1351.938 -147.1587 c1353.1885 -146.0981 1351.4883 -147.249 1351.2383 -147.3701 c1350.1064 -147.9204 1348.2539 -148.499 1346.8511 -149.0249 c1342.9834 -150.4741 1338.4463 -152.0571 1335.7241 -155.3467 c1325.8335 -167.2964 1345.8203 -173.4258 1353.9727 -175.8394 c1359.3149 -177.4214 1363.686 -183.8828 1366.6924 -188.291 c1370.3545 -193.6606 1374.1699 -199.9634 1375.9746 -206.2266 c1377.7407 -212.3564 1378.4985 -218.6973 1380.4365 -224.7939 c1382.875 -232.4668 1385.5308 -240.0771 1388.0771 -247.7153 c1390.8887 -256.1504 1385.4902 -266.4741 1381.1079 -273.3989 c1375.7188 -281.915 1368.2949 -289.1084 1360.8584 -295.8232 c1352.9355 -302.9771 1344.2959 -308.9058 1335.4258 -314.8203 c1330.374 -318.189 1325.3311 -321.5679 1320.395 -325.1055 C1318.5894 -325.8892 1318.4756 -326.3047 1320.0532 -326.3516 C1318.7925 -326.4688 1317.7773 -326.689 1316.6084 -327.0996 c1314.3359 -327.8975 1312.3608 -328.8975 1309.9077 -329.0176 c1301.5645 -329.4268 1301.5244 -342.4287 1309.9077 -342.0176 c1323.04 -341.3735 1332.9561 -332.0679 1343.5298 -325.0166 c1354.4116 -317.7603 1364.6709 -310.167 1374.1987 -301.1914 c1383.002 -292.8979 1391.2061 -283.4321 1396.5107 -272.4863 c1399.0283 -267.2915 1400.7485 -261.7666 1401.3613 -256.0205 c1402.1606 -248.5215 1400.0195 -242.48 1397.6738 -235.4434 c1395.3994 -228.6201 1392.8335 -221.8311 1391.165 -214.8286 cf*u1 D394.8892 -1400.9248 m389.5024 -1393.4609 382.8096 -1387.3223 373.6216 -1385.2021 c370.5405 -1384.4902 368.1304 -1385.8369 366.7617 -1387.8877 C363.8315 -1387.373 360.7988 -1388.6699 360.1406 -1392.4844 c357.4863 -1407.8564 352.6958 -1422.6631 346.0601 -1436.7744 c340.4644 -1448.6748 335.0493 -1461.248 333.2422 -1474.3643 c331.5703 -1486.498 331.2466 -1500.2227 333.3052 -1512.3193 c335.3779 -1524.5 343.4575 -1533.2617 354.6606 -1537.7109 c365.5503 -1542.0352 379.2061 -1541.7129 390.0776 -1537.6162 c395.5464 -1535.5557 399.7773 -1528.126 402.9297 -1523.4922 c406.9497 -1517.585 410.0986 -1511.0947 412.5415 -1504.3906 c421.9312 -1478.623 422.6245 -1448.8516 410.1616 -1423.9297 c406.1455 -1415.8994 400.1431 -1408.2041 394.8892 -1400.9248 cf0 D401.2813 -1496.708 m398.9507 -1502.7939 396.9209 -1508.4355 393.5229 -1514.0898 c391.8208 -1516.9219 389.9116 -1519.6455 387.8423 -1522.2197 c385.144 -1525.5762 385.3101 -1525.7324 381.2539 -1526.7578 c371.4287 -1529.2402 358.001 -1527.834 350.7529 -1520.1523 c342.7368 -1511.6553 345.2974 -1496.6318 345.4717 -1486.1025 c345.6978 -1472.4736 349.8916 -1460.793 355.0024 -1448.3145 c360.9438 -1433.8096 367.3721 -1420.1426 370.9443 -1404.7559 c371.4375 -1402.6318 371.8491 -1400.4902 372.2393 -1398.3447 C381.7993 -1401.7217 386.5879 -1411.998 392.0957 -1419.9502 c395.2192 -1424.46 398.418 -1428.7803 400.543 -1433.8877 c402.9893 -1439.7666 404.3638 -1446.0625 405.5752 -1452.29 c408.3462 -1466.541 406.4521 -1483.2021 401.2813 -1496.708 cf*U*u1 D639.981 -858.124 m637.1968 -849.5728 632.8145 -841.6934 630.4922 -832.9668 c628.6895 -826.1904 619.6118 -827.5 617.9683 -832.8647 C614.438 -829.5415 606.8872 -831.0693 606.7539 -837.4375 c606.1846 -864.6309 583.9658 -884.9121 576.0361 -909.6538 c572.6895 -920.0952 572.0811 -934.0303 575.292 -944.6084 c578.918 -956.5527 590.6016 -962.5947 601.7871 -965.8428 c612.3281 -968.9038 625.2539 -970.0767 635.4375 -965.3989 c644.9561 -961.0264 651.5146 -952.6719 655.2622 -943.1187 c663.1504 -923.0093 654.8677 -900.7871 649.2656 -881.3184 c646.9287 -873.1973 642.564 -866.0576 639.981 -858.124 cf0 D643.4531 -937.542 m641.0854 -945.5327 633.9492 -954.0635 625.2422 -955.1318 c614.3037 -956.4746 602.1011 -953.8374 592.9023 -947.7749 c588.6343 -944.9624 587.0688 -940.0981 586.6602 -935.2505 c586.2002 -929.7915 586.1597 -923.3657 587.2783 -918.0024 c590.0684 -904.625 598.2158 -893.3442 605.1523 -881.8594 c611.6694 -871.0693 617.0117 -857.6074 619.0498 -845.1865 c619.251 -843.9624 619.4048 -842.7344 619.52 -841.5024 C621.1343 -846.1885 623.1289 -850.7202 625.0537 -855.3096 c626.3677 -858.4424 627.5059 -861.6274 628.4731 -864.8828 c629.5669 -868.5664 631.7788 -871.6738 633.394 -875.1616 c636.2822 -881.3984 637.7935 -888.3979 639.4653 -895.0313 c640.7207 -900.0137 642.6182 -904.7886 643.7397 -909.8301 c645.7607 -918.918 646.1147 -928.5596 643.4531 -937.542 cf*U*u1 D2956.8643 -880.7061 m2953.4639 -877.5435 2949.5244 -875.1646 2945.8652 -872.3369 c2942.873 -870.0244 2940.083 -867.4678 2937.3613 -864.8403 C2937.4863 -860.272 2933.6719 -858.2144 2930.1426 -858.6455 C2924.5469 -856.8022 2918.4004 -864.3428 2923.5234 -869.4614 c2923.6211 -869.5596 2923.7207 -869.6553 2923.8193 -869.7534 C2921.707 -880.9858 2914.0664 -891.3818 2909.5234 -901.5391 c2903.9844 -913.9209 2900.6035 -927.647 2898.9063 -941.0776 c2897.4131 -952.8945 2902.2695 -966.2378 2910.7461 -974.6099 c2919.4199 -983.1753 2929.8984 -990.959 2942.2891 -992.4146 c2953.6279 -993.7466 2964.084 -983.2813 2969.8145 -974.7153 c2976.3232 -964.9883 2979.4082 -953.9678 2981.0176 -942.5278 c2982.5781 -931.4341 2984.4316 -917.9785 2978.6689 -907.8379 c2973.0059 -897.8726 2965.2422 -888.499 2956.8643 -880.7061 cf0 D2966.5527 -950.1255 m2964.6006 -959.3931 2959.1289 -970.2905 2951.3447 -976.0049 c2946.5586 -979.5176 2943.0078 -980.0449 2937.4658 -978.0586 c2932.085 -976.1294 2927.2129 -972.0049 2922.9941 -968.2769 c2913.9414 -960.2783 2910.2422 -949.7266 2912.4453 -937.9038 c2914.832 -925.1011 2918.2305 -912.626 2924.1836 -901.0044 c2927.7266 -894.0879 2931.6992 -887.0156 2934.3525 -879.5854 C2935.1211 -880.2388 2935.8848 -880.896 2936.6729 -881.5293 c2940.9492 -884.9634 2945.5137 -887.7969 2949.4785 -891.6064 c2953.4902 -895.4619 2957.1699 -899.7432 2960.5449 -904.1616 c2963.2627 -907.7197 2967.7217 -912.6426 2968.7344 -917.0864 c2971.1104 -927.5127 2968.7168 -939.8521 2966.5527 -950.1255 cf*U*u1 D3291.3857 -528.8037 m3289.71 -526.4819 3288.9209 -523.4185 3287.6113 -520.8696 c3286.1475 -518.0181 3284.3711 -515.3213 3282.7695 -512.5464 c3281.1914 -509.8115 3280.4609 -505.9917 3278.2988 -503.7139 c3276.7734 -502.106 3275.5537 -500.3076 3274.2979 -498.4854 c3268.873 -490.6147 3263.0801 -482.8965 3253.4902 -480.1006 c3245.4229 -477.748 3242.002 -490.2944 3250.0332 -492.6357 c3250.3613 -492.7314 3250.6729 -492.8589 3250.9893 -492.9771 C3250.8545 -493.4775 3250.7676 -494.0146 3250.7471 -494.5962 c3250.5098 -501.3862 3247.1191 -507.4399 3243.9141 -513.2573 c3240.4883 -519.4766 3237.6172 -525.6763 3234.6748 -532.1099 c3229.1367 -544.2173 3224.0078 -556.5195 3223.3291 -570.0166 c3222.6865 -582.7856 3233.4922 -590.541 3243.3643 -596.417 c3253.6426 -602.5347 3265.168 -606.1172 3277.1572 -605.0532 c3287.1289 -604.1685 3293.8652 -599.3994 3297.5449 -590.0723 c3301.46 -580.1494 3303.3076 -568.1689 3303.2754 -557.5649 c3303.2607 -552.7949 3302.4961 -547.0947 3300.8447 -542.6138 c3298.8467 -537.1929 3294.6885 -533.3789 3291.3857 -528.8037 cf0 D3289.7012 -567.02 m3289.0059 -572.1372 3287.416 -576.9556 3286.3516 -581.9707 c3285.707 -585.0039 3284.7881 -588.8076 3282.0615 -590.5791 c3275.1768 -595.0513 3263.4922 -591.623 3256.7861 -588.71 c3251.4346 -586.3853 3246.2314 -583.3125 3241.7861 -579.5278 c3237.1602 -575.5889 3235.9531 -573.377 3236.5352 -567.1714 c3237.7197 -554.5171 3244.1631 -543.3574 3248.8506 -531.8384 c3252.8525 -522.0034 3259.3486 -513.5117 3262.2617 -503.5059 C3264.1855 -506.3154 3265.9727 -509.1929 3267.8857 -511.5596 c3267.9941 -511.6934 3268.084 -511.7998 3268.1602 -511.8853 C3268.2539 -512.1675 3268.4063 -512.5757 3268.666 -513.1958 c3269.3076 -514.731 3270.0059 -516.2124 3270.7656 -517.6919 c3272.2305 -520.5435 3274.0068 -523.2402 3275.6084 -526.0151 c3277.1768 -528.7339 3278.0615 -531.7222 3279.5674 -534.4473 c3280.7656 -536.6143 3282.5576 -538.5449 3284.1416 -540.4351 c3285.4648 -542.0137 3286.7012 -543.5698 3287.7979 -545.3159 c3289.1699 -547.4985 3288.9629 -549.7827 3289.6699 -552.1636 c3291.0313 -556.7466 3290.332 -562.3711 3289.7012 -567.02 cf*U3386.9258 -978.8535 m3381.5693 -979.2393 3377.5176 -983.2593 3375.0576 -987.75 c3375.043 -987.7769 3375.0332 -987.8037 3375.0186 -987.8306 C3374.4355 -988.1538 3373.8691 -988.5972 3373.332 -989.1772 c3367.3809 -995.6108 3362.5273 -1006.064 3369.6963 -1013.3887 c3372.8613 -1016.6221 3377.3154 -1017.2456 3381.5615 -1016.6182 c3385.8359 -1015.9868 3388.1367 -1012.0928 3390.167 -1009.3804 c3392.5537 -1006.1919 3394.1143 -1002.3789 3395.6465 -998.7378 c3397.1006 -995.2847 3398.9453 -990.3311 3397.9082 -986.5601 c3396.6289 -981.9092 3391.6523 -978.5132 3386.9258 -978.8535 cf*u1 D3573.6035 -1198.7734 m3569.4639 -1198.7002 3565.7207 -1201.0195 3561.6904 -1201.207 c3560.9326 -1201.2422 3560.2451 -1201.3838 3559.625 -1201.6074 C3557.373 -1201.3408 3554.9756 -1202.1084 3553.335 -1204.4268 c3548.0908 -1211.8369 3547.7451 -1220.958 3553.7451 -1227.9756 c3556.335 -1231.0059 3560.582 -1232.8066 3564.4189 -1233.4434 c3569.8867 -1234.3516 3575.5215 -1234.04 3579.0098 -1229.3369 c3583.4277 -1223.3818 3587.4951 -1213.2822 3584.4141 -1205.9795 c3582.4404 -1201.2998 3578.6582 -1198.8623 3573.6035 -1198.7734 cf0 D3569.1426 -1220.8184 m3566.8418 -1220.916 3564.1621 -1220.4932 3562.9609 -1218.8408 c3561.8975 -1217.3789 3562.0547 -1215.7383 3562.7363 -1214.1123 C3565.1543 -1213.8896 3567.4902 -1213.332 3569.833 -1212.6641 c3570.7266 -1212.4102 3571.6211 -1212.1836 3572.5234 -1211.9756 C3572.5303 -1214.6191 3570.5752 -1218.5654 3569.1426 -1220.8184 Cf*U3633.002 -985 m3619 -985 L3614.8047 -985 3612.8125 -988.5757 3613.0186 -991.9766 C3612.874 -992.5269 3612.7871 -993.1216 3612.7881 -993.7734 c3612.791 -997.1416 3612.8438 -1000.5762 3614.5654 -1003.582 c3616.6602 -1007.2373 3620.8418 -1008.4082 3624.7734 -1008.5015 c3634.2891 -1008.728 3639.3125 -999.6211 3639.502 -991.2656 c3639.582 -987.7217 3636.4844 -985 3633.002 -985 CfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF