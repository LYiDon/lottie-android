%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.1.0%%For: (Evgeny Bakal) ()%%Title: (BKG 5.eps)%%CreationDate: 26.09.18 3:05%%Canvassize: 16383%%BoundingBox: 9 -2153 3837 -1%%HiResBoundingBox: 9 -2153 3837 -1%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1920.5 -1080.5 1920.5 -1080.5%AI3_TileBox: 1524 -1386 2316 -774%AI3_DocumentPreview: Header%AI5_ArtSize: 3840 2160%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1127 839 0.25 1831 940 18 0 0 6 130 0 0%AI5_OpenViewLayers: 7%%PageOrigin:1520 -1380%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 72 8%%BeginData: 3702 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1BFF7FFD52FF85AFFD09FFCACFCAFD1CFFA9A95BA9FD52FF7FFD%09FFCFFFCACAC9FD1BFF8585FD15FFA9FD3DFFA9A9FD0AFFCACFCAFFC9FD%1AFF5BFD15FFA9855B855AFD3BFF5AFD08FFCFC9FFCACAC9CACAFD18FF5B%AFFD16FFFD0485FD3AFFAF85AFFD07FFCAFFCACACACFC9FD14FFFD04857F%FD17FF7F85315B5BA9FD1AFFA9FFFFA97F857F85FD17FF85A9FD08FFCAFF%CACACAC9CACAFD10FFA9858585A9FD19FFA9855B855B85A9FD18FFA9FD05%85FFFFFF8585FD15FFAF85FD09FFCACACFCACACAC9FD05FFA984A985FD08%FF85A9A9AFFD1CFFA95A85FD10FFA9A9A9FD05FFA97F84FFFFA9A9FD05FF%85857E857FAFFD10FF7EAFFD0AFFFD04CAC9FD04FFA98585AFA9A985FD05%FFAF8585FD2EFFA97FFD0485AF85A985A9A985A9FD0BFFA9FFFFFF5BAFFD%0FFFAF7FFFAFFD10FF7FA9A9FD04FFA95B8585857F85A9FD2EFF8585FFA9%AFFD04FF85AFA9857FFD11FF5BFD10FFA97F7F85FFFFFFA9AFFD13FFA9FF%AFFD30FFAF85FD1EFFA9A9FD12FF8585FF85855BFD46FF7FFD1FFF85A9FD%13FFA984A9FF8585FFFFFFA9FD40FFA985FD1FFFA9A9FD18FF8585A97F85%AFFFFFFF85FD3AFF5B85A9FD1FFFAFFD1BFFA9FFA9857F857F85FD39FF85%A9FD42FFAFFD3AFFA985FDFCFFFD40FFC3FD7EFFC9CACAFD7AFFCAFFFD05%CAFD78FFC9CACACFFD04FFC9CAFD76FFCAC3FD06FFCAC9FD78FFC9FD04FF%CACAFD0AFFC9CAFD6DFFCACAFFCAFFC9FD09FFCFCAFFCAFD6DFFCAFFC9CF%CACACAFD07FFCFC3C9C3FFC9FD6CFFC9C9FFFFFFCAFD08FFCACACAC9C9CF%FD6CFFCAFD0CFFCACACAC9C2CFC9FD7AFFC9FFFFFFCACFFD7BFFC9CAC9CA%FD7DFFCFFD6DFFCBC5C5FD78FFCBC59DCBA9BF97B9A9FD77FFCBB9B997BF%B9BF97CBFD77FFA3B997BF97BF97B9CBFD78FF97BFB9BF97B9C5FD79FFCB%96BF97B9A2FD7BFFCBB9B9C5FD7DFFCBC5FDFCFFFD9BFF85FDFCFFFD82FF%AFFD7BFFA9A9FF855BA95B5BFD7BFFAF31373185FD7BFF7F373037A9FFFF%FFA9FD76FF7F37375B3785FD79FF5B313137315B3185FD68FFA985A9FF7F%AFFD0AFFAF8585375B31373185FD66FFAF85A9855BAF5BFD0DFF5B31A97E%855BAFFD66FFA9FFA9FFFFAFA9FD0CFF5B5BFD7BFFA9FFFF857FFD7AFFAF%FFFFFFA9FD82FFA9AFFDFCFFFDFCFFFD83FFCBCBFD64FFCAFFFFFFCAFD12%FFC5FFFFFFCBFFFFFFCBFD5FFFC9CAC9FFC9CAC9FD19FFCBFD60FFCACAC3%CFCAFD1AFFA2FD60FFCAC2C3C9FD11FFCBCBFD07FFCBC5FD5EFFCACACFCA%C9CFFD11FFCBC5CBFD06FFC5A3FD27FFA9857FAFFD33FFC9CACFC9CACACA%FD11FFCBC5C5FFFFFFCBC5C5FD28FFAF7F855BA9FD32FFCFCFCAFFFFCACA%FD13FFCB9CC5A3C5A9FD29FF7F5B305B3785FD79FF85615B617FA9A9FD7A%FFA9855BAFFD5BFFA98585A9A9FD1DFFAF85A9FD5AFF5B5B5A855BA9FD67%FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Fade To Edge Black)(Fade To Edge Black) 0 3 Bd[0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br[0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Neon Rings Vignette)(Neon Rings Vignette) 1 17 Bd[0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B5B6B8B9BABDBEC0C1C3C4C5C7C8CACBCDCFD0D2D3D4D5D7D7D8DADBDBDDDEDFE0E2E3E4E5E6E7E7E8EAEAEBECECEDEDEEEEEEEFEFF0F0F1F1F1F2F2F2F2F3F3F2F3F4F3F3F4F4F4F4F5F4F4F5F5F4F4F4F4F4F4F4F3F3F4F4F3F3F3F3F2F3F2F2F2F2F2F2F2F1F1F0F1F0EFF0EFEEEEEEEEEDEDEDECECECECEBEAEBEAEAEAE9E8E8E8E7E7E7E6E6E5E5E5E4E3E3E3E2E2E1E1E0E0DFDFDFDEDDDDDCDCDBDBDAD9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D0D0D0CFCECECDCDCCCCCBCACAC9C8C7C7C6C5C5C4C4C3C3C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B8B7B7B6B5B5B4B3B2B2B1><B0B0B1B1B1B0B1B1B1B2B2B2B1B3B3B2B2B4B3B2B4B4B3B3B5B4B4B6B5B4B3B5B5B4B6B6B5B4B6B5B5B4B6B5B4B6B5B4B4B5B5B4B6B5B4B3B4B4B3B4B3B2B1B3B1B0AFB1B0AFB0AFAEADAFADACAEADABAAACAAA9AAA9A8A7A8A7A5A4A5A4A3A4A3A1A0A1A09E9F9E9D9B9C9B999A9997969795949293929091908E8D8E8C8A8B8A888787868485838280817F7D7B7C7A797977767475737172706F6D6D6C6A6A69676565646260615F5D5D5C5A5858565555535250504E4D4D4B4A4848474544444241413F3E3C3C3B393A3837353634323331302E2F2D2C2A2B2928292726242524><A5A5A3A3A3A3A2A1A19F9F9E9E9C9C9C9B999998979796969594949292929290908F8D8D8C8C8A8A8A8A88888886868686848483828281817F7F7F7D7C7C7C7A797979777776757474737271716F6F6E6E6C6C6C6A6A696967676665646363616160605E5D5D5C5B5B5A58585756555554535251514F4E4E4C4B4B4A484847454544444241413F3E3E3D3B3B3A3A3837373534333331302F2E2D2D2C2A2A292727262624232222201F1F1D1C1B1B191817151514131211110F0E0E0D0B0B0A0908070705050404030202000000000000000000000000000000000000000000000000><D5D4D3D2D1D0CFCECDCCCBC9C8C7C5C4C3C2C0BFBDBCBAB8B7B5B3B1AFADABA9A8A6A4A29F9D9B99979593918F8D8B89878583817E7C7A79777573716F6D6B6968666462605E5C5B5957555352504E4C4B494846444342403F3D3C3A383736343332302F2E2C2B2A29272625242221201F1E1D1C1B1A191716151514131211100F0E0E0D0C0B0B0A090908080706060505040404030303030202020202010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><1313131313131212121212121212121212121111111111111111111111111010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0909090909090909090909090808080808080808080808080707070707070707070707070606060606060606060606050505050505050505050505040404040404040404040404030303030303030303030303020202020202020202020202010101010101010101010101000000000000><0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F40414142434344454646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF>4 %_Br<B1B1B0B0B0B0B0B0AFAFAFAFAEAEAEAEADADADADADACACACABABAAAAAAA9A9A8A8A7A7A7A6A6A6A6A5A4A4A4A3A3A3A3A2A2A2A1A1A1A09F9F9E9E9E9D9D9D9C9B9B9A9A99989897969695959494939292919190908F8E8E8D8C8C8B8B8A898988888786868584848382828180807F7E7D7C7C7B7A797878777675747373727170706F6E6D6C6B6B6A69696867666564636261605F5E5D5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484747464544434241403F3F3E3D3C><2424222222222020211F1F201E1E1E1E1C1C1C1B1B1B1919191A17171816161614141414121213111212101010100E0E0F0D0D0D0D0B0B0C0A0A0B0909090A080909080808070708080607070506060505050504040403040403040404030304020303030202030202020101010201010100010100010101010101000101000001010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001010001>00<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC><AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6><EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB>4 %_Br<3C3D3E3F3F40414243444546474748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5D5E5F60616263646566676869696A6B6B6C6D6E6F707071727373747576777878797A7B7C7C7D7E7F808081828283848485868687888889898A8B8B8C8C8D8E8E8F90909191929293949495959696979898999A9A9B9B9C9D9D9D9E9E9E9F9FA0A1A1A1A2A2A2A3A3A3A3A4A4A4A5A6A6A6A6A7A7A7A8A8A9A9AAAAAAABABACACACADADADADADAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1><0100010100000100000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010100000101000101010101010001010001010102010101020202030202030303020403030404040304040304040405050505060605070706080807070808080909080A0909090B0A0A0C0B0B0D0D0D0D0F0E0E10101010121211131212141414141616161817171A1919191B1B1B1C1C1C1E1E1E1E201F1F212020222222222424>00<BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF>4 %_Br<B1B2B2B3B4B5B5B6B7B7B8B9BABABBBCBCBDBEBEBFBFC0C1C1C2C3C3C4C4C5C5C6C7C7C8C9CACACBCCCCCDCDCECECFD0D0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9DADBDBDCDCDDDDDEDFDFDFE0E0E1E1E2E2E3E3E3E4E5E5E5E6E6E7E7E7E8E8E8E9EAEAEAEBEAEBECECECECEDEDEDEEEEEEEEEFF0EFF0F1F0F1F1F2F2F2F2F2F2F2F3F2F3F3F3F3F4F4F3F3F4F4F4F4F4F4F4F5F5F4F4F5F4F4F4F4F3F3F4F3F2F3F3F2F2F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEAEAE8E7E7E6E5E4E3E2E0DFDEDDDBDBDAD8D7D7D5D4D3D2D0CFCDCBCAC8C7C5C4C3C1C0BEBDBAB9B8B6B5B4><24252426272928292B2A2C2D2F2E3031333234363537383A393B3C3C3E3F4141424444454748484A4B4D4D4E5050525355555658585A5C5D5D5F61606264656567696A6A6C6D6D6F707271737574767779797A7C7B7D7F818082838584868787888A8B8A8C8E8D8E9091909293929495979697999A999B9C9B9D9E9F9EA0A1A0A1A3A4A3A4A5A4A5A7A8A7A8A9AAA9AAACAAABADAEACADAFADAEAFB0AFB0B1AFB0B1B3B1B2B3B4B3B4B4B3B4B5B6B4B5B5B4B4B5B6B4B5B6B4B5B5B6B4B5B6B6B4B5B5B3B4B5B6B4B4B5B3B3B4B4B2B3B4B2B2B3B3B1B2B2B2B1B1B1B0B1B1B1B0B0><00000000000000000000000000000000000000000000000002020304040505070708090A0B0B0D0E0E0F111112131415151718191B1B1C1D1F1F202222232426262727292A2A2C2D2D2E2F3031333334353737383A3A3B3B3D3E3E3F414142444445454748484A4B4B4C4E4E4F51515253545555565758585A5B5B5C5D5D5E606061616363646566676769696A6A6C6C6C6E6E6F6F717172737474757677777979797A7C7C7C7D7F7F7F81818282838484868686868888888A8A8A8A8C8C8D8D8F909092929292949495969697979899999B9C9C9C9E9E9F9FA1A1A2A3A3A3A3A5A5><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010202020202030303030404040505060607080809090A0B0B0C0D0E0E0F101112131415151617191A1B1C1D1E1F20212224252627292A2B2C2E2F303233343637383A3C3D3F404243444648494B4C4E5052535557595B5C5E6062646668696B6D6F71737577797A7C7E81838587898B8D8F91939597999B9D9FA2A4A6A8A9ABADAFB1B3B5B7B8BABCBDBFC0C2C3C4C5C7C8C9CBCCCDCECFD0D1D2D3D4D5><00000000000001010101010101010101010102020202020202020202020203030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606060707070707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010111111111111111111111111121212121212121212121212131313131313><AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A59585857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B3B2B0B0AEADABAAA9A9A7A6A4A4A2A2A0A09E9E9D9D9C9C9A9A989896969595939391918F8F8C8C8988868684848383818180807E7F7D7D7C7B7A7A79797777757574747272717170706F6F6E6E6D6D6C6C6B6B6A6A696968686767666665656464636462626162616160605F5F5E5E5D5D5C5C5B5C5A5A5959585857575656555554545353525150504F4F4E4E4D4C4B4B4A4A49494747464645444343424140403F3E3D3D3C3B3A39383837363534333231302F2E2D2C2B2A282726242322201F1E1C1B1A181716141312100F0E0C0B0A080706050403020000><B0B1B2B3B3B4B5B6B8B8BABABCBDBFC0C2C3C5C4C5C5C6C6C7C7C8C8C9C9CBCBCDCCCECFD1D1D3D5D7D7D9DBDDDEDFE0E0E0E1E2E3E3E4E3E4E5E6E6E8E8EAEAEBECEDEEEFEFEFEFF0F1F1F2F3F2F2F2F3F3F4F4F4F4F5F5F6F6F7F7F6F7F7F7F8F8F9F8F8F9F9FAFAFAFAFAFBFBFBFBFCFCFBFCFCFCFCFDFDFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F2F2F1F1><A5A5A3A3A3A3A1A19FA09FA09F9F9E9E9D9D9C9D9C9C9B9B9A9A9A9A999998989798979796979596949594949394939393949293929291929192909190908F908F908E8F8E8F8E8F8E8F8D8E8D8E8D8E8C8D8B8C8B8C8B8C8A8B8A8B8A8B898A898A888A8889888887888788868786868586858684858384838482838182808180807F7F7E7E7D7D7C7D7B7C7A7B797A787977787677757674757373717270706F6F6D6E6C6D6B6B696A686866666464626260615F5F5D5D5B5B595A57575454525250504E4E4B4B49494646444441413F3F3D3D3A3A383836363434><D5D5D4D3D2D2D1D1D0CFCECECDCDCCCBCACAC9C9C7C7C5C5C4C3C2C1C0BFBDBDBBBAB9B8B6B6B4B3B1B0AFAEACABA9A8A6A5A3A2A0A09D9D9B9A9796949391908E8D8B8A8887858482817F7E7C7A7877757472716F6E6C6B696866656362605F5D5C5A595756545351504F4E4C4B49484646444341403E3D3C3B39383736343332312F2E2D2C2A2928272525232221201F1E1D1C1A1A181816161414131211100F0F0E0D0C0B0A0A09090807070606050404030302020202010101010101000000000000000000000000000000000000000000000000000000000000><131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F101010101010101111111111111111121212121212121313131313131314141414141414141515151515151516161616161616171717171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F202020202020202121212121212122222222222222222323232323232324242424242424252525252525252526262626262626272727272727272828282828282828292929292929292A2A2A2A><0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7B7B>4 %_Br<0000000000000000000101010101010101010101010101010102020202020202020202020202030202020304030404040404050505050505050505060606060606060606070707070707070809090909090909090A0A0A0A09090A0A0B0B0B0B0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0D0D0D0D0E0E0E0E0E0E0E0E0E0E101010101011111111><F1F1F0EFEFEEEDEDECECEBEBEAE9E8E8E7E6E6E5E4E3E3E2E1E0DFDFDEDDDDDCDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBCBBBAB9B7B6B5B4B3B2B1B0AEADACAAA9A8A6A5A3A2A19F9E9D9B9A999796949391908E8D8B8A888786848382807E7D7B7A787776747372706F6E6C6B6A686765646261605E5D><343233302E2F2D2E2B292A2826272523232120201F1F1E1C1D1B1A1A1917181617151314131112100F100E0F0D0C0D0C0B0C0B0A0B0A090A090908070807060605040505060504050404040303040304030203020203020102020102010202010101000100000000010000000000000000000000000000000000000000000000000000000000>0<EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6><2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF><7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F9091919293939495959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCDCECFCFD0>4 %_Br<1111111110101010100E0E0E0E0E0E0E0E0E0E0D0D0D0D0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0B0B0B0B0A0A09090A0A0A0A090909090909090908070707070707070606060606060606060505050505050505050404040404030403020202030202020202020202020202020201010101010101010101010101010101000000000000000000><5D5E606162646567686A6B6C6E6F707273747677787A7B7D7E808283848687888A8B8D8E909193949697999A9B9D9E9FA1A2A3A5A6A8A9AAACADAEB0B1B2B3B4B5B6B7B9BABBBCBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDCDDDDDEDFDFE0E1E2E3E3E4E5E6E6E7E8E8E9EAEBEBECECEDEDEEEFEFF0F1F1><0000000000000000000000000000000000000000000000000000000000010000000001000101010202010201020201020302020302030403040303040404050405060505040506060708070809090A090A0B0A0B0C0B0C0D0C0D0F0E100F1012111314131517161817191A1A1B1D1C1E1F1F2020212323252726282A292B2E2D2F2E30333234>0<E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEE><AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A><D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A8988888787868585848383828181807F7F7E7E7D7C7C7B>4 %_Br<0000020304050607080A0B0C0E0F101213141617181A1B1C1E1F202223242627282A2B2C2D2E2F30313233343536373838393A3B3C3D3D3E3F40404142434344454646474749494A4A4B4B4C4D4E4E4F4F5050515253535454555556565757585859595A5A5C5B5C5C5D5D5E5E5F5F606061616261626264636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727274747575777779797A7A7B7C7D7D7F7E8080818183838484868688898C8C8F8F919193939595969698989A9A9C9C9D9D9E9EA0A0A2A2A4A4A6A7A9A9AAABADAEB0B0B2B3B4><F1F1F2F2F3F3F3F4F4F4F4F5F5F5F5F6F6F6F6F7F7F7F7F7F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFDFDFCFCFCFCFBFCFCFBFBFBFBFAFAFAFAFAF9F9F8F8F9F8F8F7F7F7F6F7F7F6F6F5F5F4F4F4F4F3F3F2F2F2F3F2F1F1F0EFEFEFEFEEEDECEBEAEAE8E8E6E6E5E4E3E4E3E3E2E1E0E0E0DFDEDDDBD9D7D7D5D3D1D1CFCECCCDCBCBC9C9C8C8C7C7C6C6C5C5C4C5C3C2C0BFBDBCBABAB8B8B6B5B4B3B3B2B1B0><3434363638383A3A3D3D3F3F41414444464649494B4B4E4E50505252545457575A595B5B5D5D5F5F616062626464666668686A696B6B6D6C6E6D6F6F707072717373757476757776787779787A797B7A7C7B7D7C7D7D7E7E7F7F8080818082818382848384838584868586858686878688878887888889888A888A898A898B8A8B8A8B8A8C8B8C8B8C8B8D8C8E8D8E8D8E8D8F8E8F8E8F8E8F8E908F908F909091909291929192929392949393939493949495949695979697979897989899999A9A9A9A9B9B9C9C9D9C9D9D9E9E9F9FA09FA09FA1A1A3A3A3A3A5A5><000000000000000000000000000000000000000000000000000000000000010101010101020202020303040405060607070809090A0A0B0C0D0E0F0F101112131414161618181A1A1C1D1E1F2021222325252728292A2C2D2E2F31323334363738393B3C3D3E40414344464648494B4C4E4F505153545657595A5C5D5F606263656668696B6C6E6F7172747577787A7C7E7F8182848587888A8B8D8E9091939496979A9B9D9DA0A0A2A3A5A6A8A9ABACAEAFB0B1B3B4B6B6B8B9BABBBDBDBFC0C1C2C3C4C5C5C7C7C9C9CACACBCCCDCDCECECFD0D1D1D2D2D3D4D5D5><EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413><2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A191919191919191818181818181818171717171717171616161616161615151515151515141414141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C><7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B4B5B4B4B4B5B5B4B4B6B6B6B5B7B7B7B7B9B9B9BBBBBBBABCBCBCBCBEBDBDBCBEBEBEBEBFBFBFBFC0C1C0C2C2C1C1C2C2C2C2C3C3C2C2C3C3C3C2C3C3C3C4C4C3C3C4C4C3C3C4C3C3C2C4C3C3C2C3C2C2C1C2C1C0C2C1C0BFC0C0BFBFBFBFBEBDBDBDBCBBBCBBBABABAB9B8B8B8B6B6B6B5B4B3B4B2B1B0B0AFAEADADACAAAAA9A8A6A6A5A3A2A2A09F9D9D9C9A989896><B0B2B1B3B3B5B5B7B8B9B9BCBEBEC0C0C2C2C4C4C6C6C8CACACCCCCECDCFCFD0D0D1D3D3D5D4D6D5D7D7D8D8DADBDBDCDCDDDCDEDDDEDEDFE0DFE1E0E1E1E2E1E2E1E3E4E3E4E3E4E3E4E3E4E4E5E4E5E6E4E5E4E5E4E5E4E5E4E5E5E4E5E4E5E4E4E3E4E3E3E4E3E3E2E3E1E2E1E1E0E0E1DFE0DEDFDEDEDDDDDCDCDDDBDBDADAD9D9D8D8D7D7D7D6D6D4D4D3D3D2D2D1D1><A5A3A3A2A2A0A09E9E9C9C9A9898969594939191908F8E8C8C8A898887868584838281807F7E7D7C7B7B797978777675747373727170706F6D6D6C6B6A6A69686766656463626160605E5E5C5C5B5A595857565554535251504F4E4D4C4A4A48474645444342403F3D3C3B3A383736353331302E2E2C2B292826252321201D1C1A1917151312100E0D0B0A09080605030200><D5D4D3D2D1D0CECDCCCBCAC9C7C6C5C3C2C1BFBEBCBBB9B7B5B3B1AFADABA9A7A5A3A19F9C9A989693918F8D8B888684827F7D7B79777572706E6C6A68666462605E5B59575553514F4D4B4948454442403E3C3A38363533312F2E2C2A292726242221201E1D1B1A181715141312100F0E0D0C0A0A0808070605050403030302020201010101010101000000000000000000><1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E><0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F303030313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F>4 %_Br<96959392908F8D8C8A898786848382807F7D7B7A787775747371706F6D6C6B69686665646261605E5D5C5A59575655545251504F4C4B4A48474645444241403E3D3C3B3A39383735343332302F2D2C2B2928272625242221201F1E1D1C1B1A191817161514131211><D1CFCECCCBC9C8C7C5C5C4C2C1C0BFBDBCBBBAB9B7B6B5B3B2B1B1AFAEACABAAA9A7A6A5A3A2A1A09E9D9C9C9B99989795949391918F8E8D8C8B898887878685848381807F7E7D7C7B7A7977767575747372706F6E6D6C6B6A6968676665646463636261605F5E5D>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6><4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF><9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0>4 %_Br<1112131415161718191A1B1C1D1E1F2021222425262728292B2C2D2F30323334353738393A3B3C3D3E40414244454647484A4B4C4F50515254555657595A5C5D5E60616264656668696B6C6D6F707173747577787A7B7D7F808283848687898A8C8D8F9092939596><5D5E5F6061626363646465666768696A6B6C6D6E6F7072737475757677797A7B7C7D7E7F808183848586878788898B8C8D8E8F91919394959798999B9C9C9D9EA0A1A2A3A5A6A7A9AAABACAEAFB1B1B2B3B5B6B7B9BABBBCBDBFC0C1C2C4C5C5C7C8C9CBCCCECFD1>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E><AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756565554535251504F4E><D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F>4 %_Br<9698989A9C9D9D9FA0A2A2A3A5A6A6A8A9AAAAACADADAEAFB0B0B1B2B4B3B4B5B6B6B6B8B8B8B9BABABABBBCBBBCBDBDBDBEBFBFBFBFC0C0BFC0C1C2C0C1C2C1C2C2C3C2C3C3C4C2C3C3C4C3C3C4C4C3C3C4C4C3C3C3C2C3C3C3C2C2C3C3C2C2C2C2C1C1C2C2C0C1C0BFBFBFBFBEBEBEBEBCBDBDBEBCBCBCBCBABBBBBBB9B9B9B7B7B7B7B5B6B6B6B4B4B5B5B4B4B4B5B4B4><D1D1D2D2D3D3D4D4D6D6D7D7D7D8D8D9D9DADADBDBDDDCDCDDDDDEDEDFDEE0DFE1E0E0E1E1E2E1E3E2E3E3E4E3E3E4E3E4E4E5E4E5E4E5E5E4E5E4E5E4E5E4E5E4E6E5E4E5E4E4E3E4E3E4E3E4E3E4E3E1E2E1E2E1E1E0E1DFE0DFDEDEDDDEDCDDDCDCDBDBDAD8D8D7D7D5D6D4D5D3D3D1D0D0CFCFCDCECCCCCACAC8C6C6C4C4C2C2C0C0BEBEBCB9B9B8B7B5B5B3B3B1B2B0><000203050608090A0B0D0E1012131517191A1C1D202123252628292B2C2E2E303133353637383A3B3C3D3F40424344454647484A4A4C4D4E4F505152535455565758595A5B5C5C5E5E60606162636465666768696A6A6B6C6D6D6F707071727373747576777879797B7B7C7D7E7F808182838485868788898A8C8C8E8F9091919394959698989A9C9C9E9EA0A0A2A2A3A3A5><00000000000000000001010101010101020202030303040505060708080A0A0C0D0E0F101213141517181A1B1D1E202122242627292A2C2E2F31333536383A3C3E4042444548494B4D4F51535557595B5E60626466686A6C6E70727577797B7D7F828486888B8D8F919396989A9C9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBCBEBFC1C2C3C5C6C7C9CACBCCCDCED0D1D2D3D4D5><7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A69696867666665646363626160605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A494847474645444443424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A29282827262525242322222120201F1E1D1D1C1B1A1A191817171615141413><4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A191918181717161616151514141313121211111110100F0F0E0E0D0D0C0C><9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br[0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 Bs0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS%_0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink Radial)(Pink Radial) 1 2 Bd[0<00000102030405060708090B0C0D0E1011121314141617191A1C1D1E202122232426272728292A2C2D2E2F31313234353638393A3A3B3C3E3F414242434546474848494B4C4D4D4E4F51525254555758585A5B5C5D5D5F60616162636565666869696A6B6C6C6E6F6F707273737576767779797A7B7B7D7E7E7F8181828383848585878888898A8A8C8C8D8E8E8F8F91929294939596969898999B9A9C9C9D9D9F9FA0A2A2A3A3A4A4A6A6A7A7A8A8A9A9AAAAACACADADAEAEAFAFB1B1B2B2B3B3B3B4B4B5B5B6B6B6B7B7B9B9BAB9B9BABABBBBBBBCBCBEBDBDBFBFBFC0C0C0C1C1C2C2C2C3C3C3C4C4C4C4C5C5C5C6C6C6C7C7C7C7C8C8C8C9C9C9C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCCCDCDCDCDCDCDCECECECECECECFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1><0000000001010102020303030303040405050606070808090909090A0A0B0C0C0D0E0E0E0F0F10101112121113131415151615161818191A191A1A1C1C1C1C1D1E1F1E1F20212221222324252425262727282829282A2B2C2B2D2D2E2D2F302F3031323132343334363536373837383A393A3C3B3C3E3D3E403F40404142424445454647474847494A4A4B4A4C4D4D4E4D4F4E505150525153525355555756585759585A5A5B5B5D5D5E5E5F5F616162626363646465656767686869696A6A696B6B6D6D6E6E6D6F6F7171707272747473757577777678787A7A797B7B7A7C7C7C7E7D7D7F7F7F8180808282818184838385858587878686888888888A8A8A8A8C8B8B8B8B8D8D8D8D8F8E8E8E8E909090909090919191919191939292929292929294949494949494949494949595959595959595959595959595>01<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A89888887878685858484838382828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F6F6E6E6D6D6C6C6C6B6B6A6A6A69696868686767676666666565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A59595959595858585858585757575757575656565656565656555555555555555555555454545454545454545454545454><FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777776767575747474737372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A6969696868686767676666666665656564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959>4 %_Br[0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 %_BS%_0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 3 Bd[0<A9A9AAAAABABADADAEAEAEAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B8B9B9BABABABBBBBCBCBDBDBDBEBEBFBFC0C0C1C1C1C2C2C3C3C4C4C5C5C5C6C6C7C7C8C8C8C9C9C9C9CACACBCB><080A0B0C0D0F1012131517191B1C1E1F2123242627292B2D2E3032333537383A3C3D3F414244484A4B4E505153545657595B5D5F6062636567696A6C6F70727476787A7C7D7F81838587898B>01<7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A><ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160>4 %_Br0<8282828383838383838585858585858686878787878888888888888A8A8A8A8A8A8C8C8C8C8C8C8D8D8D8D8D8D8F8F8F8F8F8F90909090909192929292929294949494949495959595959797979797979999999999999B9B9B9B9B9B9D9D9D9D9D9D9E9E9E9E9F9FA0A0A0A0A0A0A2A2A2A2A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7A7A7A7A9A9A9><F5F4F4F3F2F1F0EFEEEDECEAE9E8E6E6E5E4E3E2E1E0DFDEDDDBDAD8D7D6D4D3D2D1D0CFCDCCCAC8C6C5C4C2C1C0BFBEBDBCBAB9B7B6B4B3B1AFADACAAA9A7A5A3A2A09F9D9B9998969492908E8C8A88868482817F7D7A78777573716F6D6B69676562605F5D5B59565452504F4D4A484644413F3C3B39373533302E2D2B29272422201E1C1A17151312100E0B0A08>01<9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A89898989898988888888888887878787878686868686868585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B><1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 %_BS%_0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 Bs0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 %_BS%_0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 Bs0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 %_BS%_0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 139)(Unnamed gradient 139) 1 2 Bd[00001114 %_Br[0 0 0 0 1 1 1 2 87 36.6667 %_BS%_0 0 0 0 1 1 1 2 87 36.6667 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F50525354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBBBCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F80818182838384858686878889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACACADADADADADADADAD><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F4041424344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F8081818283848485858687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E80838587898C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Water)(Water) 0 5 Bd[<D5D6D6D7D7D8D9D9D9DADADBDCDCDDDEDEDFDFE0E1E1E1E2E3E3E4E4E5><5253545657595A5A5B5D5E606163646567686A6B6C6C6D6E7071727475><3F3F404141424345454647474848494B4B4C4C4D4D4F4F505151525353><02020203030304040505050606070709090A0A0B0C0C0D0E0F10101112>0<8A89888786858484838281807F7E7D7C7B7A7978777776757473727170><A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C>4 %_Br<B9BABBBBBCBDBDBEBFBFC0C1C1C2C2C3C3C4C4C5C5C6C6C7C8C8C9C9CACBCCCCCDCDCECFD0D0D0D1D2D2D3D4D4D4D5><17181A1A1B1D1E2021212324262829292B2D2E3032313335363838393B3C3E403F414344464747494A4C4D4F4F5052><15161718191A1A1B1B1D1E1E1F1F202223232425252728292B2C2E2E2F30303133343535363738393A3A3B3C3D3E3F><0000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010202>0<B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929191908F8E8D8C8C8B8A><D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9>4 %_Br<7576777879797A7B7C7D7E7E7F808182828384858586878888898A8B8C8C8D8E8E8F9090919293939494959696979899999A9A9B9C9C9D9E9E9E9FA0A1A1A2A2A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAAAABABACACADADADADAEAEAFAFB0B0B0B1B2B2B2B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B8B8B8B8B8B9B9B9B9B9><02020202020102020201020202010202020102020101020201010202010102010101020202010302020203030202030303030404030304040404050404040505040505050506060605070706060707070708080808090909080A0A09090B0B0B0A0C0C0C0C0E0E0E0E10100F0F111111111212121214141414151515151717><10111010121211111111101112121212121211111313121313131212141413141414131315151414141513141516141515151414161614151515141416161414151414161615151515141416161515151615151617161616161515171716161617161618181717171716161717161616161515171716161616151516171515>0<7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B1B1B1B1B0B0><E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9D9D9D9D8D8D8D8>4 %_Br<000001010203040505060708090A0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233343535363738393A3A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F616162636465666768696A6B6B6C6D6E6F70707172737475><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000010100010102010102010102010202010202><000000000000000000010101010102010202010103020202020203030303030403040403040404050405060506050506060606060607060706060707080807080808090808080909090909080A0A09090A0A0B0B0A0B0A0B0C0B0B0C0C0C0C0C0C0B0D0D0C0C0D0D0E0D0D0D0D0E0F0E0E0E0E0F0F0F0F0E101010100F0F111010>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F><FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0><FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8>4 %_Br[0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 %_BS%_0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 Bs0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 %_BS%_0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 Bs0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 %_BS%_0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 Bs0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS%_0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Diamond Cubes)(Diamond Cubes) 6.5605 11.3652 85.3018 79.5596 [%AI3_Tile(0 O 0 R 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 Xa 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR45.9316 56.8281 m39.3691 45.4609 L26.2471 45.4609 L32.8066 56.8281 L45.9316 56.8281 Lf45.9316 34.0957 m39.3691 22.7305 L26.2471 22.7305 L32.8066 34.0957 L45.9316 34.0957 Lf65.6162 22.7305 m59.0537 11.3652 L45.9316 11.3652 L52.4932 22.7305 L65.6162 22.7305 Lf65.6162 45.4609 m59.0537 34.0977 L45.9316 34.0977 L52.4932 45.4609 L65.6162 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L6.5605 11.3652 L13.123 22.7305 L26.2471 22.7305 Lf26.2471 45.4609 m19.6846 34.0977 L6.5605 34.0977 L13.123 45.4609 L26.2471 45.4609 Lf45.9316 79.5586 m39.3691 68.1924 L26.2471 68.1924 L32.8066 79.5586 L45.9316 79.5586 Lf65.6162 68.1934 m59.0537 56.8281 L45.9316 56.8281 L52.4932 68.1924 L65.6162 68.1934 Lf85.3018 56.8281 m78.7402 45.4609 L65.6162 45.4609 L72.1777 56.8281 L85.3018 56.8281 Lf85.3018 34.0957 m78.7402 22.7305 L65.6162 22.7305 L72.1777 34.0957 L85.3018 34.0957 Lf85.3018 79.5586 m78.7402 68.1924 L65.6162 68.1924 L72.1777 79.5586 L85.3018 79.5586 Lf26.2471 68.1924 m19.6846 56.8281 L6.5605 56.8281 L13.123 68.1924 L26.2471 68.1924 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 Xa 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR26.2471 68.1924 m19.6846 56.8281 L26.2471 45.4609 L32.8066 56.8281 L26.2471 68.1924 Lf26.2471 45.4609 m19.6846 34.0957 L26.2471 22.7305 L32.8066 34.0957 L26.2471 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L26.2471 0 L32.8066 11.3652 L26.2471 22.7305 Lf45.9316 34.0957 m39.3691 22.7305 L45.9316 11.3652 L52.4932 22.7305 L45.9316 34.0957 Lf45.9316 56.8281 m39.3691 45.4609 L45.9316 34.0977 L52.4932 45.4609 L45.9316 56.8281 Lf6.5605 34.0957 m0 22.7305 L6.5605 11.3652 L13.123 22.7305 L6.5605 34.0957 Lf6.5605 56.8281 m0 45.4609 L6.5605 34.0977 L13.123 45.4609 L6.5605 56.8281 Lf26.2471 90.9238 m19.6846 79.5586 L26.2471 68.1924 L32.8066 79.5586 L26.2471 90.9238 Lf45.9316 79.5586 m39.3691 68.1924 L45.9316 56.8281 L52.4932 68.1924 L45.9316 79.5586 Lf65.6162 68.1924 m59.0537 56.8281 L65.6162 45.4609 L72.1777 56.8281 L65.6162 68.1924 Lf65.6162 45.4609 m59.0537 34.0957 L65.6162 22.7305 L72.1777 34.0957 L65.6162 45.4609 Lf65.6162 22.7305 m59.0537 11.3652 L65.6162 0 L72.1777 11.3652 L65.6162 22.7305 Lf85.3018 34.0957 m78.7402 22.7305 L85.3018 11.3652 L91.8643 22.7305 L85.3018 34.0957 Lf85.3018 56.8281 m78.7402 45.4609 L85.3018 34.0977 L91.8643 45.4609 L85.3018 56.8281 Lf65.6162 90.9238 m59.0537 79.5586 L65.6162 68.1924 L72.1777 79.5586 L65.6162 90.9238 Lf85.3018 79.5586 m78.7402 68.1924 L85.3018 56.8281 L91.8643 68.1924 L85.3018 79.5586 Lf6.5605 79.5576 m0 68.1924 L6.5605 56.8281 L13.123 68.1924 L6.5605 79.5576 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6091.6558 7111 L-6091.6558 7075.8271 L-6271 7075.8271 L-6271 7111 Lnuu0 O0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa0 R0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA0.5 w-6109.8286 7076.0781 m-6252.8276 7076.0781 L-6252.8276 7078.647 L-6109.8286 7078.647 L-6109.8286 7076.0781 Lb-6252.8276 7101.4829 m-6109.8286 7101.4829 L-6109.8286 7098.7109 L-6252.8276 7098.7109 L-6252.8276 7101.4829 Lb0 0 0 0 1 1 1 Xa-6252.8276 7078.647 m-6252.8276 7098.7109 L-6109.8286 7098.7109 L-6109.8286 7078.647 L-6252.8276 7078.647 LbU0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7110.6191 m-6092.2544 7110.6191 L-6094.4292 7108.3984 L-6125.9976 7108.3984 L-6131.1978 7110.6191 Lb-6092.2544 7086.5854 m-6109.8286 7086.5854 L-6109.8286 7088.6797 L-6094.3237 7088.6797 L-6092.2544 7086.5854 Lb0 0 0 0 1 1 1 Xa-6094.3237 7088.6797 m-6109.8286 7088.6797 L-6109.8286 7101.4829 L-6125.9976 7108.3984 L-6094.4292 7108.3984 L-6104.6465 7099.1279 L-6094.3237 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6270.4019 7110.6191 m-6231.4595 7110.6191 L-6236.6587 7108.3984 L-6268.2285 7108.3984 L-6270.4019 7110.6191 Lb0 0 0 0 1 1 1 Xa-6252.8286 7088.6797 m-6268.3345 7088.6797 L-6258.0112 7099.1279 L-6268.2285 7108.3984 L-6236.6587 7108.3984 L-6252.8286 7101.4829 L-6252.8286 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6252.8286 7086.5854 m-6270.4019 7086.5854 L-6268.3345 7088.6797 L-6252.8286 7088.6797 L-6252.8286 7086.5854 Lb-6231.4595 7110.6191 m-6252.8286 7101.4829 LSu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6131.1978 7101.4829 m-6131.1978 7108.1836 L-6115.5269 7101.4829 L-6131.1978 7101.4829 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7108.1836 m-6131.1978 7110.6191 L-6109.8286 7101.4829 L-6115.5269 7101.4829 L-6131.1978 7108.1836 Lb-6252.8286 7101.4829 m-6231.4595 7110.6191 L-6231.4595 7108.1836 L-6247.1294 7101.4829 L-6252.8286 7101.4829 Lb0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6247.1294 7101.4829 m-6231.4595 7108.1836 L-6231.4595 7101.4829 L-6247.1294 7101.4829 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 44)0 Au1 Ap0 J 0 j 1 w 4 M []0 d1 XR-6266.6665 7111 m-6271 7111 L-6271 7107.3989 L-6266.6665 7107.3989 L-6266.6665 7111 Lnu0 Ap0 XR-6269.9702 7110.3359 m-6267.6963 7110.3359 L-6267.6963 7108.062 L-6269.9702 7108.062 L-6269.9702 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6267.6963 7109.1992 m-6267.6963 7109.8271 -6268.2056 7110.3359 -6268.8335 7110.3359 c-6269.4614 7110.3359 -6269.9702 7109.8271 -6269.9702 7109.1992 c-6269.9702 7108.5718 -6269.4614 7108.062 -6268.8335 7108.062 c-6268.2056 7108.062 -6267.6963 7108.5718 -6267.6963 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 47)0 Au0 Ap0 J 0 j 1 w 4 M []0 d1 XR-6264.6064 7111 m-6271 7111 L-6271 7107.3989 L-6264.6064 7107.3989 L-6264.6064 7111 Lnu0 XR-6268.9404 7110.3359 m-6266.6665 7110.3359 L-6266.6665 7108.062 L-6268.9404 7108.062 L-6268.9404 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6266.6665 7109.1992 m-6266.6665 7109.8271 -6267.1753 7110.3359 -6267.8032 7110.3359 c-6268.4312 7110.3359 -6268.9404 7109.8271 -6268.9404 7109.1992 c-6268.9404 7108.5718 -6268.4312 7108.062 -6267.8032 7108.062 c-6267.1753 7108.062 -6266.6665 7108.5718 -6266.6665 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 48)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6263.1465 7111 L-6263.1465 7102.5957 L-6271 7102.5957 L-6271 7111 Lnu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa3.86371 M-6270.1582 7102.5957 m-6269.6812 7102.5845 -6269.2842 7102.9595 -6269.2725 7103.4375 c-6269.2593 7103.9141 -6269.6357 7104.3101 -6270.1138 7104.3237 c-6270.5903 7104.3359 -6270.9878 7103.96 -6270.9995 7103.4824 c-6271.0122 7103.0054 -6270.6357 7102.6069 -6270.1582 7102.5957 cf-6270.1357 7103.46 mFUu-6270.1558 7104.8188 m-6269.6782 7104.8086 -6269.2813 7105.1846 -6269.2686 7105.6621 c-6269.2563 7106.1382 -6269.6333 7106.5356 -6270.1104 7106.5488 c-6270.5874 7106.5615 -6270.9849 7106.1846 -6270.9971 7105.7075 c-6271.0093 7105.23 -6270.6328 7104.8345 -6270.1558 7104.8188 cf-6270.1333 7105.6846 mFUu-6270.1523 7107.0469 m-6269.6753 7107.0342 -6269.2783 7107.4102 -6269.2661 7107.8877 c-6269.2539 7108.3638 -6269.6304 7108.7612 -6270.1074 7108.7744 c-6270.5845 7108.7871 -6270.9814 7108.4102 -6270.9937 7107.9326 c-6271.0068 7107.4561 -6270.6299 7107.0581 -6270.1523 7107.0469 cf-6270.1299 7107.9102 mFUu-6270.1499 7109.2725 m-6269.6724 7109.2588 -6269.2754 7109.6357 -6269.2627 7110.1133 c-6269.25 7110.5894 -6269.6274 7110.9863 -6270.1045 7111 c-6270.5815 7111.0127 -6270.9785 7110.6357 -6270.9912 7110.1582 c-6271.0029 7109.6816 -6270.6274 7109.2832 -6270.1499 7109.2725 cf-6270.1274 7110.1357 mFUu-6268.1538 7103.6665 m-6267.6763 7103.6533 -6267.2793 7104.0293 -6267.2666 7104.5068 c-6267.2539 7104.9829 -6267.6309 7105.3809 -6268.1084 7105.394 c-6268.5854 7105.4063 -6268.9824 7105.0293 -6268.9946 7104.5527 c-6269.0068 7104.0752 -6268.6304 7103.6768 -6268.1538 7103.6665 cf-6268.1304 7104.5293 mFUu-6268.1499 7105.8901 m-6267.6729 7105.8789 -6267.2764 7106.2549 -6267.2632 7106.7324 c-6267.2515 7107.21 -6267.6274 7107.6069 -6268.1055 7107.6191 c-6268.5825 7107.6318 -6268.9795 7107.2549 -6268.9917 7106.7773 c-6269.0039 7106.3008 -6268.6274 7105.9023 -6268.1499 7105.8901 cf-6268.1274 7106.7549 mFUu-6268.1475 7108.1157 m-6267.6699 7108.1045 -6267.2729 7108.4805 -6267.2607 7108.9595 c-6267.2485 7109.4341 -6267.6255 7109.8325 -6268.1025 7109.8447 c-6268.5791 7109.8574 -6268.9766 7109.4814 -6268.9888 7109.0029 c-6269.0015 7108.5264 -6268.6245 7108.1279 -6268.1475 7108.1157 cf-6268.1245 7108.9805 mFUu-6266.0723 7104.7119 m-6265.5952 7104.6997 -6265.1987 7105.0781 -6265.1865 7105.5532 c-6265.1738 7106.0303 -6265.5508 7106.4287 -6266.0273 7106.4414 c-6266.5054 7106.4541 -6266.9019 7106.0757 -6266.9141 7105.5996 c-6266.9272 7105.1235 -6266.5498 7104.7261 -6266.0723 7104.7119 cf-6266.0503 7105.5781 mFUu-6266.0698 7106.939 m-6265.5928 7106.9253 -6265.1953 7107.3013 -6265.1831 7107.7788 c-6265.1704 7108.2573 -6265.5474 7108.6543 -6266.0249 7108.6685 c-6266.5024 7108.6797 -6266.8994 7108.3013 -6266.9116 7107.8252 c-6266.9233 7107.3486 -6266.5469 7106.9512 -6266.0698 7106.939 cf-6266.0474 7107.8013 mFUu-6264.0332 7105.7822 m-6263.5557 7105.7695 -6263.1592 7106.147 -6263.1465 7106.6255 c-6263.1333 7107.1016 -6263.5103 7107.4985 -6263.9883 7107.5117 c-6264.4653 7107.5229 -6264.8618 7107.147 -6264.8745 7106.6685 c-6264.8862 7106.1909 -6264.5098 7105.7949 -6264.0332 7105.7822 cf-6264.0103 7106.647 mFUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Banner/ Adobe Patte) -(rnOnPath Brush Tool/ Arrow Brush Circles/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Arrow Brush Circles)(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -( 1 0 4 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(Black)Pc0 0.993988 1 0 1 0 0 Xa(RGB Red)Pc0.061982 0 0.965148 0 1 1 0 Xa(RGB Yellow)Pc0.627649 0 1 0 0 1 0 Xa(RGB Green)Pc0.517937 0 0.125399 0 0 1 1 Xa(RGB Cyan)Pc0.883665 0.769161 0 0 0 0 1 Xa(RGB Blue)Pc0.269902 0.816403 0 0 1 0 1 Xa(RGB Magenta)Pc0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0.000366 0.500664 0.985656 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0.000214 0.348486 0.871305 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.045136 0 0.931884 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188968 0.000397 0.98233 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501091 0.001373 0.990387 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.746151 0 0.99704 0.000092 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.761959 0 0.749783 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.6972 0.14847 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.875364 0.526451 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262516 0.245243 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.970001 0.204959 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.22855 0.274266 0.39942 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.362341 0.574029 0.840574 0.226139 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Fade To Edge Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Fade To Edge Black)PcBb0 0 0 0 Bh2 (Neon Rings Vignette) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Neon Rings Vignette)PcBb2 (Water) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Water)PcBb0 0 0 0 Bh2 (Pink Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Pink Radial)Pc(Diamond Cubes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Diamond Cubes)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(R=0 G=0 B=0)Pc0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.306798 0.242466 0.247654 0 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.193668 0.150057 0.155337 0 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.084596 0.061311 0.065766 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.037049 0.025086 0.025086 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.6318 0.219425 0 0 0.247059 0.662745 0.960784 Xa(R=63 G=169 B=245)Pc0.55407 0 0.965515 0 0.478431 0.788235 0.262745 Xa(R=122 G=201 B=67)Pc0 0.508354 0.961639 0 1 0.576471 0.117647 Xa(R=255 G=147 B=30)Pc0 0.965057 0.900572 0 1 0.113725 0.145098 Xa(R=255 G=29 B=37)Pc0 0.661738 0.032776 0 1 0.482353 0.67451 Xa(R=255 G=123 B=172)Pc0.253758 0.127169 0.116762 0 0.741176 0.8 0.831373 Xa(R=189 G=204 B=212)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 5 255 79 255 0 50 Lb(Layer 6) Ln0 Au0 O0.706355 0.476051 0 0 0.247059 0.52549 1 Xa0 J 0 j 1 w 10 M []0 d0 XR182.584 -230.4414 m176.6978 -236.3623 170.2764 -244.1367 160.9917 -241.5088 c156.6206 -240.272 152.6479 -238.0093 148.2227 -236.8594 c144.2412 -235.8242 139.7617 -234.4541 136.6602 -231.6396 c134.0684 -229.2881 130.9492 -229.5317 128.6504 -231.0186 C125.3643 -229.1304 120.2412 -229.8203 118.6074 -234.5078 c117.3706 -238.0557 111.7261 -241.041 109.186 -243.7334 c105.1997 -247.9585 98.7197 -251.2534 93.7603 -254.2915 c84.2163 -260.1382 72.7515 -262.1138 62.3892 -266.0464 c56.7676 -268.1797 51.8174 -270.6978 45.8647 -271.9043 c39.9834 -273.0962 34.6436 -274.917 28.5991 -275.1899 c22.8584 -275.4487 17.749 -274.9043 12.1748 -273.5493 c11.1582 -273.3022 10.0879 -273.1875 9 -273.1187 C9 -286.3701 L13.8452 -287.1309 18.6245 -288.269 23.5952 -288.2656 c37.5581 -288.2559 51.6777 -284.9678 64.335 -279.1953 c76.6323 -273.5874 90.0991 -271.7788 101.7959 -264.6133 c107.8291 -260.9175 114.5161 -257.0195 119.3687 -251.876 c122.6763 -248.3706 126.417 -245.8618 129.0107 -242.1265 C132.9424 -245.2036 137.5146 -247.1138 142.2852 -248.6719 c148.2632 -250.6235 154.5142 -253.7402 160.6968 -254.7461 c173.897 -256.894 183.1777 -248.2837 191.7764 -239.6338 c197.6904 -233.6841 188.5 -224.4902 182.584 -230.4414 cf833.0786 -1 m832.3574 -2.96875 831.6025 -4.9248 830.8921 -6.88037 c826.8135 -18.1064 821.9697 -28.563 812.4565 -36.1489 c802.6431 -43.9736 792.3281 -51.4854 779.749 -53.8359 c777.1045 -54.3296 774.2974 -55.8911 771.7231 -56.7441 c768.2686 -57.8892 764.7383 -58.7681 761.1768 -59.5024 c758.3267 -60.0903 754.9121 -59.5942 752.0093 -59.5942 c749.0581 -59.5942 746.4351 -59.7549 743.665 -58.6284 c740.377 -57.291 736.5254 -60.0547 735.6689 -63.168 c735.4414 -63.9946 735.3857 -64.7798 735.4595 -65.5205 C733.6514 -68.4277 734.4795 -73.2158 737.9014 -75.2593 C737.9517 -75.439 738.0049 -75.6416 738.0654 -75.8989 c738.3765 -77.2251 738.2935 -78.7251 738.3066 -80.0845 c738.3369 -83.0786 738.0498 -86.0684 737.8687 -89.0542 c737.355 -97.5269 738.2441 -105.9014 733.0293 -113.1968 c727.3325 -121.1675 720.9561 -130.0796 712.2832 -135.0171 c708.1045 -137.396 703.6567 -138.9307 699.6299 -141.6152 c694.5088 -145.0298 689.4443 -147.9922 683.9395 -150.7446 c673.7622 -155.833 663.2505 -160.3198 652.1431 -162.918 c640.5532 -165.6289 628.9541 -168.7236 616.9844 -168.4521 c611.2349 -168.3218 605.5352 -167.4663 599.8838 -166.4648 c595.1641 -165.6279 600.6919 -166.7056 597.9351 -166.1699 c596.7637 -165.9424 595.6055 -165.6465 594.4502 -165.3511 c591.4761 -164.5908 588.5493 -163.6445 585.6885 -162.5342 c585.2539 -162.3652 584.8301 -162.1631 584.4121 -161.9482 C584.3193 -160.1221 583.3169 -158.3887 581.8555 -157.189 C581.8672 -156.7783 581.8838 -156.3638 581.8901 -155.9575 c582.02 -147.5698 569.0195 -147.5825 568.8901 -155.9575 c568.7402 -165.6475 566.4424 -175.5767 561.9219 -184.1914 c560.1147 -187.6348 557.3872 -190.2188 554.1367 -192.2813 c550.1797 -194.793 547.167 -198.1973 542.9077 -200.4482 c539.6396 -202.1753 534.665 -202.8359 531.04 -202.0146 c526.2676 -200.9331 521.0674 -201.793 516.457 -200.3418 c509.1636 -198.0469 502.1787 -191.4619 497.5176 -185.52 C497.2964 -183.4517 496.5273 -181.5767 494.9155 -180.1177 c489.3208 -175.0547 481.2666 -182.0278 484.3301 -187.5796 C484.3091 -187.7822 484.292 -187.9443 484.2842 -187.98 c483.9014 -189.7388 483.2998 -191.4551 482.71 -193.1523 c481.3213 -197.1514 479.6133 -201.0361 477.9058 -204.9058 c473.4336 -215.0386 469.5469 -224.9487 463.4526 -234.3164 c459.9116 -239.7588 457.1948 -245.7681 453.1172 -250.8545 c448.5317 -256.5757 441.0942 -260.9961 434.7593 -264.52 c429.2168 -267.603 422.6035 -268.4717 416.7007 -270.7061 c409.5103 -273.4272 401.1616 -274.4199 393.6802 -276.2036 c387.1455 -277.7612 380.9839 -280.2759 374.459 -281.8726 c366.9971 -283.6982 359.5449 -283.54 351.9302 -283.8311 c335.8057 -284.4482 319.875 -286.2788 303.707 -285.9814 c296.6035 -285.8511 289.6704 -284.7959 282.626 -284.0347 c275.2246 -283.2349 269.3184 -282.4438 263.0991 -278.1611 c257.877 -274.5654 253.3159 -269.8931 247.3535 -267.5479 c244.377 -266.3774 244.0859 -265.8145 241.3628 -263.7002 c238.416 -261.4121 234.9849 -259.8994 231.8452 -257.8735 c226.6709 -254.5356 221.4766 -251.2617 216.8906 -247.127 c213.4507 -244.0254 207.3525 -238.0508 206.6279 -233.3096 c206.0923 -229.8018 201.7422 -227.9146 198.6323 -228.77 c194.9209 -229.7905 193.5576 -233.2661 194.0928 -236.7656 c194.9829 -242.5928 199.9492 -247.2666 203.4668 -251.6572 c207.9414 -257.2432 213.7056 -261.4438 219.6079 -265.4116 c224.7427 -268.8638 231.0283 -271.5166 235.4717 -275.7539 c237.9805 -278.146 240.686 -278.6729 243.7563 -280.0713 c246.9155 -281.5098 249.7441 -284.3643 252.5063 -286.4473 c257.7822 -290.4243 262.7671 -293.8364 269.2954 -295.271 c276.3628 -296.8242 283.7734 -297.1509 290.9409 -298.1079 c306.5693 -300.1943 322.6592 -298.9028 338.3008 -297.7021 c353.2285 -296.5571 368.2178 -297.3193 382.7354 -293.123 c389.3613 -291.208 395.7378 -289.0635 402.4854 -287.4702 c410.0054 -285.6953 417.4585 -283.959 424.8184 -281.6313 c431.0884 -279.6484 437.126 -278.0781 442.9194 -274.8555 c449.27 -271.3232 456.2432 -266.5186 461.2646 -261.2485 c465.7446 -256.5464 468.8999 -250.6465 472.1372 -245.0767 c476.1123 -238.2373 480.541 -231.8354 483.7944 -224.585 c487.4526 -216.4326 489.7852 -210.3213 493.3936 -201.4629 c493.5176 -201.1577 493.6509 -200.8364 493.7881 -200.5054 C498.9282 -205.502 504.8296 -209.728 511.5156 -212.3052 c517.3281 -214.5454 523.3345 -213.5874 529.3296 -214.9453 c534.4473 -216.105 541.54 -215.1255 546.3203 -213.0923 c551.8052 -210.7588 556.604 -207.4766 561.0039 -203.4697 c565.2212 -199.6284 569.2236 -196.8892 572.4248 -191.9863 c575.8452 -186.7476 578.2012 -180.4834 579.7119 -174.0122 C579.7539 -174.0308 579.7959 -174.0513 579.8379 -174.0693 c586.4155 -176.9272 593.168 -178.4731 600.1934 -179.6489 c607.6152 -180.8911 615.1045 -181.626 622.6328 -181.4521 c630.2295 -181.2769 637.4487 -179.377 644.8154 -177.7549 c659.6724 -174.4829 673.6387 -170.4014 687.3057 -163.5674 c693.8828 -160.2783 700.0703 -156.9219 706.1914 -152.8403 c711.4453 -149.3379 717.6479 -147.5737 722.6655 -143.7085 c727.9424 -139.6436 732.522 -134.9658 736.7178 -129.8037 c740.8452 -124.7256 745.5127 -119.2739 747.8281 -113.0869 c751.2837 -103.853 750.6235 -93.8511 751.1841 -84.1704 c751.3911 -80.5942 751.4331 -76.4512 750.5957 -72.7891 C753.6919 -72.8013 756.8057 -72.5942 759.7085 -72.5942 c767.0938 -72.5942 774.8608 -69.5552 781.6831 -66.9697 c784.77 -65.7998 788.104 -65.3213 791.2515 -64.2422 c794.9409 -62.9775 798.4883 -61.228 801.9019 -59.3584 c808.9766 -55.4834 815.3486 -50.3364 821.6489 -45.3413 c832.499 -36.7378 838.1445 -24.457 842.9004 -11.7676 c844.2012 -8.29688 845.5054 -4.68994 846.6772 -1 C833.0786 -1 Lf*u1 D1545.1265 -160.5728 m1539.6157 -156.771 1531.9688 -156.6528 1525.5459 -156.647 c1521.0474 -156.6431 1516.5815 -156.2397 1512.1182 -155.8599 C1515.4868 -153.5908 1518.7427 -151.1367 1521.853 -148.332 c1528.1792 -142.627 1533.2734 -137.0884 1536.2036 -128.939 c1539.0801 -120.9385 1538.0835 -112.1094 1534.5181 -104.5557 c1530.9902 -97.0825 1522.4302 -91.7744 1514.8535 -89.3018 c1505.1816 -86.1445 1494.2515 -91.5063 1486.4419 -96.918 c1480.6787 -100.9111 1476.4766 -107.5674 1472.5679 -113.8408 C1470.5615 -109.3462 1467.4722 -105.8325 1464.874 -101.7271 c1459.668 -93.501 1449.9756 -85.4087 1440.1133 -84.083 c1434.9653 -83.3906 1428.5332 -82.5972 1423.7334 -85.0444 c1419.5913 -87.1567 1415.9043 -90.623 1412.958 -94.1978 c1401.9658 -107.5337 1404.6255 -129.2461 1414.4932 -142.4644 c1420.2236 -150.1396 1428.7363 -152.6343 1437.5264 -155.29 C1434.3354 -155.3984 1431.1309 -155.4487 1427.894 -155.4487 c1419.5815 -155.4487 1409.9756 -157.6567 1402.4473 -161.1289 c1398.5635 -162.9204 1395.4448 -166.2515 1392.6064 -169.3477 c1389.9082 -172.29 1386.3179 -174.4019 1384.0063 -177.6616 c1381.3945 -181.3438 1381.0562 -185.7451 1380.3779 -190.0864 c1379.7275 -194.251 1380.7534 -198.1846 1383.6948 -201.3091 c1394.5781 -212.8682 1414.2891 -211.9995 1427.8916 -207.2397 c1429.4678 -206.6885 1430.9888 -206.0459 1432.4678 -205.3359 C1431.8809 -214.4829 1434.8105 -221.8149 1440.7183 -229.1094 c1446.8291 -236.6548 1455.75 -241.8545 1465.3701 -242.9575 c1474.335 -243.9863 1482.5229 -237.5532 1487.0674 -230.4814 c1491.7676 -223.1675 1493.1934 -213.998 1491.8066 -205.563 c1491.3486 -202.7778 1490.6738 -200.0718 1489.8281 -197.4146 C1495.4863 -198.9102 1501.4385 -199.7505 1506.7026 -200.3389 c1511.3545 -200.8589 1516.0791 -200.7974 1520.7529 -200.7998 c1526.4932 -200.8027 1530.5649 -200.5298 1535.75 -197.9004 c1542.7017 -194.3745 1549.5591 -188.3677 1552.4932 -180.9395 c1555.7183 -172.7739 1551.9805 -165.3013 1545.1265 -160.5728 cf0 D1476.4683 -135.9619 m1477.1455 -131.8545 1477.9883 -129.3604 1480.3213 -125.8608 c1482.5693 -122.4883 1484.7988 -119.1055 1487.1362 -115.7935 c1488.8735 -113.332 1490.5679 -109.9351 1493.0029 -108.1431 c1496.1826 -105.8032 1499.6816 -103.8608 1503.3989 -102.5386 c1510.0249 -100.1816 1517.7422 -103.0591 1521.9307 -108.8145 c1525.2065 -113.3159 1525.4009 -118.9868 1524.064 -124.1953 c1522.3887 -130.7227 1517.3696 -134.7515 1512.6606 -139.1396 c1506.7974 -144.6035 1500.104 -147.8115 1493.3818 -151.9365 c1489.8364 -154.1123 1485.979 -155.9595 1481.9609 -157.229 C1481.3354 -157.3613 1480.7129 -157.479 1480.084 -157.6304 c1478.1318 -158.1006 1476.4561 -158.3896 1474.8779 -158.7925 C1474.2788 -158.8662 1473.6787 -158.9297 1473.0771 -158.9727 C1473.5469 -156.8105 1473.0488 -154.5586 1471.2656 -153.2075 C1474.8184 -148.1465 1475.459 -142.0825 1476.4683 -135.9619 cf1427.9585 -137.8403 m1423.3511 -135.0522 1421.1577 -128.3477 1419.8804 -123.4653 c1418.3271 -117.5293 1418.3662 -110.7178 1421.1655 -105.1592 c1422.4766 -102.5552 1424.6274 -100.6787 1426.7056 -98.6982 c1429.8428 -95.7075 1434.1504 -96.2817 1438.2417 -96.8315 c1446.1177 -97.8901 1451.689 -105.6909 1455.8687 -111.6426 c1457.7295 -114.292 1461.5332 -117.9033 1461.5332 -121.4146 c1461.5332 -125.7905 1461.5386 -130.1665 1461.5308 -134.543 c1461.5244 -138.1782 1461.3901 -141.9116 1459.7578 -145.2222 c1458.9937 -146.7715 1458.3696 -148.2705 1457.8818 -149.7969 C1457.856 -149.79 1457.8301 -149.7842 1457.8047 -149.7769 c1454.1499 -148.7319 1451.0635 -146.6274 1447.5981 -145.1523 c1441.1719 -142.417 1433.9736 -141.4795 1427.9585 -137.8403 cf1438.1025 -186.2002 m1434.8613 -189.1821 1431.3657 -191.9004 1427.5889 -193.4839 c1420.7231 -196.3618 1413.7749 -198.0029 1406.3135 -197.5684 c1402.3774 -197.3389 1396.5732 -195.4839 1393.6006 -192.874 c1392.4229 -191.8398 1393.7124 -189.1479 1393.9341 -187.729 c1394.4321 -184.541 1396.2568 -183.623 1398.7021 -181.6841 c1401.4648 -179.4937 1403.5767 -176.4604 1406.1973 -174.0889 c1408.9946 -171.5571 1412.4468 -171.4839 1415.8433 -170.6128 c1423.0854 -168.7559 1429.4033 -168.4487 1436.8804 -168.4487 c1441.1836 -168.4487 1445.4756 -168.1318 1449.752 -167.6489 C1449.2495 -168.4053 1448.7871 -169.1924 1448.3311 -169.9497 c1447.5518 -171.2432 1446.0078 -172.4404 1444.7915 -174.4497 c1442.4194 -178.3696 1440.0918 -182.2236 1438.1025 -186.2002 Cf1464.0713 -229.7144 m1458.3677 -228.5747 1453.5986 -224.1499 1449.9121 -219.9165 c1445.1509 -214.4502 1444.6841 -208.3369 1446.043 -201.4341 c1446.5537 -198.8408 1447.4453 -196.3657 1448.5508 -193.9717 C1449.4854 -193.1235 1450.4092 -192.2612 1451.3242 -191.3887 c1454.9966 -187.8862 1458.4453 -184.1875 1461.4717 -180.1841 C1463.4932 -182.3203 1465.9248 -183.6836 1468.2295 -185.7158 c1468.9063 -186.312 1469.6689 -186.8047 1470.4517 -187.2705 C1473.5903 -193.6079 1477.0562 -198.7949 1478.7002 -205.8726 c1480.8115 -214.9624 1476.6211 -232.2217 1464.0713 -229.7144 cf1540.0244 -177.0815 m1537.5229 -181.9727 1532.4014 -185.0459 1527.7144 -187.4229 c1525.1055 -188.7456 1520.2573 -187.8032 1517.3809 -187.7925 c1513.2524 -187.7773 1509.0654 -187.7158 1504.9717 -187.1318 c1497.9336 -186.1279 1491.0903 -183.9531 1484.4629 -181.4409 c1483.75 -181.1709 1482.0859 -179.7163 1480.5356 -178.437 C1479.3271 -176.1274 1477.9648 -173.9604 1476.3838 -172.0649 C1476.6328 -171.9189 1476.8789 -171.75 1477.1221 -171.5674 C1479.7544 -171.1865 1482.3379 -170.5913 1484.874 -169.8257 C1485.0386 -169.7974 1485.1958 -169.7671 1485.3374 -169.7329 c1488.9995 -168.8511 1492.5566 -168.6191 1496.2842 -168.2734 c1503.5337 -167.6011 1510.8862 -168.7344 1518.1016 -169.3271 c1523.2588 -169.7505 1528.6001 -169.1953 1533.707 -170.0713 c1535.5693 -170.3901 1537.5918 -170.9346 1539.0786 -172.166 c1541.3037 -174.0083 1541.3081 -174.5713 1540.0244 -177.0815 cf*U2794.9258 -316.5132 m2794.9258 -313.4365 2793.5625 -309.9912 2792.8965 -306.9971 c2792.208 -303.9033 2791.4932 -300.8179 2790.7402 -297.7388 c2789.2471 -291.6299 2788.2793 -285.6294 2785.1143 -280.1172 c2778.1592 -268.002 2768.8906 -257.0576 2757.1426 -249.4463 c2751.6914 -245.9146 2747.0645 -241.1851 2741.6582 -237.5356 c2735.7813 -233.5684 2729.666 -230.1919 2723.1816 -227.3237 c2709.9199 -221.4585 2695.8369 -216.2266 2681.2871 -215.1846 c2667.1982 -214.1763 2654.3516 -218.2988 2641.4375 -223.3774 c2636.541 -225.3027 2631.9824 -227.7563 2627.1943 -229.939 c2623.9717 -231.4082 2621.3232 -233.3101 2619.2168 -235.7529 C2618.0215 -231.4883 2615.8076 -227.6162 2614.0127 -223.4692 c2611.5977 -217.8916 2608.5156 -212.7188 2606.5801 -206.9492 c2604.9121 -201.9756 2601.418 -198.4229 2597.4941 -195.1509 c2593.0469 -191.4414 2588.9199 -187.356 2584.4502 -183.6592 c2565.7969 -168.231 2542.5811 -157.5894 2517.8379 -160.7129 c2511.4336 -161.5215 2504.9102 -161.437 2498.4668 -161.439 c2491.9082 -161.4409 2484.8691 -163.7095 2478.4561 -164.9551 c2466.1631 -167.3428 2453.4746 -169.7886 2441.6416 -174.0591 c2429.877 -178.3052 2420.916 -185.6372 2411.0957 -193.0508 c2408.8848 -194.7202 2406.7021 -196.4282 2404.5518 -198.1758 c2403.208 -199.2676 2401.918 -200.4209 2400.6309 -201.5786 c2399.9639 -202.1787 2399.5693 -202.5547 2399.3584 -202.7754 C2399.1641 -202.9043 2398.9336 -203.0601 2398.6602 -203.2476 c2397.2031 -204.2461 2395.9902 -205.5537 2395.165 -207.0039 C2392.8604 -201.6465 2388.834 -196.7148 2384.459 -193.5679 c2380.7109 -190.8726 2375.8955 -189.8569 2371.5898 -188.4355 c2365.9902 -186.5864 2360.5156 -186.6011 2354.6855 -186.6011 c2332.2051 -186.6011 2311.1377 -192.5947 2291.2598 -202.9722 c2282.3223 -207.6382 2272.8311 -213.3867 2265.9648 -220.8799 c2262.877 -224.251 2257.8662 -226.3311 2254.2754 -229.2856 c2250.0557 -232.7578 2247.2979 -238.438 2243.4512 -242.4229 c2242.0918 -243.832 2240.7695 -245.2046 2239.5664 -246.7544 c2238.2666 -248.4287 2237.6094 -250.6182 2236.375 -252.2134 c2232.6826 -256.9873 2229.7373 -262.1846 2226.9658 -267.5322 c2224.7422 -271.8198 2222.4287 -276.4336 2220.5283 -281.2002 C2219.6953 -279.7524 2218.751 -278.3887 2217.6553 -277.0024 c2216.373 -275.3794 2215.5303 -273.4854 2214.1191 -271.8672 c2206.7939 -263.4634 2194.0762 -259.8232 2183.875 -256.3271 c2177.3867 -254.1035 2170.8965 -254.7803 2164.1748 -254.897 c2156.7363 -255.0259 2149.4307 -255.0098 2142.0781 -256.3271 c2131.6602 -258.1943 2120.957 -262.4824 2113.084 -269.7388 C2112.4512 -269.0029 2111.8477 -268.2441 2111.3145 -267.4258 c2108.9316 -263.77 2106.8555 -259.9707 2104.2305 -256.4712 c2099.5244 -250.1968 2095.5869 -244.7339 2088.0215 -241.9497 c2079.4375 -238.7905 2070.3184 -238.582 2061.3545 -237.5806 c2052.8564 -236.6309 2044.2002 -236.7822 2035.668 -237.1411 c2017.9111 -237.8887 2001.8711 -242.8232 1985.2461 -248.6772 c1978.6367 -251.0044 1972.2305 -254.0527 1966.0039 -257.2607 c1964.2109 -258.1846 1962.4609 -259.1914 1960.873 -260.3418 C1960.4893 -260.0518 1960.0908 -259.7832 1959.6602 -259.562 C1959.4912 -259.4624 1959.3408 -259.3745 1959.2012 -259.293 C1959.0205 -259.1592 1958.584 -258.8623 1957.7334 -258.3057 c1953.7744 -255.7148 1948.6816 -253.8999 1944.2646 -252.1953 c1935.2588 -248.7192 1925.0273 -248.9028 1915.6221 -250.3369 c1894.4917 -253.5576 1874.7856 -264.001 1858.6548 -277.7588 c1854.8291 -281.0215 1851.3589 -284.666 1847.5527 -287.9536 c1843.272 -291.6509 1839.3784 -295.1807 1836.2856 -299.959 c1830.2764 -309.2437 1824.7451 -318.6016 1820.7305 -328.9419 c1816.6084 -339.561 1813.2954 -351.2466 1812.6353 -362.6436 c1812.3057 -368.333 1812.5518 -374.147 1812.6104 -379.8452 c1812.6143 -380.2119 1812.6338 -380.5679 1812.6631 -380.917 C1800.437 -381.9214 1789.5391 -386.3838 1777.6958 -389.6836 c1765.9424 -392.9585 1756.1035 -401.8315 1747.4551 -409.9175 c1737.7378 -419.0029 1732.1343 -430.1616 1726.4087 -441.8989 c1723.228 -448.4194 1720.8145 -455.2832 1717.6328 -461.8066 c1716.2661 -464.6074 1713.7422 -467.1177 1712.1396 -469.8438 c1710.4932 -472.645 1709.3438 -475.7891 1708.5898 -478.9355 c1706.6387 -487.0845 1719.1738 -490.542 1721.126 -482.3916 c1722.417 -477.001 1725.5859 -472.7417 1728.8574 -468.3682 c1730.5566 -466.0972 1731.5049 -462.6753 1732.6099 -460.0732 c1734.0205 -456.7515 1735.3838 -453.4126 1736.8604 -450.1191 c1741.5562 -439.6465 1746.4648 -429.7969 1754.4014 -421.3516 c1761.3291 -413.9795 1769.9824 -406.1758 1779.687 -402.6719 c1791.5332 -398.3945 1803.9854 -393.9028 1816.7031 -393.7061 c1818.3652 -393.6802 1819.6919 -393.1426 1820.6948 -392.3066 C1823.4336 -393.2705 1826.917 -391.6606 1828.3066 -389.2886 c1830.2705 -385.9355 1828.7734 -382.5557 1825.9746 -380.3955 c1824.4883 -379.248 1825.5996 -371.7607 1825.5996 -369.8325 c1825.5996 -364.9795 1825.6162 -360.2681 1826.499 -355.479 c1828.1289 -346.6382 1831.0654 -337.3398 1834.5967 -329.0801 c1838.019 -321.0757 1842.9995 -313.9243 1847.5107 -306.5205 c1849.8228 -302.7261 1853.4131 -300.0039 1856.7451 -297.146 c1860.564 -293.8706 1864.0674 -290.2686 1867.8472 -286.9512 c1880.9678 -275.4346 1897.2188 -267.5107 1914.2197 -263.769 c1921.6289 -262.1387 1929.4639 -261.7656 1936.8936 -263.4541 c1940.5244 -264.2793 1943.7568 -266.3481 1947.2744 -267.5693 c1949.7139 -268.4165 1951.9756 -269.8037 1953.9609 -271.4385 C1953.8867 -274.7603 1957.4063 -277.4824 1960.4844 -277.4824 c1964.3516 -277.4824 1966.5566 -274.4985 1966.9844 -270.9824 c1966.7119 -273.2183 1969.1191 -270.4507 1970.3555 -269.7056 c1972.4707 -268.4307 1974.7266 -267.3789 1976.9551 -266.3193 c1982.9727 -263.459 1989.0137 -261.0356 1995.3535 -258.9634 c2001.9121 -256.8188 2008.3086 -254.3071 2015.0391 -252.7246 c2022.3535 -251.0054 2029.8633 -250.3857 2037.3516 -250.0703 c2044.1592 -249.7842 2051.0313 -249.7993 2057.8301 -250.2329 c2065.5449 -250.7256 2073.4746 -251.4087 2080.9707 -253.3867 c2087.9082 -255.2173 2091.0732 -260.1548 2095.0596 -265.876 c2096.875 -268.4824 2098.4063 -271.2944 2100.0889 -273.9873 c2102.082 -277.1768 2105.1582 -279.3975 2107.041 -282.6504 c2109.7461 -287.3247 2115.373 -286.2627 2117.9053 -282.9727 C2118.5078 -282.6406 2119.0947 -282.1821 2119.6465 -281.5698 c2126.1094 -274.3999 2134.8359 -271.4146 2143.9941 -269.2139 c2149.3037 -267.938 2154.8291 -267.9521 2160.2607 -267.9043 c2166.2578 -267.8516 2172.7529 -266.8462 2178.6221 -268.2471 c2183.2207 -269.3447 2187.792 -271.833 2192.3594 -273.2544 c2196.0166 -274.3931 2200.4609 -276.7031 2203.1729 -279.4199 c2207.8389 -284.0962 2212.4131 -291.5107 2212.791 -298.5405 c2213.0498 -303.356 2217.4951 -305.3984 2221.1191 -304.6553 C2224.7627 -305.4253 2229.2051 -303.3848 2229.3857 -298.5405 c2229.6934 -290.2686 2234.4922 -281.3545 2238.1904 -274.0938 c2240.3975 -269.7607 2242.7939 -265.5488 2245.5381 -261.5327 c2247.9102 -258.061 2249.6445 -254.6348 2252.6445 -251.6152 c2255.918 -248.3198 2258.752 -244.6133 2261.4834 -240.8652 c2264.0752 -237.3096 2267.9775 -235.3413 2271.6563 -233.063 c2275.1543 -230.897 2277.5947 -227.3516 2280.9189 -224.8604 c2284.4102 -222.2446 2287.9854 -219.7993 2291.7402 -217.5811 c2307.6748 -208.166 2325.5059 -201.5635 2344.0039 -199.8418 c2353.2617 -198.9795 2362.5068 -199.1128 2371.3301 -202.0264 c2374.2441 -202.9888 2377.6045 -203.7622 2379.5703 -206.3789 c2381.0762 -208.3843 2383.9521 -212.1587 2384.1309 -214.668 c2384.6631 -222.1406 2395.2217 -222.9375 2396.916 -216.9409 C2401.6387 -220.7153 2407.8311 -216.7803 2408.1855 -212.3198 C2408.293 -212.208 2408.4121 -212.1104 2408.5156 -211.9951 C2410.5811 -209.9751 2412.8115 -208.126 2415.0508 -206.3057 c2418.9297 -203.1538 2422.8662 -199.9956 2426.835 -196.9604 c2435.3691 -190.4355 2444.7461 -186.2427 2455.1094 -183.5913 c2465.2363 -181.001 2475.2773 -178.8149 2485.5176 -176.7827 c2490.9453 -175.7056 2496.3135 -174.4468 2501.8613 -174.4346 c2507.7773 -174.4214 2513.6797 -174.2378 2519.5527 -173.4966 c2540.166 -170.8945 2559.6816 -180.2144 2575.2578 -192.8516 c2578.9961 -195.8848 2582.6348 -199.083 2586.1055 -202.4199 c2589.2969 -205.4883 2593.0859 -207.5459 2594.5615 -211.9458 c2596.207 -216.8511 2598.7822 -221.1294 2600.9385 -225.7856 c2602.0215 -228.1255 2602.9893 -230.521 2604.0371 -232.8774 c2604.999 -235.0415 2606.7676 -237.4199 2606.9922 -239.8301 c2607.4492 -244.7241 2612.1865 -246.7476 2615.8193 -245.8579 C2616.6543 -247.6812 2618.3389 -249.1934 2620.1504 -249.6919 c2623.8691 -250.7148 2626.8164 -248.4331 2628.1465 -245.1523 c2629.334 -242.2236 2634.4873 -240.8242 2637.0879 -239.6758 c2641.2754 -237.8257 2645.2109 -235.7686 2649.5176 -234.1157 c2661.1758 -229.6411 2672.1582 -227.2676 2684.6953 -228.4702 c2696.5508 -229.6074 2709.1328 -235.0859 2719.8633 -240.0103 c2730.8652 -245.0586 2739.709 -252.52 2749.1992 -259.8203 c2753.7939 -263.3545 2758.332 -266.2192 2762.3662 -270.5024 c2766.3555 -274.7378 2769.7656 -280.3389 2772.9746 -285.2012 c2775.8848 -289.6128 2776.668 -294.6016 2777.8457 -299.6743 c2779.167 -305.3711 2780.46 -311.0767 2781.7988 -316.77 c2783.1719 -322.6104 2780.9941 -329.106 2782.1582 -335.0156 c2783.5313 -341.9907 2782.8838 -349.0898 2782.3652 -356.1235 c2781.9805 -361.3359 2782.4258 -366.77 2781.6406 -371.9336 c2780.7676 -377.6714 2777.002 -381.1709 2773.0469 -385.0059 c2767.0195 -390.8501 2776.2207 -400.0337 2782.2383 -394.1982 c2787.0244 -389.5581 2790.3828 -385.6157 2792.9463 -379.4009 c2795.2402 -373.8418 2794.8145 -367.7188 2795.0137 -361.8325 c2795.2725 -354.1909 2796.3047 -346.6563 2795.7861 -338.9966 c2795.2754 -331.4531 2794.9258 -324.1055 2794.9258 -316.5132 cf3504.6611 -293.2173 m3504.3945 -294.2207 3501.5146 -296.7583 3500.7539 -297.6509 c3499.0273 -299.6743 3496.1328 -303.3926 3494.332 -304.623 c3488.5332 -308.5835 3483.3193 -313.2329 3477.1387 -316.6357 c3470.7041 -320.1792 3463.9727 -322.7549 3456.9424 -324.8438 c3453.2285 -325.9473 3449.4805 -327.1108 3445.6973 -327.9399 c3441.668 -328.8232 3437.1279 -328.2266 3433.0469 -328.063 c3425.502 -327.7603 3418.7793 -327.0493 3411.7666 -323.9761 c3405.2178 -321.1055 3399.1973 -317.0762 3393.332 -313.0298 c3390.5703 -311.1245 3387.6035 -309.6406 3384.7295 -307.9238 c3381.5225 -306.0088 3379.0498 -301.8364 3376.6484 -299.0361 c3373.9863 -295.9321 3371.6123 -292.749 3369 -289.6006 c3368.3652 -288.8354 3368.0449 -288.6143 3367.8965 -288.5742 C3367.9492 -288.4648 3368 -288.2231 3368 -287.7119 C3368 -282 L3368 -278.3804 3365.8408 -276.2197 3363.2598 -275.5112 C3361.7744 -272.3833 3358.125 -270.2651 3354.2813 -272.5586 c3347.0225 -276.8882 3336.2607 -274.1021 3328.2012 -274.0576 c3318.9316 -274.0068 3310.6201 -271.5107 3301.6191 -269.853 c3292.4268 -268.1602 3284.3838 -264.0557 3278.2852 -256.8003 c3272.1797 -249.5361 3269.4053 -243.0303 3269.4053 -233.3979 c3269.4053 -228.3022 3268.709 -222.6685 3270.0166 -217.7183 c3271.3418 -212.7017 3273.1406 -207.8677 3274.3496 -202.8086 c3275.4131 -198.3564 3278.4131 -194.4023 3280.5 -190.3901 c3282.8457 -185.8828 3285.1807 -181.3208 3287.4756 -176.7788 c3289.7734 -172.231 3292.8467 -168.3662 3295.75 -164.1572 c3298.3828 -160.3403 3300.6973 -155.9834 3304.5273 -153.1821 c3306.0303 -152.083 3307.4336 -151.1758 3309.0908 -150.3066 c3311.7285 -148.9229 3313.5703 -146.7529 3315.9111 -144.9443 c3317.6406 -143.6079 3319.4863 -142.4146 3321.3027 -141.2007 c3323.8857 -139.4736 3321.9561 -139.7075 3325.2109 -139.6914 c3327.3262 -139.6807 3328.9063 -138.8433 3329.9541 -137.5996 C3333.6055 -136.3735 3336.1719 -132.5801 3333.2197 -128.7124 c3329.8389 -124.2822 3325.2334 -121.2202 3321.8457 -116.7725 c3318.1016 -111.856 3316.2402 -105.5361 3314.3594 -99.7261 c3312.3438 -93.5024 3312.1328 -87.3901 3312.3584 -80.9082 c3312.6143 -73.5679 3312.7656 -66.3027 3313.6221 -58.9966 c3314.4209 -52.1826 3316.0557 -45.562 3316.9805 -38.7656 c3317.8945 -32.0493 3319.0586 -25.4399 3320.9434 -18.9209 c3322.5166 -13.4814 3325.5801 -8.86475 3328.3311 -3.98242 c3328.9082 -2.95898 3329.5303 -1.9707 3330.1768 -1 C3315.1729 -1 L3315.0469 -1.24023 3314.9219 -1.47949 3314.8057 -1.70557 c3311.4902 -8.18701 3308.501 -13.9834 3306.9619 -21.231 c3305.2266 -29.4033 3304.4785 -37.7568 3302.6172 -45.8979 c3300.6475 -54.5137 3299.834 -63.7158 3299.5605 -72.5449 c3299.3105 -80.5991 3298.9355 -88.5869 3300.1494 -96.5811 c3301.3066 -104.2031 3304.5889 -112.8242 3308.2002 -119.5928 c3309.9043 -122.7852 3312.3926 -125.2944 3314.5576 -128.1318 c3314.9063 -128.5894 3315.293 -129.0078 3315.6914 -129.4126 C3314.959 -129.853 3314.208 -130.3311 3313.3926 -130.876 c3308.4102 -134.207 3303.7979 -137.9341 3298.8193 -141.2378 c3294.3525 -144.2021 3290.2529 -148.5195 3287.4658 -153.083 c3284.293 -158.2778 3279.3408 -163.0972 3276.9805 -168.6602 c3272.542 -179.1201 3265.2285 -188.4585 3261.8145 -199.3525 c3259.9385 -205.3359 3258.002 -211.6079 3256.6377 -217.7324 c3255.3467 -223.5269 3256.332 -230.7075 3256.4316 -236.6362 c3256.7988 -258.4019 3275.6523 -278.3887 3296.7588 -282.1475 c3307.3672 -284.0371 3317.3027 -286.8999 3328.2012 -287.0576 c3336.7979 -287.1821 3346.0752 -288.7188 3354.4492 -286.4482 C3354.4258 -288.4253 3354.5078 -290.6118 3354.8887 -291.998 c3356.0117 -296.0806 3360.4639 -299.6475 3362.9814 -302.9277 c3368.5332 -310.1636 3374.2598 -317.168 3382.3809 -321.5361 c3390.2285 -325.7573 3397.0605 -331.4155 3405.2051 -335.2158 c3413.5234 -339.0967 3422.0938 -340.9019 3431.25 -341.0146 c3435.4561 -341.0669 3439.6211 -341.3877 3443.8311 -341.167 c3448.4707 -340.9229 3452.8516 -339.5249 3457.2871 -338.2749 c3466.0527 -335.8037 3473.9531 -332.3584 3482.2061 -328.6143 c3486.1582 -326.8208 3489.7207 -324.1992 3493.1787 -321.6143 c3496.4844 -319.1436 3500.6387 -316.8252 3503.543 -313.9199 c3506.4385 -311.0254 3509.5703 -307.626 3511.9961 -304.3154 c3513.9043 -301.7119 3516.3242 -299.9526 3517.1963 -296.6733 c3519.3555 -288.5615 3506.8145 -285.1235 3504.6611 -293.2173 cf3837 -367.6333 m3836.0762 -367.6064 3835.1572 -367.7358 3834.2627 -368.1123 c3831.1875 -369.4067 3829.8047 -371.5684 3829.3271 -374.4614 C3828.4404 -376.1328 3827.7246 -377.8662 3826.5625 -379.3286 c3824.1221 -382.397 3821.2246 -385.0957 3818.3086 -387.7012 c3812.1211 -393.2305 3805.7539 -398.5513 3797.8496 -401.3623 c3790.6055 -403.9385 3782.8809 -404.4658 3775.2617 -404.6597 c3766.749 -404.876 3758.1504 -404.833 3749.6514 -404.3101 c3741.2529 -403.7935 3733.0273 -402.1543 3724.7344 -400.9512 c3720.4551 -400.3306 3716.4355 -398.4517 3712.1543 -397.7119 c3707.1992 -396.8555 3703.1436 -395.0298 3698.8184 -392.5093 c3691.4795 -388.2329 3686.1289 -381.9517 3679.4082 -376.9644 c3676.7051 -374.958 3673.0166 -373.498 3670.6201 -371.1782 c3669.4609 -370.0562 3668.2637 -368.9751 3667.1143 -367.8418 c3666.7227 -367.4556 3664.7051 -364.8652 3664.8057 -365.6377 c3664.3516 -362.1245 3662.1934 -359.1377 3658.3057 -359.1377 c3656.4238 -359.1377 3654.3545 -360.1729 3653.0576 -361.7393 C3652.5225 -361.8887 3651.9785 -362.1064 3651.4297 -362.4219 c3645.96 -365.562 3640.7861 -369.8794 3634.668 -371.8477 c3627.3408 -374.2041 3619.4023 -375.6113 3611.7422 -376.2412 c3596.7324 -377.4761 3580.5322 -376.5942 3566.752 -370.167 c3560.3467 -367.1792 3555.6367 -361.1597 3550.2334 -356.77 c3544.2236 -351.8877 3539.8291 -346.8643 3536.0166 -340.0654 c3532.2422 -333.335 3531.9238 -325.0986 3531.7715 -317.5889 c3531.6553 -311.8687 3530.5156 -304.6724 3533.3164 -299.4243 c3537.2617 -292.0317 3526.0391 -285.4648 3522.0918 -292.8628 c3518.4736 -299.6421 3518.498 -307.3784 3518.6953 -314.874 c3518.9277 -323.6655 3519.4941 -331.9531 3522.0605 -340.4302 c3524.5068 -348.5137 3530.4092 -356.3335 3536.3516 -362.2041 c3539.2012 -365.019 3542.6406 -367.2144 3545.6064 -369.9233 c3549.0791 -373.0947 3552.498 -376.2251 3556.291 -379.0195 c3570.7031 -389.6411 3591.2188 -389.7158 3608.2373 -389.4067 c3617.1807 -389.2441 3626.3867 -387.5029 3635.0313 -385.2749 c3642.7471 -383.2856 3649.1758 -378.8916 3655.877 -374.8896 C3658.291 -378.0654 3661.4648 -380.7769 3664.6514 -382.8345 c3668.4346 -385.2783 3672.0605 -387.4233 3675.2988 -390.6025 c3679.1084 -394.3423 3683.3408 -397.6509 3687.6748 -400.7554 c3691.5684 -403.5439 3695.7715 -405.8525 3700.1563 -407.7622 c3705.2246 -409.9697 3710.6699 -410.3154 3715.8877 -412.0391 c3721.0322 -413.7388 3726.499 -414.2627 3731.8213 -415.1963 c3737.127 -416.127 3742.498 -416.7339 3747.8633 -417.1807 c3757.4854 -417.9819 3767.2813 -417.8623 3776.9268 -417.6172 c3786.2617 -417.3799 3795.6709 -416.1685 3804.4014 -412.7397 c3813.2773 -409.2534 3820.3799 -403.0752 3827.501 -396.8936 c3830.9736 -393.8794 3834.1787 -390.5566 3837 -386.9233 C3837 -367.6333 Lf3663.7637 -1530.5781 m3663.4727 -1529.4824 3663.3096 -1528.3984 3663.1074 -1527.2842 c3661.9033 -1520.6152 3657.2568 -1515.1553 3653.9736 -1509.3848 c3650.54 -1503.3486 3646.5117 -1497.7783 3642.3506 -1492.2246 c3640.6523 -1489.958 3637.8428 -1488.6143 3636.3594 -1486.2422 c3634.9219 -1483.9414 3632.6436 -1481.2441 3630.3389 -1479.8076 c3619.2363 -1472.8896 3605.3965 -1483.3213 3597.6426 -1490.7061 c3587.9229 -1499.9639 3577.623 -1508.791 3568.3506 -1518.5254 C3567.2178 -1514.3877 3564.8477 -1511.5303 3562.3477 -1507.54 c3559.0479 -1502.2725 3554.626 -1497.7109 3550.2715 -1493.3203 c3546.3604 -1489.3779 3541.1934 -1486.707 3537.3096 -1482.7305 c3533.6768 -1479.0107 3529.7422 -1474.9043 3524.2148 -1474.5391 c3513.8232 -1473.8516 3503.3379 -1485.5752 3496.6191 -1492.251 c3494.4941 -1494.3633 3492.7441 -1496.8789 3490.8613 -1499.2109 c3488.748 -1501.8281 3487.1104 -1505.3516 3484.7656 -1507.6982 c3480.1602 -1512.3066 3475.6982 -1517.0195 3471.5859 -1522.0762 c3466.3457 -1528.5195 3475.4863 -1537.7764 3480.7773 -1531.2695 c3483.8125 -1527.5381 3487.0234 -1523.9873 3490.3633 -1520.5293 c3493.7002 -1517.0742 3496.2148 -1513.832 3498.9238 -1509.8945 c3504.2432 -1502.1641 3511.4619 -1495.0254 3519.2715 -1489.8262 c3520.0928 -1489.2803 3523.2734 -1487.4922 3523.2422 -1487.4785 c3524.7813 -1488.1758 3525.9824 -1489.71 3527.1299 -1490.8906 c3530.5273 -1494.3867 3534.627 -1497.373 3538.502 -1500.3457 c3542.0635 -1503.0801 3545.1045 -1506.5488 3548.0313 -1509.9395 c3549.5469 -1511.6953 3550.8164 -1513.6133 3552.0459 -1515.5742 c3553.377 -1517.6992 3555.7041 -1519.1641 3555.9512 -1521.8799 c3556.3477 -1526.2383 3560.1406 -1528.3193 3563.5332 -1528.0967 C3564.7324 -1532.4814 3570.333 -1535.5957 3574.2363 -1531.2695 c3582.7402 -1521.8418 3592.4961 -1513.7373 3601.6641 -1504.9883 c3605.0264 -1501.7793 3608.166 -1498.2734 3611.8682 -1495.4385 c3614.3682 -1493.5234 3621.375 -1488.6084 3624.2031 -1491.7285 c3625.4785 -1493.1348 3626.4453 -1494.7822 3627.7041 -1496.2109 c3629.3848 -1498.1182 3631.5381 -1499.3477 3633.0859 -1501.4219 c3636.9609 -1506.6143 3640.457 -1511.9443 3643.6582 -1517.5713 c3646.1182 -1521.8965 3649.6348 -1525.8369 3650.5723 -1530.7969 c3651.1309 -1533.75 3651.7363 -1536.3135 3653.1406 -1538.5449 C3654.5391 -1545.9648 3666.0029 -1545.4512 3666.0029 -1537 c3666.0029 -1534.6094 3665.4785 -1533.0156 3664.0479 -1531.5381 C3663.9951 -1531.374 3663.8945 -1531.0703 3663.7637 -1530.5781 cf*u1 D1725.7842 -2015.043 m1722.9438 -2012.9736 1720.3271 -2010.5967 1717.4014 -2008.6523 c1714.1484 -2006.4912 1709.4609 -2006.374 1705.7061 -2005.8965 c1701.4688 -2005.3574 1695.7549 -2004.6191 1691.563 -2005.668 c1690.5986 -2005.9092 1689.6426 -2006.1621 1688.6865 -2006.416 C1689.2168 -2005.1719 1689.7109 -2003.9082 1690.126 -2002.6045 c1692.5166 -1995.0986 1692.2549 -1983.583 1686.6113 -1977.4736 c1681.2925 -1971.7148 1673.9712 -1972.9609 1666.9307 -1973.084 c1661.9072 -1973.1719 1656.5908 -1974.2627 1651.7153 -1976.3047 C1649.3618 -1959.6543 1627.7646 -1953.166 1612.8379 -1955.6982 c1608.1753 -1956.4902 1603.2134 -1959.2324 1598.7041 -1960.7354 c1593.8311 -1962.3604 1590.834 -1965.9307 1589.1094 -1970.7607 c1585.999 -1979.4717 1587.9897 -1989.8379 1590.6313 -1998.4375 c1592.0059 -2002.9121 1594.3213 -2007.2227 1597.6313 -2010.542 c1598.4053 -2011.3184 1599.1118 -2012.1484 1599.7954 -2012.9961 C1595.7534 -2013.3232 1591.8184 -2014.251 1588.165 -2015.9082 c1573.5674 -2022.5293 1556.0552 -2030.6113 1551.249 -2047.4863 c1548.9795 -2055.4541 1552.9287 -2062.8574 1559.354 -2067.3584 c1567.1748 -2072.8369 1579.0195 -2071.7422 1587.6929 -2069.4736 c1595.8916 -2067.3281 1603.5469 -2062.4541 1610.1392 -2057.0293 C1607.7813 -2065.5156 1606.0127 -2074.7734 1608.7686 -2083.3086 c1611.3599 -2091.3359 1616.873 -2098.4502 1622.7354 -2104.4336 c1627.6484 -2109.4473 1634.1475 -2112.8076 1641.0557 -2113.998 c1648.4717 -2115.2744 1655.5234 -2113.1582 1658.8496 -2106.0049 c1662.7236 -2097.6719 1664.4199 -2087.9824 1665.0088 -2078.873 c1665.6162 -2069.4736 1660.7773 -2060.4248 1656.0381 -2052.6426 c1654.623 -2050.3184 1653.2363 -2047.9805 1651.8203 -2045.6641 C1656.606 -2046.9639 1661.3711 -2048.3896 1666.4814 -2048.3896 c1675.7085 -2048.3896 1684.627 -2050.3672 1693.9751 -2049.7822 c1702.7012 -2049.2373 1711.0059 -2046.9844 1718.8345 -2043.123 c1725.2896 -2039.9395 1734.4536 -2031.5313 1732.0122 -2023.3926 c1730.9365 -2019.8076 1728.7822 -2017.2275 1725.7842 -2015.043 cf0 D1617.5391 -2032.0146 m1616.5205 -2033.3965 1615.5352 -2034.8281 1614.4077 -2036.0957 c1611.9868 -2038.8164 1608.6753 -2040.791 1606.02 -2043.2852 c1603.2861 -2045.8525 1600.5518 -2048.2334 1597.4507 -2050.3555 c1591.6416 -2054.3301 1585.1826 -2057.4277 1578.1157 -2058.1553 c1573.3271 -2058.6484 1563.7744 -2058.3633 1563.6646 -2051.7822 c1563.5811 -2046.7715 1569.9409 -2041.0918 1573.543 -2038.3721 c1578.8013 -2034.4023 1584.915 -2031.6074 1590.875 -2028.8799 c1597.604 -2025.8008 1605.5435 -2025.4336 1612.9385 -2027.2432 C1614.4395 -2028.4453 1615.9814 -2029.6113 1617.5762 -2030.6875 C1617.5254 -2031.1289 1617.5117 -2031.5732 1617.5391 -2032.0146 Cf1616.3057 -2013.1582 m1615.1592 -2012.1758 1614.3438 -2010.2412 1613.4775 -2009.0098 c1612.1821 -2007.168 1610.6846 -2005.457 1609.1777 -2003.7891 c1606.5986 -2000.9346 1604.4727 -1998.6787 1603.167 -1994.9814 c1601.1089 -1989.1543 1599.5703 -1981.6201 1601.1729 -1975.5391 c1602.1001 -1972.0195 1606.0244 -1971.9824 1609.3491 -1970.875 c1613.418 -1969.5186 1616.1885 -1967.9658 1620.5996 -1968.2217 c1626.3447 -1968.5537 1633.585 -1970.3682 1637.7456 -1974.5918 c1640.0078 -1976.8877 1639.3726 -1982.1621 1638.3838 -1986.2305 C1633.7178 -1992.043 1630.104 -1999.3945 1627.7139 -2006.2891 c1626.4282 -2009.9971 1624.6821 -2013.5771 1623.8779 -2017.4141 C1622.2852 -2016.7178 1620.6528 -2016.0898 1618.9907 -2015.5381 C1618.0303 -2014.6797 1617.1274 -2013.8623 1616.3057 -2013.1582 cf1652.0049 -2075.917 m1652.5747 -2082.71 1650.5332 -2089.8447 1648.6621 -2096.2939 c1648.2744 -2097.6309 1647.8135 -2101.2324 1646.0791 -2101.4023 c1643.624 -2101.6436 1641.1855 -2100.7813 1638.9131 -2099.9727 c1634.0034 -2098.2246 1630.2261 -2093.874 1627.2402 -2089.7988 c1622.936 -2083.9238 1620.2061 -2079.3193 1620.4512 -2071.8076 c1620.6855 -2064.6016 1623.4746 -2057.4277 1626.1592 -2050.8516 c1627.7197 -2047.0293 1629.9985 -2043.5527 1631.6934 -2039.8643 C1636.3647 -2044.8906 1639.0137 -2050.7344 1642.9028 -2056.2832 c1646.7676 -2061.7979 1651.4297 -2069.0527 1652.0049 -2075.917 cf1642.7974 -2019.5674 m1642.0146 -2019.7725 1641.2275 -2020.0068 1640.4375 -2020.251 C1640.7661 -2019.6699 1641.0605 -2019.0752 1641.2886 -2018.4541 c1642.8066 -2014.3203 1644.8276 -2010.3721 1646.292 -2006.2012 c1647.8496 -2001.7656 1649.2793 -1997.0693 1650.3169 -1992.3096 C1654.606 -1988.248 1661.2588 -1986.2314 1666.9307 -1986.084 c1669.4004 -1986.0195 1671.8628 -1985.8301 1674.332 -1985.7676 c1677.1162 -1985.6982 1677.0176 -1985.9043 1677.8569 -1988.6982 c1680.3442 -1996.9727 1675.5576 -2007.1855 1668.3984 -2012.6016 C1666.4849 -2013.2324 1664.5693 -2013.8682 1662.6436 -2014.5049 c1659.8452 -2015.4307 1657.0864 -2016.3867 1654.4063 -2017.4746 C1650.52 -2018.0957 1646.5967 -2018.5732 1642.7974 -2019.5674 cf1703.3184 -2035.2334 m1696.5049 -2037.1143 1689.3486 -2037.166 1682.3403 -2036.8281 c1679.1924 -2036.6758 1676.2725 -2035.7842 1673.1616 -2035.5146 c1669.5938 -2035.2051 1665.7197 -2035.9756 1662.207 -2035.3057 c1658.8838 -2034.6719 1655.6943 -2033.707 1652.4951 -2032.8125 C1654.5156 -2031.5137 1656.6812 -2030.4824 1658.9189 -2029.583 C1664.1172 -2028.5742 1669.0596 -2027.3184 1673.7734 -2024.376 C1677.8257 -2022.9727 1681.8887 -2021.6104 1686.0693 -2020.4863 c1693.1367 -2018.5869 1699.6792 -2017.8848 1706.9746 -2019.1035 c1710.2119 -2019.6445 1711.5186 -2020.208 1713.8564 -2022.5215 c1714.7998 -2023.4561 1716.0977 -2024.1426 1717.208 -2024.8594 c1718.377 -2025.6152 1718.8286 -2026.6445 1719.3306 -2025.8086 C1716.7427 -2031.2744 1708.5347 -2033.7939 1703.3184 -2035.2334 cf*U563.1519 -2153 m585.123 -2153 L583.5132 -2151.8857 581.9028 -2150.7695 580.2275 -2149.7461 c577.4902 -2148.0732 572.3823 -2145.7861 571.5288 -2142.4395 c571.0596 -2140.5996 570.6396 -2138.4824 570.5376 -2136.4072 C574.6973 -2136.3262 579.0454 -2137.0215 583.0786 -2137.0771 c589.7412 -2137.168 589.9761 -2141.5195 593.7373 -2145.9355 c596.3008 -2148.9443 599.3945 -2151.0068 602.646 -2153 C622.2456 -2153 L621.9883 -2152.6455 621.7202 -2152.2988 621.4341 -2151.9639 c622.9492 -2153.7656 620.8965 -2149.5732 620.8877 -2149.5508 c618.9526 -2144.6797 616.7739 -2140.4766 616.1855 -2135.1523 c615.3901 -2127.9619 618.1279 -2114.6494 627.3354 -2113.6309 c631.6772 -2113.1514 634.0747 -2119.376 635.0225 -2122.6973 c636.6255 -2128.3135 640.6172 -2134.0547 640.7866 -2140.0439 C638.8604 -2144.1895 637.4688 -2148.5566 636.6855 -2153 C653.939 -2153 L654.3228 -2149.6553 654.3735 -2146.04 654.0986 -2142.4727 C656.6934 -2137.8652 660.085 -2133.7148 663.8677 -2130.5469 c672.5801 -2123.251 682.1274 -2122.1016 692.7314 -2125.29 C693.082 -2125.4141 693.4048 -2125.5889 693.7114 -2125.7939 C693.3994 -2125.6904 693.832 -2126.6689 693.7056 -2127.4834 c693.3633 -2129.6807 692.6724 -2131.8359 692.0137 -2133.9531 c690.3818 -2139.1934 684.6045 -2144.4512 681.0039 -2148.4912 c679.6436 -2150.0176 678.3599 -2151.5049 677.1299 -2153 C693.853 -2153 L695.7017 -2150.9492 697.5181 -2148.8906 699.1504 -2146.751 c703.4873 -2141.0664 705.9883 -2135.0664 706.6787 -2127.8906 c707.418 -2120.2031 703.1133 -2115.3516 696.1875 -2112.7539 c678.9492 -2106.2871 661.8989 -2113.1504 650.3633 -2125.7031 C648.7666 -2120.9131 646.8228 -2116.1309 644.5952 -2111.9033 c641.4546 -2105.9414 635.7261 -2100.7119 628.665 -2100.6445 c615.2861 -2100.5156 605.6113 -2113.2432 603.6011 -2125.4316 c602.9541 -2129.3525 602.8911 -2133.4941 603.3774 -2137.5527 C602.2002 -2135.7529 601.3442 -2133.3184 600.1782 -2131.9492 c595.8027 -2126.8125 591.1587 -2124.6504 584.4517 -2124.1299 c577.4453 -2123.5859 569.7969 -2122.918 562.8789 -2124.2871 c560.7305 -2124.7119 558.8711 -2126.7666 558.3389 -2128.8262 c557.0918 -2133.6563 557.7349 -2138.6094 558.501 -2143.459 c559.1196 -2147.375 560.7427 -2150.3672 563.1519 -2153 Cf131.7876 -1612.4121 m131.335 -1614.0225 130.3257 -1615.5566 129.0879 -1617.5898 c127.5859 -1620.0566 126.4326 -1622.7744 125.7964 -1625.5928 c123.9517 -1633.7568 136.4849 -1637.2246 138.3315 -1629.0479 c139.3535 -1624.5254 142.9668 -1620.6963 144.3228 -1615.8672 c146.5947 -1607.7813 134.0508 -1604.3535 131.7876 -1612.4121 cf133.0659 -1369.5156 m135.7964 -1366.7842 135.248 -1363.1094 133.0659 -1360.3223 c130.9844 -1357.6641 127.1978 -1356.7041 124.0586 -1356.0273 c122.3911 -1355.667 120.7144 -1355.3633 119.062 -1354.9346 c118.9736 -1354.9121 118.7808 -1354.8398 118.561 -1354.7559 C117.5029 -1352.6797 115.521 -1351.2295 112.8931 -1351.2295 c109.5703 -1351.2295 106.1016 -1354.1934 106.3931 -1357.7295 c106.8442 -1363.2051 110.6167 -1366.042 115.606 -1367.4707 c117.4478 -1367.9971 119.3574 -1368.2939 121.228 -1368.6973 c122.0908 -1368.8838 122.939 -1369.1152 123.7788 -1369.3848 C123.8047 -1369.4229 123.833 -1369.4639 123.8735 -1369.5156 c126.062 -1372.3096 130.7886 -1371.792 133.0659 -1369.5156 cf279 -1243.9033 m279 -1234.3174 L279 -1230.7744 276.0435 -1227.8174 272.5 -1227.8174 c268.9565 -1227.8174 266 -1230.7744 266 -1234.3174 C266 -1243.9033 L266 -1247.4463 268.9565 -1250.4033 272.5 -1250.4033 c276.0435 -1250.4033 279 -1247.4463 279 -1243.9033 Cf442.3926 -1405.1475 m438.584 -1405.1504 434.7324 -1405.4385 431.0791 -1406.5781 c427.6997 -1407.6318 425.5757 -1411.0713 426.5391 -1414.5732 c427.4546 -1417.9014 431.1528 -1420.168 434.5352 -1419.1133 c435.2471 -1418.8916 435.9561 -1418.6982 436.6821 -1418.5293 c437.0361 -1418.4531 437.3936 -1418.3926 437.751 -1418.332 C437.8296 -1418.3281 438.0327 -1418.3076 438.3765 -1418.2695 c439.71 -1418.1475 441.0547 -1418.1484 442.3926 -1418.1475 c445.936 -1418.1445 448.8926 -1415.1924 448.8926 -1411.6475 c448.8926 -1408.1064 445.936 -1405.1445 442.3926 -1405.1475 cf351.8398 -1665.5 m351.8398 -1661.957 348.8833 -1659 345.3398 -1659 C344.1416 -1659 L340.7183 -1659 337.4829 -1662.0391 337.6416 -1665.5811 c337.7983 -1669.0801 339.5464 -1672.502 341.9419 -1675.0098 c344.3887 -1677.5723 348.6729 -1677.4912 351.1343 -1675.0303 c353.4492 -1672.7148 353.5698 -1669.1426 351.7383 -1666.5879 C351.8003 -1666.2324 351.8398 -1665.8711 351.8398 -1665.5 cf*u1 D403.3823 -1537.1797 m402.1553 -1536.9414 400.9766 -1536.6445 399.8301 -1536.2939 C401.7808 -1531.5029 397.2939 -1526.8633 393.8125 -1523.9277 c387.0249 -1518.2051 378.3833 -1514.1426 370.7954 -1509.5449 c370.561 -1509.4023 370.3354 -1509.248 370.1025 -1509.1035 C367.2866 -1504.0156 362.2603 -1500.3125 358.2607 -1495.7148 c351.0952 -1487.4756 345.5171 -1477.8535 339.3896 -1468.8516 c333.3599 -1459.9922 327.626 -1450.9033 321.4453 -1442.1533 c317.4131 -1436.4453 313.0894 -1430.9561 308.8906 -1425.374 C309.6216 -1424.0684 310.2861 -1422.7344 310.937 -1421.4678 c313.9395 -1415.6289 316.7607 -1409.8086 319.2046 -1403.6963 c323.9521 -1391.8232 326.248 -1379.1973 326.625 -1366.4502 C328.8604 -1360.5479 331.1396 -1354.4336 331.4707 -1348.1445 c331.7969 -1341.9531 325.272 -1340.502 321.2461 -1343.2529 C321.0703 -1343.1875 320.8926 -1343.125 320.708 -1343.0752 c316.2324 -1341.8535 312.0771 -1344.2363 308.5391 -1346.75 c306.937 -1347.8877 305.3848 -1349.1309 303.9165 -1350.4375 c301.8105 -1352.3115 298.1543 -1353.3721 295.6724 -1354.751 c289.9478 -1357.9316 284.6963 -1361.8105 278.8315 -1364.7959 c271.7891 -1368.3809 265.4307 -1371.9746 259.0723 -1376.6357 C258.9536 -1376.4287 258.8433 -1376.2207 258.6924 -1376.0166 c254.9473 -1370.9385 249.9863 -1368.0918 245.5449 -1363.8193 c243.1479 -1361.5137 240.4863 -1359.4824 237.9873 -1357.2852 C235.9443 -1354.7607 233.8184 -1352.3398 231.7607 -1349.8828 C228.7949 -1345.3887 225.8052 -1340.9102 222.7476 -1336.4766 c217.9424 -1329.5098 208.0527 -1335.4434 211.522 -1343.0371 c212.189 -1344.4971 212.9395 -1345.8984 213.7427 -1347.2637 C207.8574 -1350.0078 209.9517 -1356.5381 211.8101 -1361.5479 C213.335 -1373.7324 214.084 -1386.3438 214.2295 -1398.4678 c214.2354 -1398.9756 214.2905 -1399.4512 214.3848 -1399.8975 C214.3086 -1401.4121 214.2476 -1402.9287 214.2295 -1404.4463 c214.2144 -1405.7041 214.6436 -1406.8838 215.3428 -1407.8936 C214.334 -1410.5254 213.6973 -1413.3066 212.832 -1416.0801 C212.5015 -1416.4883 212.1738 -1416.8926 211.8511 -1417.2813 c210.5825 -1418.8086 209.3184 -1420.4697 208.1382 -1422.2217 C206.895 -1422.082 205.5698 -1422.2402 204.2686 -1422.8096 c200.2578 -1424.5635 197.4751 -1427.8789 194.5659 -1431.0156 c191.7983 -1433.999 188.8979 -1436.8594 186.0313 -1439.7539 C178.9805 -1444.0225 173.1475 -1449.7441 167.127 -1455.3096 c165.0605 -1457.2197 162.876 -1459.1055 160.7217 -1461.0449 c155.3154 -1465.7031 150.373 -1470.9219 145.0635 -1475.6865 c141.2803 -1479.082 136.1685 -1482.3125 135.3818 -1487.8018 c135.3164 -1488.2568 135.2925 -1488.7285 135.3057 -1489.2051 C135.1465 -1489.4141 134.9878 -1489.624 134.8384 -1489.8438 c133.7236 -1491.4863 133.6904 -1493.3848 134.3281 -1495.0859 C134.2383 -1497.7842 135.5518 -1500.5898 138.7231 -1501.7881 c154.1621 -1507.6221 170.4165 -1506.7939 186.439 -1509.4229 c189.832 -1509.9805 192.7563 -1511.2939 195.9253 -1512.5713 c199.4312 -1513.9844 202.563 -1514.7051 206.3516 -1515.0508 c209.3398 -1515.3223 212.3477 -1515.1035 215.3384 -1515.3506 c216.2002 -1515.4209 217.0693 -1515.709 217.8999 -1515.9385 C218.519 -1529.9004 222.6885 -1543.2402 225.6382 -1556.8389 c227.1489 -1563.8027 227.6172 -1570.9082 228.6548 -1577.9492 c229.8345 -1585.9521 232.1992 -1594.2744 232.2026 -1602.3789 c232.2065 -1610.6387 231.0371 -1632.9346 242.6948 -1633.9063 c249.2637 -1634.4541 252.3428 -1625.1797 254.1841 -1620.5557 c259.3423 -1607.6035 262.4961 -1593.9307 266.3423 -1580.5605 c267.895 -1575.1641 269.4409 -1569.8174 270.7305 -1564.3467 c272.0293 -1558.8369 272.9648 -1552.8613 275.5601 -1547.8105 c278.0938 -1542.8799 282.3652 -1536.168 282.6255 -1530.0107 C286.4224 -1531.1416 290.2324 -1532.2402 294.0537 -1533.2949 C296.168 -1534.6787 298.5791 -1535.291 301.3262 -1535.4902 C302.7734 -1535.7305 304.3037 -1535.6953 305.7197 -1535.9365 c309.9746 -1536.6621 314.0864 -1536.6816 318.3809 -1536.917 c322.854 -1537.1631 327.3354 -1538.7285 331.731 -1539.5674 c336.3535 -1540.4502 341.0259 -1541.0615 345.6909 -1541.6709 c350.5869 -1542.3105 355.4194 -1543.248 360.3174 -1543.8076 c364.9668 -1544.3379 370.4341 -1542.9561 374.8096 -1545.0215 c378.8535 -1546.9316 383.2109 -1548.1992 387.6758 -1548.5713 c392.332 -1548.96 396.9912 -1549.7168 401.6543 -1549.9473 c408.9297 -1550.3066 410.6055 -1538.582 403.3823 -1537.1797 cf0 D167.6133 -1494.5215 m162.8672 -1494.123 158.1294 -1493.4941 153.4702 -1492.5039 C154.1665 -1492.2461 154.7754 -1492.0244 155.2041 -1491.8564 c158.2402 -1490.667 161.4048 -1489.8047 164.5596 -1488.9287 C165.5513 -1490.2139 166.9082 -1491.1309 168.4614 -1491.3496 C167.9556 -1492.334 167.665 -1493.4316 167.6133 -1494.5215 Cf177.4546 -1487.6797 m177.0181 -1487.7129 176.5815 -1487.7412 176.1455 -1487.7627 C176.75 -1487.3018 177.3433 -1486.8311 177.9287 -1486.3525 C177.7222 -1486.7754 177.5659 -1487.2207 177.4546 -1487.6797 Cf226.7773 -1498.5625 m227.3057 -1497.7041 227.7837 -1496.7979 228.2129 -1495.8682 C228.2227 -1495.9297 228.2358 -1495.9893 228.2451 -1496.0498 c228.396 -1497.0303 228.5386 -1498.0039 228.6831 -1498.9746 C228.0459 -1498.8428 227.4111 -1498.7051 226.7773 -1498.5625 Cf237.7002 -1389.0781 m237.6187 -1389.166 237.5439 -1389.2588 237.4639 -1389.3477 C237.2178 -1388.0371 236.8989 -1386.7402 236.5435 -1385.4512 C237.3809 -1386.3057 238.2305 -1387.1465 239.0898 -1387.9746 C238.5967 -1388.2529 238.1284 -1388.6133 237.7002 -1389.0781 cf240.478 -1519.2363 m240.4692 -1519.1143 240.4531 -1518.9941 240.4453 -1518.8721 c240.4434 -1518.8369 240.4443 -1518.8008 240.4429 -1518.7656 C241.2715 -1518.6387 242.0742 -1518.4258 242.8418 -1518.1416 C242.8638 -1518.6182 242.8828 -1519.0908 242.8999 -1519.5635 C242.1123 -1519.3164 241.2896 -1519.2061 240.478 -1519.2363 Cf250.249 -1409.7588 m251.2759 -1408.3525 252.5303 -1406.9814 253.7397 -1406.3223 C253.9761 -1406.4053 254.3271 -1406.5322 254.7046 -1406.7422 C255.5527 -1408.0371 256.3838 -1409.3477 257.1807 -1410.6924 C256.3057 -1411.9824 255.4644 -1413.293 254.6626 -1414.6309 C254.4282 -1414.1367 254.1797 -1413.6455 253.9004 -1413.1602 c252.9897 -1411.5771 251.6406 -1410.6465 250.1318 -1410.2617 C250.1709 -1410.0947 250.21 -1409.9287 250.249 -1409.7588 Cf250.9165 -1530.8545 m250.0537 -1530.3027 249.0488 -1529.9902 248.0039 -1529.9023 C247.9844 -1529.6846 247.9634 -1529.4678 247.9438 -1529.25 C249.0625 -1529.5029 250.2471 -1529.4697 251.374 -1529.1396 C251.2197 -1529.7109 251.0698 -1530.2832 250.9165 -1530.8545 Cf252.5415 -1581.6719 m252.6436 -1580.3262 252.7456 -1578.9814 252.8452 -1577.6367 C254.4995 -1571.3799 256.0713 -1565.1367 257.4971 -1558.8379 C257.9365 -1558.4541 258.3433 -1558.0176 258.6924 -1557.5117 c258.8193 -1557.3281 258.9365 -1557.1396 259.0615 -1556.9551 C256.8667 -1565.1875 254.7739 -1573.4463 252.5415 -1581.6719 Cf259.8911 -1439.9443 m258.7344 -1443.2656 257.6094 -1446.623 256.4741 -1449.9873 C256.6782 -1447.6797 256.8262 -1445.3691 256.9326 -1443.0557 C258.9658 -1438.1543 261.2432 -1433.4375 263.6738 -1428.791 C264.2578 -1428.3242 264.8228 -1427.8115 265.3716 -1427.2646 C263.4141 -1431.4199 261.334 -1435.8008 259.8911 -1439.9443 cf265.8945 -1398.918 m265.4854 -1398.5566 265.0688 -1398.207 264.646 -1397.8711 C265.4634 -1397.6221 266.291 -1397.3906 267.1274 -1397.1699 C266.709 -1397.748 266.2988 -1398.333 265.8945 -1398.918 Cf272.4604 -1489.2734 m272.4165 -1488.8848 272.374 -1488.4961 272.3271 -1488.1084 C272.4775 -1487.8467 272.627 -1487.5859 272.7739 -1487.3271 C272.6626 -1487.9736 272.562 -1488.624 272.4604 -1489.2734 Cf286.127 -1381.2549 m285.9673 -1381.2324 285.8086 -1381.2129 285.6494 -1381.1943 C286.0786 -1380.7051 286.4702 -1380.1963 286.814 -1379.667 C286.582 -1380.1943 286.354 -1380.7246 286.127 -1381.2549 Cf288.0703 -1376.876 m288.2676 -1376.1162 288.3579 -1375.3184 288.3267 -1374.4785 C288.731 -1374.2598 289.1328 -1374.0352 289.5352 -1373.8115 C289.0366 -1374.8262 288.5459 -1375.8457 288.0703 -1376.876 Cf294.917 -1505.0381 m294.52 -1504.9795 L294.6167 -1504.3809 294.7119 -1503.7871 294.8076 -1503.208 c294.8145 -1503.168 294.8208 -1503.1289 294.8271 -1503.0898 C295.0483 -1503.3877 295.2729 -1503.6855 295.502 -1503.9824 C295.2729 -1504.3174 295.0742 -1504.6699 294.917 -1505.0381 Cf315.1982 -1523.7861 m312.1128 -1523.7012 309.1099 -1523.2441 306.0776 -1522.9033 C306.6582 -1522.0527 307.0645 -1521.0977 307.2705 -1520.1211 C307.417 -1520.1885 307.564 -1520.2578 307.71 -1520.3252 c310.9453 -1521.8115 314.3423 -1522.9531 317.8027 -1523.9092 C316.936 -1523.8535 316.0674 -1523.8105 315.1982 -1523.7861 cf*UUu0 0.411658 0.493629 0 1 0.658824 0.498039 Xa3788.0996 -102.2725 m3787.2813 -95.689 3783.6816 -87.0435 3779.1895 -82.0039 c3776.3945 -78.8687 3774.2959 -75.0542 3771.4775 -71.8755 c3768.4199 -68.4272 3765.0332 -65.2515 3761.7764 -61.9951 c3755.3535 -55.5728 3749.416 -49.5225 3741.5801 -44.8296 c3733.8223 -40.1826 3725.3496 -36.626 3716.8271 -33.6519 c3708.458 -30.7305 3700.4023 -27.0142 3692.0156 -24.1035 c3682.5635 -20.8228 3672.9805 -19.333 3663.1523 -17.7158 c3653.0098 -16.0469 3643.7266 -15.749 3633.5254 -16.8379 c3629.1992 -17.2998 3622.9512 -15.6719 3619.0859 -17.9189 c3615.4824 -20.0142 3612.6484 -22.8472 3610.5547 -26.4507 c3606.334 -33.7134 3617.5703 -40.2549 3621.7793 -33.0122 c3623.748 -29.6245 3624.3164 -30.0317 3627.9453 -30.0317 c3631.71 -30.0317 3635.374 -29.6411 3639.1055 -29.1841 c3647.2803 -28.1841 3655.3633 -29.5264 3663.416 -30.8672 c3678.7988 -33.4282 3692.835 -37.7095 3707.1211 -44.0234 c3719.9473 -49.6919 3734.1807 -52.7832 3744.4688 -63.0713 c3754.1436 -72.7471 3765.9717 -82.3496 3771.9092 -94.9526 c3774.6494 -100.7681 3775.6016 -105.4854 3775.7705 -111.9336 c3775.9766 -119.79 3775.8164 -127.6807 3775.5068 -135.5317 c3774.9082 -150.6729 3772.7168 -165.5771 3767.9756 -179.998 c3766.0576 -185.8315 3762.9775 -190.0903 3757.9023 -193.6211 c3755.5098 -195.2866 3752.873 -196.4146 3750.5996 -198.2637 c3748.1201 -200.2813 3745.9453 -202.6226 3743.2559 -204.3696 c3740.665 -206.0518 3737.6055 -207.1943 3734.7109 -208.2129 c3731.4678 -209.354 3728.4746 -211.3276 3725.293 -212.6621 c3718.2607 -215.6113 3710.8848 -217.7217 3703.5303 -219.6885 c3696.9023 -221.4609 3690.5117 -223.2695 3683.627 -223.4043 c3676.2344 -223.5493 3668.832 -222.9038 3661.4385 -222.8447 c3654.4102 -222.7881 3647.6406 -221.6851 3640.9912 -219.4131 c3634.5771 -217.2222 3627.1328 -214.5938 3621.9844 -210.0342 c3619.5273 -207.8594 3617.54 -205.1284 3615.5791 -202.52 c3613.2969 -199.4829 3610.2734 -196.9146 3607.5889 -194.23 c3603.2461 -189.8877 3598.9697 -183.7959 3597.6357 -177.4146 c3596.3604 -171.3125 3592.7383 -166.3403 3592.3857 -160.04 c3591.9932 -153.0396 3592.5742 -145.4165 3593.2891 -138.4453 c3594.7461 -124.2339 3605.585 -114.5405 3612.2852 -102.7656 c3615.4248 -97.2471 3620.4795 -94.4741 3626.3271 -92.3086 c3629.2158 -91.2388 3631.7637 -89.6606 3634.7363 -88.8105 c3637.9805 -87.8833 3641.4922 -88.1841 3644.8057 -87.4331 c3651.1074 -86.0054 3656.5664 -85.1123 3663.1299 -85.4517 c3671.207 -85.8696 3679.0098 -86.1499 3686.9746 -87.7051 c3693.377 -88.9556 3698.96 -90.4966 3704.46 -94.123 c3710.4863 -98.0967 3717.0693 -101.1611 3723.1016 -105.1958 c3734.0527 -112.5195 3739.8262 -123.4888 3743.4854 -135.9277 c3747.0254 -147.9614 3741.8389 -162.0098 3734.5469 -171.522 c3726.6074 -181.8779 3713.1455 -186.7573 3700.4092 -187.9971 c3693.6455 -188.6553 3686.6172 -188.1416 3679.8262 -188.1416 c3673.4893 -188.1416 3667.7998 -188.2588 3662.0332 -185.269 c3650.7617 -179.4248 3648.3584 -167.5742 3651.0996 -155.9917 c3653.2256 -147.0088 3658.2705 -136.8984 3667.4336 -133.4443 c3670.4346 -132.313 3673.0156 -132.6875 3676.0674 -133.3564 c3679.0635 -134.0127 3682.1641 -133.958 3685.1143 -134.728 c3691.8086 -136.4756 3696.6904 -141.0576 3702.5605 -144.4404 c3705.1182 -145.9146 3706.498 -146.9795 3706.3916 -149.9878 c3706.3145 -152.1777 3704.7324 -154.8848 3703.4238 -156.5532 c3700.2188 -160.6372 3694.8701 -157.7905 3692.4551 -154.1631 c3687.834 -147.2222 3676.5693 -153.7236 3681.2305 -160.7246 c3687.9043 -170.7495 3702.1719 -175.981 3711.7734 -166.6855 c3720.6836 -158.0605 3722.7988 -142.4399 3711.6738 -134.8574 c3709.001 -133.0352 3706.1367 -131.5405 3703.4766 -129.6934 c3700.7129 -127.7744 3698.2188 -125.7534 3695.0557 -124.5015 c3688.5059 -121.9092 3681.8066 -120.9771 3674.8857 -119.9482 c3662.6699 -118.1323 3652.1787 -126.2202 3645.6699 -135.791 c3639.5752 -144.752 3636.3926 -156.769 3637.1582 -167.5234 c3638.1416 -181.3218 3645.5459 -192.002 3658.1445 -197.8013 c3664.0244 -200.5073 3670.0625 -201.1416 3676.46 -201.1416 c3683.8379 -201.1416 3691.2266 -201.2529 3698.6035 -201.1045 c3711.9111 -200.8369 3727.2764 -195.752 3737.5449 -187.2246 c3747.7773 -178.7261 3754.2578 -165.7935 3756.5928 -152.8472 c3759.1289 -138.7891 3754.4355 -126.437 3748.4688 -113.9194 c3742.5225 -101.4482 3730.0791 -93.52 3718.2881 -87.2344 c3712.5176 -84.1582 3707.3789 -80.3931 3701.2695 -77.9155 c3694.5469 -75.1885 3686.5635 -74.1699 3679.4023 -73.3442 c3672.3711 -72.5332 3665.084 -72.375 3658.0029 -72.2773 c3654.6885 -72.2314 3651.1787 -72.5518 3647.915 -73.146 c3644.7295 -73.7256 3641.7354 -75.1362 3638.4854 -75.3081 c3632.0156 -75.6499 3627.2988 -78.1333 3621.3906 -80.3213 c3615.0957 -82.6523 3609.0938 -85.9395 3604.5684 -90.9805 c3600.3818 -95.6445 3597.5898 -101.8374 3593.8223 -106.9082 c3589.5215 -112.6958 3585.8301 -118.6831 3583.2021 -125.4141 c3580.793 -131.5845 3580 -138.4653 3579.9082 -145.0444 c3579.8086 -152.1489 3579.1689 -158.9346 3580.0488 -166.0186 c3580.4463 -169.2153 3581.8965 -172.0254 3583.2363 -174.9238 c3584.5645 -177.7988 3585.0068 -180.8477 3585.8125 -183.8784 c3586.6182 -186.9111 3588.3887 -189.7559 3590.0957 -192.3428 c3592.416 -195.8594 3593.9795 -199.0059 3597.001 -202.0273 c3602.1836 -207.2095 3606.6934 -212.7666 3611.6582 -218.1104 c3616.3535 -223.1631 3623.3438 -226.4771 3629.6396 -229.0601 c3635.917 -231.6357 3642.4297 -233.7441 3649.1445 -234.8115 c3656.541 -235.9868 3664.0029 -235.7813 3671.46 -236.0864 c3678.248 -236.3643 3685.04 -236.7012 3691.8027 -235.8594 c3699.1592 -234.9434 3706.6621 -232.3901 3713.7773 -230.3408 c3720.5215 -228.3984 3727.082 -225.9863 3733.5078 -223.1665 c3739.7568 -220.4238 3746.7881 -217.9707 3752.2949 -213.8735 c3754.5879 -212.1675 3756.623 -210.1812 3758.7617 -208.2939 c3760.7119 -206.5732 3763.4941 -205.5215 3765.6523 -204.0195 c3770.9736 -200.3174 3775.4756 -195.4521 3778.2461 -189.5645 c3784.4395 -176.4077 3786.4863 -160.6738 3787.8125 -146.3481 c3789.1426 -131.9688 3789.8848 -116.6348 3788.0996 -102.2725 cf*u1 D3684.292 -615.5244 m3681.1172 -612.6123 3676.3936 -611.209 3672.2861 -610.2656 c3671.2188 -610.0205 3669.9336 -609.8169 3668.8652 -609.7534 c3672.1973 -609.9521 3668.5781 -608.896 3667.7588 -608.4912 c3665.0313 -607.1416 3662.1045 -606.2178 3659.1816 -605.4038 c3653.3398 -603.7778 3647.3428 -602.708 3641.4531 -601.2695 c3634.6973 -599.6191 3627.6787 -596.9487 3621.1934 -594.4219 c3615.5742 -592.2334 3609.6455 -590.0186 3603.8418 -588.4121 c3597.6465 -586.6973 3591.6152 -583.2363 3585.9414 -580.2466 c3580.1973 -577.2197 3578.5693 -573.1914 3576.9189 -567.2324 c3575.1074 -560.6919 3570.9609 -555.2603 3569.1172 -548.7725 c3567.3877 -542.6836 3564.3789 -536.7676 3562.2979 -530.7686 c3560.0781 -524.3701 3556.3174 -519.0586 3555.7109 -512.0625 c3554.9922 -503.7769 3541.9863 -503.7065 3542.7109 -512.0625 c3542.7422 -512.4238 3542.7881 -512.7842 3542.8262 -513.145 C3542.6641 -513.3311 3542.5078 -513.5303 3542.3584 -513.7417 c3537.7549 -520.2393 3533.4824 -526.9224 3529.8604 -534.0205 c3526.2207 -541.1504 3523.4688 -548.6768 3520.04 -555.8989 c3516.3008 -563.7754 3514.6494 -572.3535 3510.4326 -580.1079 c3508.7227 -583.252 3506.9111 -586.9443 3504.5537 -589.627 c3503.5371 -590.7842 3502.2305 -591.749 3501.4414 -593.0967 c3500.9043 -594.0137 3500.8809 -595.1338 3500.7012 -596.167 C3494.2988 -595.0366 3487.6113 -596.8682 3481.1465 -598.0146 c3471.1035 -599.7949 3460.7773 -600.7559 3450.5869 -601.5933 c3440.6279 -602.4116 3431.498 -604.9702 3421.8633 -607.3911 c3412.7656 -609.6772 3402.5283 -606.4844 3393.7324 -609.9482 c3391.29 -610.9102 3388.5537 -613.1924 3388.96 -616.2163 c3390.1025 -624.7236 3396.7051 -626.8164 3402.1787 -632.0713 c3405.8838 -635.6284 3410.3213 -638.5742 3414.6504 -641.3071 c3418.8613 -643.9644 3422.252 -646.9707 3426.1563 -650.0396 c3430.251 -653.2578 3434.6074 -656.1514 3438.5322 -659.5718 c3442.1709 -662.7422 3445.5049 -666.2432 3449.1563 -669.4019 c3452.7061 -672.4731 3456.8887 -674.9019 3460.959 -677.2124 c3462.502 -678.0884 3464.2227 -678.8174 3465.9297 -679.5708 C3464.2012 -686.7671 3463.5488 -694.0415 3462.0996 -701.2832 c3460.6328 -708.6201 3459.5908 -715.9883 3458.2168 -723.334 c3455.541 -737.6323 3452.9951 -751.9243 3450.9209 -766.2354 c3450.7412 -767.4712 3449.8164 -768.5342 3449.7168 -769.9673 c3449.627 -771.2588 3449.3145 -772.4902 3449.0303 -773.75 c3448.4375 -776.3848 3448.166 -779.1235 3449.6299 -781.5557 c3452.2715 -785.9482 3456.9365 -787.0581 3461.6836 -785.6401 c3465.8223 -784.4038 3469.5762 -781.5327 3472.7607 -778.7134 c3478.3389 -773.7744 3484.6133 -769.5996 3490.6953 -765.3135 c3501.9531 -757.3794 3514.6807 -750.834 3523.8193 -740.2925 c3525.3311 -738.5493 3527.6748 -734.6758 3528.8086 -733.8501 c3531.2793 -732.0522 3533.4326 -729.875 3535.7041 -727.8428 c3539.8545 -724.1309 3545.7363 -728.5083 3550.1035 -730.0391 c3563.6719 -734.7949 3577.4199 -739.9775 3590.5244 -745.9082 c3604.7148 -752.3301 3619.8047 -755.7002 3634.2773 -761.3555 c3637.5957 -762.6523 3641.3896 -759.958 3642.2734 -756.8159 c3644.1934 -749.9912 3639.457 -745.1279 3637.1133 -739.2041 c3634.4766 -732.5405 3632.4824 -725.5679 3630.9277 -718.5825 c3630.1992 -715.3047 3629.334 -712.1099 3628.0918 -708.9873 c3626.5039 -704.998 3626.0039 -700.5303 3625.1621 -696.3232 c3623.9795 -690.4092 3622.623 -684.231 3621.8359 -678.1685 C3624.6533 -675.4375 3627.2686 -672.5454 3630.207 -669.8774 c3634.8701 -665.6445 3640.7363 -662.4854 3645.9121 -658.8911 c3656.0742 -651.833 3665.9453 -644.3887 3675.9287 -637.1016 c3682.0244 -632.6523 3692.4648 -623.022 3684.292 -615.5244 cf0 D3667.2119 -627.3765 m3656.6563 -634.3008 3646.7559 -642.5254 3636.3525 -649.7476 c3631.1729 -653.3433 3625.793 -656.5459 3621.0156 -660.6851 c3618.2422 -663.0869 3615.8379 -665.7739 3613.2871 -668.3335 C3610.5938 -668.7295 3608.3086 -670.6338 3608.4102 -674.0566 C3608.0488 -675.3579 3608.2285 -676.6855 3608.7891 -677.876 C3609.3535 -682.7085 3610.2031 -687.6563 3611.1396 -692.3398 c3612.7158 -700.2241 3614.0986 -707.9668 3616.7041 -715.5415 c3619.1113 -722.541 3620.4277 -729.9551 3622.7129 -737.0195 c3623.5352 -739.5576 3624.3301 -742.0908 3625.3477 -744.5542 C3615.8135 -741.5659 3606.1768 -738.9087 3597.0859 -734.6831 c3584.3643 -728.7695 3571.0059 -724.3613 3557.9844 -719.1807 c3547.7881 -715.124 3537.3516 -709.6777 3527.6279 -717.7266 c3523.1289 -721.4507 3519.3193 -725.2544 3515.6982 -729.8042 c3511.3467 -735.2734 3505.9551 -739.3657 3500.2734 -743.3555 c3489.0996 -751.2012 3477.5713 -758.3599 3466.8115 -766.8193 c3465.6963 -767.6958 3464.5977 -768.6953 3463.4629 -769.6611 C3463.8965 -768.3149 3463.877 -766.6436 3463.9463 -765.2456 c3464.0791 -762.5244 3465.2266 -759.7207 3465.7461 -757.0435 c3466.4326 -753.5127 3466.3906 -749.9048 3466.9131 -746.3521 c3467.9658 -739.1797 3469.7539 -732.126 3471.0859 -725.0039 c3472.3486 -718.2568 3473.2871 -711.4785 3474.6348 -704.7393 c3476.127 -697.2822 3476.7656 -689.811 3478.6035 -682.4204 c3478.6182 -682.3604 3478.625 -682.3027 3478.6387 -682.2432 C3481.3398 -679.6069 3482.0957 -674.3354 3478.0957 -671.3604 c3475.8447 -669.6851 3472.9023 -669.312 3470.6563 -667.6406 c3467.2871 -665.1323 3463.0449 -663.3696 3459.499 -661.0273 c3456.041 -658.7446 3453.1436 -655.4375 3450.1475 -652.5996 c3446.4014 -649.0527 3442.3604 -645.9639 3438.1328 -643.019 c3434.7881 -640.6885 3431.79 -638.1099 3428.9814 -635.2759 c3426.0449 -632.312 3421.8594 -630.5659 3418.4248 -628.2705 c3415.5195 -626.3286 3412.9316 -623.5229 3410.0625 -621.4746 C3414.0469 -621.4619 3417.9023 -621.3677 3421.8799 -620.6729 c3431.0322 -619.0732 3439.5459 -615.6265 3448.8691 -614.7432 c3453.5176 -614.3027 3458.1797 -614.0122 3462.8262 -613.5439 c3467.2734 -613.0957 3471.9043 -611.626 3476.3379 -611.521 c3480.7617 -611.417 3485.2461 -610.5029 3489.5576 -609.5791 c3492.623 -608.9229 3497.1543 -607.8574 3500.0527 -609.4297 c3502.7324 -610.8833 3505.3018 -610.3198 3507.1367 -608.8271 C3507.8477 -608.4727 3508.5352 -607.936 3509.1699 -607.1733 c3511.209 -604.7207 3512.4199 -602.29 3513.0713 -599.4492 C3517.2969 -594.7461 3520.4336 -589.209 3523.2861 -583.5635 c3526.9795 -576.2544 3528.5713 -568.1338 3532.0488 -560.8091 c3535.2207 -554.1289 3537.8389 -547.2314 3541.085 -540.5815 c3542.9443 -536.7729 3545.0781 -533.1001 3547.3555 -529.5171 C3550.1182 -535.4307 3552.3281 -541.4707 3554.7227 -547.5591 c3556.959 -553.2485 3558.9072 -558.855 3561.7979 -564.27 c3564.5908 -569.5029 3565.4209 -575.4497 3567.9395 -580.8267 c3570.3389 -585.9502 3575.7188 -589.542 3580.5703 -592.0986 c3585.9277 -594.9219 3591.4717 -597.519 3597.0801 -599.7979 c3608.6816 -604.5127 3620.9766 -608.2563 3632.9248 -612.0024 c3638.9307 -613.8848 3644.8652 -615.375 3651.0117 -616.7808 c3653.6016 -617.373 3656.1689 -618.0327 3658.709 -618.8105 c3661.4883 -619.6606 3663.7793 -621.731 3666.5156 -622.4844 c3668.1221 -622.9258 3668.8291 -622.7656 3670.9238 -623.3203 c3671.335 -623.4292 3671.7383 -623.5635 3672.1416 -623.6953 C3670.6104 -625.1362 3668.7402 -626.3735 3667.2119 -627.3765 cf3674.3252 -624.4629 m3676.585 -625.3164 3675.1299 -625.624 3674.3252 -624.4629 C3674.3252 -624.4629 Lf*U*u1 D3432.4492 -1825.9248 m3427.082 -1822.667 3421.042 -1822.7236 3415 -1823.7451 c3408.3232 -1824.875 3401.5869 -1825.6855 3394.8066 -1826.0469 c3387.5039 -1826.4375 3380.8369 -1829.2744 3374.084 -1831.8848 c3368.1172 -1834.1914 3362.3408 -1836.2002 3357.1865 -1840.1035 c3347.2412 -1847.6367 3339.7549 -1857.0605 3335.0156 -1868.582 c3334.9775 -1868.6748 3334.9453 -1868.7686 3334.9072 -1868.8613 C3334.2959 -1866.7148 3333.6172 -1864.5859 3332.9131 -1862.4727 c3331.167 -1857.2334 3329.2031 -1852.1543 3325.6621 -1847.8242 c3324.2549 -1846.1045 3323.749 -1843.5254 3322.6436 -1841.5918 c3321.2861 -1839.2168 3318.9219 -1837.6543 3316.751 -1836.1143 c3312.7168 -1833.251 3310.8057 -1829.043 3307.2285 -1825.7607 c3302.9238 -1821.8105 3297.2783 -1819.5869 3292.1074 -1817.0508 c3286.8906 -1814.4922 3279.6865 -1813.8545 3273.9482 -1813.6826 c3268.6035 -1813.5225 3263.3477 -1815.2734 3259.1943 -1818.6025 c3250.7354 -1825.3828 3249.5908 -1838.4385 3251.0996 -1848.3955 c3252.8867 -1860.1836 3260.8193 -1867.2568 3268.8828 -1875.0869 c3273.0625 -1879.1465 3277.3545 -1882.9492 3282.4834 -1885.7246 c3287.7236 -1888.5615 3292.3545 -1892.3916 3297.6973 -1895.0234 c3299.874 -1896.0947 3302.0537 -1897.1396 3304.2334 -1898.1846 C3301.5918 -1898.8096 3298.9561 -1899.5928 3296.1631 -1900.4746 c3283.0449 -1904.6143 3272.0918 -1913.0527 3259.9219 -1919.1367 c3253.5742 -1922.3105 3247.4355 -1925.5625 3241.3721 -1929.2432 c3235.291 -1932.9346 3230.1475 -1936.9854 3224.7725 -1941.6914 c3219.7129 -1946.1211 3217.2002 -1950.2354 3215.0186 -1956.5352 c3212.8027 -1962.9316 3214.3145 -1971.1514 3218.8027 -1976.2158 c3228.6367 -1987.3096 3240.8525 -1987.5869 3254.7295 -1988.8457 c3269.2813 -1990.165 3283.5488 -1986.292 3295.7188 -1978.2881 c3307.2949 -1970.6758 3316.2324 -1959.2715 3323.7578 -1947.8301 c3325.8604 -1944.6328 3327.9102 -1941.3604 3329.8408 -1938.0137 C3330.3184 -1939.4766 3330.8096 -1940.9297 3331.3027 -1942.3682 c3335.458 -1954.4854 3341.3682 -1966.1426 3347.1943 -1977.5293 c3352.8311 -1988.5439 3362.2051 -1997.8457 3375.126 -1998.8896 c3386.5801 -1999.8154 3397.4941 -1999.3594 3405.7998 -1990.333 c3412.5586 -1982.9854 3414.8291 -1971.6973 3411.6475 -1962.291 c3410.6582 -1959.3662 3409.4756 -1956.791 3407.457 -1954.4209 c3405.7188 -1952.3789 3402.8438 -1950.5889 3401.6064 -1948.2227 c3398.4844 -1942.252 3393.793 -1936.9219 3388.9854 -1932.2637 c3383.9365 -1927.373 3378.1064 -1923.6543 3373.3018 -1918.5195 c3368.5957 -1913.4893 3362.8525 -1909.3301 3357.1455 -1905.5361 c3354.6553 -1903.8799 3352.0137 -1902.0205 3349.6094 -1899.96 C3352.3643 -1899.4561 3355.0713 -1898.7734 3357.583 -1897.8301 c3363.79 -1895.498 3368.6729 -1891.2393 3375.1885 -1889.8105 c3387.4609 -1887.1211 3399.9336 -1883.7773 3411.4365 -1878.6641 c3422.375 -1873.8018 3431.5322 -1865.3721 3438.5078 -1855.791 c3444.835 -1847.1006 3441.7627 -1831.5791 3432.4492 -1825.9248 cf0 D3302.7715 -1883.0654 m3298.4736 -1880.9482 3294.6279 -1877.7734 3290.5 -1875.3262 c3282.4326 -1870.5449 3275.1152 -1863.8975 3268.7256 -1856.9736 c3262.7139 -1850.459 3262.4043 -1839.8906 3265.1904 -1832.0059 c3268.2676 -1823.2979 3282.2705 -1826.7227 3288.3525 -1829.6357 c3292.084 -1831.4229 3296.0332 -1833.1143 3299.1094 -1835.9375 c3300.4512 -1837.1689 3301.3184 -1839.0322 3302.4141 -1840.4785 c3303.9248 -1842.4756 3305.8076 -1843.9248 3307.7441 -1845.4902 c3308.9648 -1846.4775 3310.3281 -1847.3086 3311.5098 -1848.3379 c3312.6689 -1849.3477 3313.2178 -1851.9736 3313.8193 -1853.3301 c3314.5762 -1855.0391 3315.9375 -1856.6494 3316.9414 -1858.2402 c3318.5117 -1860.7324 3319.4434 -1863.126 3320.377 -1865.9277 c3322.2129 -1871.4375 3323.9365 -1876.9805 3324.4287 -1882.7988 c3324.7246 -1886.293 3324.0215 -1889.7939 3323.5732 -1893.291 C3323.3926 -1893.2695 3323.2129 -1893.2393 3323.0313 -1893.2217 C3321.7197 -1893.1641 3321.627 -1893.0674 3322.752 -1892.9316 C3320.2109 -1891.3467 3317.3984 -1890.1748 3314.7813 -1888.7207 c3310.8955 -1886.5625 3306.7598 -1885.0293 3302.7715 -1883.0654 cf3316.9658 -1934.209 m3310.8281 -1944.3096 3304.1807 -1953.9082 3295.3906 -1961.8984 c3286.6094 -1969.8789 3275.959 -1975.168 3264.0166 -1976.0098 c3257.8008 -1976.4482 3251.6133 -1975.4639 3245.4297 -1975.002 c3240.3887 -1974.626 3235.1367 -1973.8809 3231.1455 -1970.4648 c3212.1641 -1954.2217 3261.8027 -1933.2002 3271.1777 -1927.9277 c3281.0703 -1922.3652 3290.3457 -1915.9365 3301.2686 -1912.4893 c3306.0879 -1910.9678 3311.749 -1908.4785 3316.9717 -1909.8916 c3319.9131 -1910.6875 3322.7188 -1911.5723 3325.5723 -1912.2725 C3325.5615 -1913.8223 3325.5713 -1915.5195 3325.6211 -1917.1992 C3323.3145 -1923.1592 3320.2148 -1928.8633 3316.9658 -1934.209 cf3360.3311 -1924.1279 m3362.4844 -1925.9902 3364.4639 -1928.0234 3366.3262 -1930.1738 c3368.2891 -1932.4375 3370.8047 -1934.0391 3373.1787 -1935.876 c3377.374 -1939.123 3381.207 -1942.6592 3384.7266 -1946.6299 c3388.3535 -1950.7227 3390.334 -1955.8271 3394.3164 -1959.5635 c3400.6377 -1965.4922 3401.8369 -1973.0303 3397.0908 -1980.4902 c3392.6162 -1987.5225 3382.5029 -1986.9014 3375.3662 -1985.8965 c3364.7842 -1984.4063 3359.9453 -1974.2773 3355.835 -1965.6924 c3351.3428 -1956.3105 3346.6504 -1947.0488 3343.2676 -1937.1797 c3341.5713 -1932.2344 3340.084 -1927.1719 3338.9707 -1922.0645 c3338.7852 -1921.2129 3338.6699 -1920.3281 3338.582 -1919.4307 C3339.6846 -1916.2939 3340.5957 -1913.0938 3341.2822 -1909.8301 C3343.0166 -1911.1777 3344.8281 -1912.4424 3346.4688 -1913.7148 c3351.0615 -1917.2783 3355.9199 -1920.3135 3360.3311 -1924.1279 cf3423.5859 -1853.7793 m3416.8086 -1861.2061 3408.2715 -1866.6875 3398.6934 -1869.7119 c3389.1836 -1872.7129 3379.7939 -1875.5078 3370.0352 -1877.6475 c3364.4619 -1878.8691 3360.377 -1882.042 3355.3848 -1884.668 c3351.9492 -1886.4756 3347.6445 -1887.3457 3343.5547 -1887.7773 C3344.1152 -1883.8711 3344.918 -1879.9961 3346.0869 -1876.1572 c3348.9736 -1866.6748 3354.6729 -1860.1191 3361.5957 -1853.3477 c3368.9102 -1846.1934 3380.0029 -1843.0176 3389.5586 -1840.0586 c3394.4492 -1838.5449 3399.9414 -1838.6172 3405.0283 -1838.1094 c3410.5781 -1837.5566 3416.166 -1836.2803 3421.7275 -1836.0889 c3426.3623 -1835.9297 3427.5205 -1839.127 3428.5576 -1842.9912 c3429.7598 -1847.4688 3426.4316 -1850.6602 3423.5859 -1853.7793 cf*U208.3979 -783.7026 m207.3989 -776.1997 206.3647 -768.7368 204.4268 -761.4189 c200.9282 -748.2114 194.4326 -736.1704 187.2827 -724.5928 c185.4717 -721.6602 183.4683 -719.2168 180.9204 -716.897 c178.3862 -714.5898 176.2412 -711.8672 173.772 -709.5737 c168.6895 -704.853 162.1826 -702.4307 155.4609 -701.042 c150.9858 -700.1177 146.3906 -699.9819 141.9717 -698.7686 c136.9136 -697.3789 132.3286 -695.5493 127.0181 -695.2705 c118.6367 -694.8306 118.6792 -707.833 127.0181 -708.2705 c130.4287 -708.4492 133.6455 -709.7261 136.8628 -710.7886 c140.1689 -711.8804 143.5308 -712.3433 146.9692 -712.8037 c153.6948 -713.7041 160.9531 -714.7861 165.5649 -720.1079 c167.8608 -722.7563 170.52 -724.9893 173.106 -727.3438 c175.5015 -729.5244 177.019 -732.6841 178.6328 -735.4561 c182.168 -741.5288 185.9019 -747.6152 188.4014 -754.2041 c193.4893 -767.6162 195.0176 -781.772 197.3032 -795.873 c199.7344 -810.8706 200.8311 -825.9824 194.3115 -840.1084 c188.5259 -852.6455 179.6157 -862.0591 168.1265 -869.4673 c162.3589 -873.186 155.8584 -875.3374 149.3286 -877.2749 c141.9219 -879.4727 134.1304 -881.1846 126.3979 -881.2832 c118.6758 -881.3813 111.5645 -882.1714 103.9478 -880.5732 c96.7568 -879.064 90.8193 -877.3643 84.3159 -874.0142 c72.813 -868.0879 63.8218 -858.2876 57.7476 -846.9844 c51.7417 -835.8091 53.5449 -822.8062 56.3467 -810.9087 c57.8867 -804.3682 59.7886 -797.21 62.4121 -791.0195 c65.2944 -784.2188 69.5308 -778.1235 72.4004 -771.3467 c77.5376 -759.2153 86.521 -748.0894 99.7485 -744.7427 c106.4355 -743.0508 113.771 -745.1436 120.3306 -746.4756 c122.8296 -746.9834 125.3994 -747.6655 127.8296 -748.4399 c130.5845 -749.3184 133.4585 -752.8979 135.6616 -754.7168 c140.8975 -759.04 144.8022 -765.1494 148.9116 -770.5322 c153.6221 -776.7031 156.8604 -782.8535 158.5679 -790.4482 c160.0322 -796.9604 158.9541 -803.6309 157.5313 -810.0449 c156.0869 -816.5576 151.6934 -821.8428 146.3467 -825.7109 c144.0405 -827.3794 141.1338 -826.7026 138.2749 -826.7026 c134.8486 -826.7026 131.4243 -826.6978 127.9995 -826.5898 c121.1265 -826.3726 114.2324 -825.3018 108.1885 -821.8984 c98.5093 -816.4478 90.7393 -805.3135 93.1108 -793.9072 c94.7891 -785.8384 100.5571 -778.0542 108.6333 -775.6719 c113.667 -774.187 119.1924 -776.2305 124.0503 -777.4746 c126.2783 -778.0449 128.519 -778.5107 130.7603 -779.0303 c133.3271 -779.626 135.2466 -781.7793 137.0337 -783.603 c142.4009 -789.0806 142.9927 -799.001 139.5391 -805.5889 c138.166 -808.208 135.6587 -809.9395 132.7451 -809.3809 c131.1045 -809.0659 129.7886 -808.3472 128.4063 -807.4478 c127.145 -806.6274 127.2026 -806.4365 127.6714 -805.4854 c131.3608 -797.9937 120.1504 -791.4033 116.4458 -798.9238 c111.1309 -809.7163 118.6255 -819.1406 129.2896 -821.9165 c140.8672 -824.9302 149.9775 -816.3774 153.3267 -806.0371 c156.8452 -795.1729 153.5835 -782.7998 146.2261 -774.4106 c142.2754 -769.9063 137.3047 -767.0894 131.5015 -765.9028 c124.5693 -764.4858 117.9829 -762.0356 110.7964 -762.2705 c98.9688 -762.6572 89.1855 -771.4092 83.9321 -781.4272 c78.1675 -792.4199 78.5488 -804.5977 84.2466 -815.4863 c89.8335 -826.1646 100.7231 -834.3901 112.2524 -837.4849 c119.0693 -839.3145 126.2686 -839.6279 133.2861 -839.6953 c136.585 -839.7271 139.8848 -839.7026 143.1831 -839.7026 c147.9893 -839.7026 150.3872 -838.7598 154.2568 -835.96 c159.1543 -832.417 163.9233 -827.4648 166.8994 -822.1777 c170.2441 -816.2363 171.186 -808.8662 171.9556 -802.2046 c173.6514 -787.5215 167.8184 -774.0342 159.0947 -762.6064 c155.0215 -757.2705 151.1904 -751.1543 146.2026 -746.6748 c141.2827 -742.2563 136.3843 -737.5298 129.9858 -735.4902 c117.4414 -731.4922 102.6074 -729.0664 90.1426 -734.2588 c77.6426 -739.4653 68.4028 -750.0186 62.4702 -761.9585 c59.5459 -767.8447 56.6147 -773.645 53.6226 -779.5122 c50.0781 -786.4624 48.4805 -793.6113 45.7598 -800.811 c41.2837 -812.6567 39.5601 -827.0625 41.395 -839.6191 c43.1914 -851.9111 51.9727 -863.7529 60.4707 -872.3843 c80.9751 -893.21 111.3125 -898.1274 139.1958 -893.0044 c153.3306 -890.4077 166.7256 -885.8584 178.8398 -878.0742 c190.0801 -870.8521 198.8096 -859.8975 204.8413 -848.1006 c211.7593 -834.5698 213.1333 -820.2739 211.6162 -805.3042 c210.8809 -798.0483 209.3589 -790.9209 208.3979 -783.7026 cfUu*u1 D0.300267 0.756374 0 0 0.941176 0.247059 1 Xa3485.6582 -973.7793 m3485.5547 -966.3604 3484.9473 -958.998 3483.7305 -951.6777 c3482.793 -946.0449 3479.6533 -940.0146 3477.4521 -934.729 c3472.9844 -924.0049 3466.4385 -915.8237 3455.0957 -912.0977 c3442.0889 -907.8252 3427.2539 -915.3247 3416.042 -921.1738 c3410.9131 -923.8496 3406.0059 -926.6797 3401.123 -929.7837 c3395.832 -933.1475 3392.1133 -937.1963 3387.71 -941.4819 c3379.8262 -949.1558 3370.7012 -955.2334 3367.9912 -966.6182 c3367.7568 -967.6035 3367.7373 -968.5181 3367.8818 -969.354 C3363.9551 -962.6392 3356.1592 -958.2246 3350.9463 -952.4277 c3347.041 -948.085 3342.9863 -943.7603 3337.4219 -941.5996 c3330.8604 -939.0513 3322.8018 -938.6563 3315.8525 -937.7412 c3302.7168 -936.0112 3289.6182 -936.0449 3277.457 -941.8628 c3265.1611 -947.7451 3259.75 -960.1338 3258.7617 -973.0884 c3258.2715 -979.5269 3258.5039 -986.1772 3258.9336 -992.6113 c3259.458 -1000.4556 3261.7031 -1007.3169 3264.0313 -1014.7285 c3266.0137 -1021.0396 3267.835 -1027.3828 3270.4707 -1033.4644 c3273.4199 -1040.271 3277.7012 -1046.2656 3281.8096 -1052.4111 c3285.4512 -1057.8594 3289.3135 -1063.1465 3293.4746 -1068.2114 c3298.0898 -1073.8291 3303.6797 -1078.0474 3308.7891 -1083.1436 c3318.5547 -1092.8838 3330.2578 -1099.7588 3340.8965 -1108.3721 c3345.1455 -1111.8115 3349.3711 -1115.3232 3353.96 -1118.2881 C3353.957 -1118.292 3353.9551 -1118.2949 3353.9521 -1118.2988 c3349.0293 -1125.1055 3360.3145 -1131.584 3365.1768 -1124.8594 c3368.6631 -1120.0391 3374.7783 -1117.7314 3379.6387 -1114.5967 c3382.5469 -1112.7207 3384.6152 -1108.8887 3386.8574 -1106.2598 c3389.4873 -1103.1768 3392.2959 -1100.2471 3395.1221 -1097.3457 c3399.7852 -1092.5596 3404.8945 -1088.376 3409.29 -1083.3184 c3414.1992 -1077.668 3419.1523 -1072.9253 3425.1182 -1068.394 c3436.2266 -1059.957 3446.2305 -1050.5713 3456 -1040.6421 c3464.5137 -1031.9897 3472.6016 -1022.6719 3478.3242 -1011.9009 c3484.7725 -999.7622 3485.8486 -987.2813 3485.6582 -973.7793 cf0 D3279.3584 -974.5049 m3276.623 -974.1289 3273.8633 -974.8887 3271.6387 -976.7456 C3271.7441 -971.9648 3272.2256 -967.2798 3274.1328 -962.7837 c3275.7197 -959.042 3278.3926 -956.3208 3281.623 -954.3442 C3277.0283 -960.5957 3275.5488 -969.6265 3282.1357 -974.8472 C3281.2588 -974.5356 3280.3066 -974.4292 3279.3584 -974.5049 Cf3290.3711 -1007.7808 m3290.4531 -1007.1563 3290.5391 -1006.5322 3290.6279 -1005.9077 C3290.918 -1005.7783 3291.2041 -1005.6309 3291.4766 -1005.4434 c3291.707 -1005.2847 3291.9219 -1005.1191 3292.1328 -1004.9521 C3292.1387 -1005.3745 3292.1436 -1005.7969 3292.1484 -1006.2153 c3292.1563 -1006.8384 3292.1807 -1007.457 3292.2197 -1008.0713 C3291.5977 -1008.0151 3290.9805 -1007.9185 3290.3711 -1007.7808 Cf3351.3438 -970.0654 m3354.0527 -972.0654 3357.0771 -974.5654 3357.2627 -976.7422 c3357.9697 -985.0303 3370.9756 -985.0996 3370.2627 -976.7422 c3370.125 -975.1309 3369.7725 -973.6465 3369.2578 -972.2568 C3371.0537 -974.3442 3374.1631 -975.2285 3376.7012 -974.415 C3375.4961 -976.1758 3374.5049 -977.9951 3374.1973 -979.7241 c3374.0254 -980.6875 3371.7451 -983.6934 3371.0391 -985.2402 c3370.7266 -985.9243 3370.459 -986.623 3370.2285 -987.3281 C3365.9775 -984.8755 3361.2988 -983.3467 3356.6621 -981.7471 C3356.3496 -981.2339 3356.0234 -980.7271 3355.6865 -980.2246 C3355.6465 -979.7637 3355.6123 -979.3022 3355.5693 -978.8413 c3355.3232 -976.2207 3353.7051 -974.0508 3351.6201 -972.9971 C3351.5225 -972.8662 3351.4287 -972.7334 3351.3262 -972.605 C3351.3389 -971.8848 3351.3672 -971.1655 3351.3711 -970.4453 c3351.3721 -970.3149 3351.3496 -970.1934 3351.3438 -970.0654 Cf3363.8223 -1073.8311 m3361.3887 -1075.9639 3359.2373 -1078.624 3357.5039 -1081.4844 C3357.0156 -1081.1523 3356.5273 -1080.8203 3356.041 -1080.4854 C3356.3691 -1079.8057 3356.6611 -1079.0903 3356.9238 -1078.2993 c3357.0449 -1077.9346 3357.1309 -1077.5635 3357.2021 -1077.1895 C3359.9219 -1070.5093 3361.9775 -1063.5664 3363.9033 -1056.5791 C3364.4766 -1055.3643 3365.0557 -1054.1533 3365.6729 -1052.9644 c3367.207 -1050.0083 3368.6201 -1046.9683 3370.0869 -1043.9644 C3370.5488 -1043.2905 3371.0176 -1042.6318 3371.4746 -1041.9458 c3371.6211 -1041.7266 3371.7646 -1041.5068 3371.9102 -1041.2871 C3371.8369 -1041.6504 3371.7637 -1042.0127 3371.6914 -1042.376 c3371.3291 -1044.0835 3370.9609 -1045.7749 3370.6152 -1047.4326 c3369.7412 -1051.6221 3368.6426 -1055.7505 3367.3398 -1059.814 C3366.1484 -1063.0767 3364.8457 -1066.3145 3363.793 -1069.4727 c3363.2256 -1071.1753 3363.3125 -1072.6406 3363.8223 -1073.8311 Cf3355.9678 -1022.4438 m3355.9814 -1022.0117 3355.9951 -1021.5791 3356.0078 -1021.147 C3356.6543 -1021.0918 3357.2793 -1020.9263 3357.8613 -1020.6499 C3357.5957 -1020.9116 3357.334 -1021.1753 3357.0684 -1021.4355 c3356.7217 -1021.7744 3356.3516 -1022.1099 3355.9678 -1022.4438 Cf3361.6348 -1012.7979 m3360.8252 -1009.9541 3359.6973 -1007.269 3358.3555 -1004.6733 C3360.7822 -1005.4678 3363.2793 -1006.2051 3365.8086 -1006.9131 C3364.7529 -1009.8696 3363.7197 -1012.8345 3362.7168 -1015.8096 C3362.1514 -1016.3726 3361.585 -1016.9346 3361.0215 -1017.4995 C3361.7832 -1016.0405 3362.0762 -1014.3481 3361.6348 -1012.7979 cf3328.1953 -952.6851 m3331.7441 -953.4453 3335.0264 -954.6733 3337.9131 -957.4614 c3340.1045 -959.5781 3342.0605 -961.8618 3344.1543 -964.0288 C3343.0635 -964.124 3341.9863 -964.4863 3341.0332 -965.1924 C3339.9229 -964.6343 3338.8496 -964.1245 3337.875 -963.6611 c3337.6328 -963.5459 3337.3857 -963.4287 3337.1387 -963.3115 C3334.5264 -961.8291 3331.7656 -960.7104 3329.0947 -959.4688 C3328.6152 -958.6929 3328.0479 -957.9937 3327.3789 -957.3936 C3328.1191 -955.9941 3328.3672 -954.3013 3328.1953 -952.6851 Cf3320.2324 -1054.6592 m3320.6436 -1056.4854 3321.1943 -1058.2705 3321.8613 -1060.0146 C3321.5273 -1059.749 3321.1934 -1059.4492 3320.8613 -1059.1279 C3320.4951 -1057.6113 3320.0586 -1056.1152 3319.5801 -1054.625 C3319.7969 -1054.6484 3320.0146 -1054.6587 3320.2324 -1054.6592 Cf3304.8828 -976.9512 m3304.668 -976.6152 3304.4541 -976.2788 3304.2266 -975.9492 c3304.1816 -975.8838 3304.1338 -975.8247 3304.0879 -975.7607 C3304.4268 -975.6387 3304.7637 -975.5137 3305.0967 -975.3872 C3305.0352 -975.9121 3304.9668 -976.4341 3304.8828 -976.9512 Cf3311.2998 -958.3135 m3309.8838 -958.8955 3308.4512 -959.48 3307.084 -960.126 C3307.1865 -958.4238 3307.0449 -956.6855 3306.6455 -954.9956 c3306.5039 -954.3965 3306.3262 -953.8394 3306.124 -953.3115 C3308.7461 -953.1445 3311.457 -953.8374 3313.2119 -954.3232 C3313.2148 -954.3242 3313.2168 -954.3247 3313.2188 -954.3257 C3312.3457 -955.4761 3311.6572 -956.73 3311.3154 -958.2217 c3311.3086 -958.2515 3311.3066 -958.2837 3311.2998 -958.3135 Cf3313.0693 -1028.8945 m3312.6777 -1027.7861 3312.4434 -1026.5332 3312.2061 -1025.3936 c3312.2031 -1025.377 3312.2002 -1025.3599 3312.1963 -1025.3428 C3312.9014 -1022.3691 3313.4082 -1019.3198 3313.8975 -1016.2744 C3314.6416 -1019.3428 3315.3955 -1022.4077 3316.1543 -1025.4717 C3315.2246 -1026.7622 3314.2031 -1027.9316 3313.0693 -1028.8945 Cf3378.8457 -1095.7168 m3376.7891 -1098.0156 3374.8457 -1100.4121 3372.9414 -1102.8379 c3371.2686 -1104.9697 3368.7646 -1106.0059 3366.4258 -1107.3535 c3365.502 -1107.8857 3364.6191 -1108.4434 3363.7559 -1109.0146 C3353.7344 -1103.4521 3345.0781 -1095.1582 3335.6357 -1088.6787 c3330.6563 -1085.2617 3325.8701 -1081.3291 3321.3965 -1077.2837 c3319.9766 -1075.9995 3318.5186 -1074.7095 3317.0557 -1073.4106 C3317.4951 -1073.3105 3317.9199 -1073.1523 3318.3262 -1072.9414 C3320.3613 -1073.8057 3322.5605 -1074.3047 3324.9424 -1074.269 c3326.7031 -1074.2427 3328.2588 -1073.9238 3329.6426 -1073.3794 C3334.96 -1080.1533 3341.6934 -1086.0342 3348.2461 -1090.9141 c3349.7354 -1092.0234 3351.3545 -1093.3203 3353.0605 -1094.5801 C3353.0527 -1097.1738 3355.2598 -1100.1045 3357.8359 -1100.5586 c3360.4355 -1101.0176 3362.9443 -1100.7461 3365.3516 -1099.9463 C3367.4229 -1099.9131 3369.4922 -1099.2393 3371.5078 -1097.627 c3373.1035 -1096.3506 3374.4492 -1094.877 3375.584 -1093.2637 C3375.7539 -1093.1016 3375.9209 -1092.9355 3376.0879 -1092.7695 C3377.8477 -1093.2813 3379.5547 -1093.377 3381.209 -1093.165 C3380.4121 -1094.0039 3379.6211 -1094.8496 3378.8457 -1095.7168 cf3381.2402 -968.4766 m3381.1152 -968.645 3380.9844 -968.8184 3380.8496 -968.9937 C3382.3066 -964.2578 3385.5313 -960.8574 3389.1797 -957.4966 c3389.6377 -957.0742 3390.082 -956.645 3390.5332 -956.2197 C3389.6777 -957.5522 3388.8496 -958.8599 3388.041 -960.1045 c3386.1465 -963.0205 3383.333 -965.646 3381.2402 -968.4766 cf3392.4785 -1026.9102 m3390.1953 -1031.1943 3388.1094 -1035.5801 3385.5791 -1039.7217 C3387.5039 -1032.0024 3390.2012 -1024.479 3391.7119 -1016.7324 c3391.9941 -1015.2842 3392.3223 -1013.8467 3392.6699 -1012.4136 C3393.2256 -1012.2051 3393.7803 -1011.9863 3394.332 -1011.7422 c3394.499 -1011.668 3394.6406 -1011.5703 3394.7939 -1011.4829 C3394.3809 -1016.6729 3393.5078 -1021.7715 3392.4785 -1026.9102 Cf3416.2344 -935.7212 m3415.9863 -936.0654 3415.7402 -936.4102 3415.498 -936.7568 C3415.1543 -936.6865 3414.8027 -936.6558 3414.4492 -936.6567 C3415.0518 -936.3335 3415.6455 -936.0229 3416.2344 -935.7212 Cf3399.6758 -1062.2529 m3398.6982 -1063.3145 3397.6816 -1064.332 3396.6455 -1065.3296 C3399.3604 -1061.4043 3402.0713 -1057.4766 3404.8359 -1053.584 c3408.3066 -1048.6958 3412.5352 -1043.4307 3415.3799 -1037.7539 C3416.3379 -1037.9424 3417.3418 -1037.895 3418.3262 -1037.5518 C3413.3232 -1046.4932 3406.4268 -1054.9199 3399.6758 -1062.2529 cf3416.9873 -982.4136 m3414.6738 -982.5352 3412.335 -983.1089 3410.2227 -983.8794 C3410.2676 -983.6787 3410.3027 -983.4731 3410.3613 -983.2798 c3410.8379 -981.6953 3411.1895 -980.0645 3411.4551 -978.4087 C3414.5957 -975.1904 3417.6426 -971.9385 3420.6807 -968.8994 c3421.1309 -968.4492 3421.5898 -968.0029 3422.0459 -967.5552 C3420.3047 -972.4873 3418.6611 -977.4619 3416.9873 -982.4136 Cf3425.6377 -1051.5513 m3424.7588 -1052.2852 3423.8623 -1053 3422.96 -1053.707 C3424.7988 -1051.0908 3426.6016 -1048.4487 3428.3818 -1045.7935 c3429.4492 -1044.2021 3430.4414 -1042.5479 3431.377 -1040.8486 C3432.8535 -1041.8779 3434.6797 -1042.1416 3436.4355 -1041.7441 C3432.9414 -1045.1235 3429.3828 -1048.4229 3425.6377 -1051.5513 cf3445.7656 -925.8145 m3445.1133 -925.2461 3444.4473 -924.7388 3443.7656 -924.2979 C3445.8799 -924.0249 3448.0107 -924.0015 3450.0732 -924.3359 C3448.5469 -924.6406 3447.1152 -925.1465 3445.7656 -925.8145 Cf3453.1797 -1024.7905 m3453.7705 -1023.9229 3454.3516 -1023.0479 3454.9219 -1022.165 C3455.0537 -1022.2378 3455.1943 -1022.2959 3455.3311 -1022.3604 C3454.623 -1023.1777 3453.9072 -1023.9888 3453.1797 -1024.7905 Cf3464.0059 -980.3213 m3462.8105 -982.8398 3461.6152 -985.3579 3460.3672 -987.8516 c3459.6699 -989.2466 3458.9189 -990.6016 3458.1387 -991.9341 C3457.9648 -991.3711 3457.7715 -990.8105 3457.5361 -990.2544 c3457.084 -989.186 3456.084 -988.2954 3454.8984 -987.7129 C3458.5938 -983.1782 3460.7549 -977.2266 3462.9043 -971.7568 c3463.375 -970.5566 3464.0938 -968.437 3465.0254 -966.1333 C3464.1895 -970.8188 3464.4863 -975.5352 3464.0059 -980.3213 Cf3462.5117 -943.0156 m3460.5176 -941.6006 3458.5576 -940.1392 3456.6855 -938.561 c3456.541 -938.4395 3456.4102 -938.3096 3456.2715 -938.1851 C3456.2217 -937.8101 3456.1406 -937.436 3456.0215 -937.0684 C3456.5283 -935.9941 3457.0479 -934.9268 3457.5361 -933.8433 c3458.373 -931.9858 3458.3887 -929.6807 3457.6455 -927.769 C3460.3799 -930.0146 3462.3252 -933.0215 3463.9951 -936.2881 c3465.2813 -938.8018 3466.3203 -941.4414 3467.3105 -944.1006 C3465.8613 -943.3901 3464.2354 -943.0166 3462.5117 -943.0156 Cf*U147.6064 -1862.5234 m149.8403 -1862.1367 151.6914 -1860.8076 153.9038 -1860.4238 c161.4355 -1859.1182 159.1626 -1848.5664 152.4707 -1847.8232 C152.561 -1845.3467 152.7383 -1842.875 153.1016 -1840.4229 c153.5127 -1837.6484 154.0591 -1834.8184 154.606 -1832.0732 c154.916 -1830.5186 155.9639 -1828.9443 156.8901 -1827.4707 C157.4468 -1827.2607 157.98 -1827.1035 158.4731 -1827.0713 c166.7949 -1826.5313 166.8477 -1813.5283 158.4731 -1814.0713 c156.7471 -1814.1836 155.0723 -1814.3105 153.4614 -1814.9678 c152.7305 -1815.2656 148.7036 -1816.6162 152.1758 -1816.1699 c147.042 -1816.8301 145.0806 -1821.5293 143.1396 -1825.8262 c141.1543 -1830.2227 140.6489 -1835.6826 140.0747 -1840.4424 c139.4404 -1845.7031 139.3809 -1850.9629 139.3784 -1856.2559 c139.376 -1860.791 143.5054 -1863.2344 147.6064 -1862.5234 cf263.6299 -1826.8682 m263.3145 -1816.6211 257.644 -1807.6006 257.3325 -1797.4814 c257.0752 -1789.1191 244.0742 -1789.0938 244.3325 -1797.4814 c244.6479 -1807.7285 250.3184 -1816.749 250.6299 -1826.8682 c250.8872 -1835.2305 263.8882 -1835.2559 263.6299 -1826.8682 cf383.4722 -1847.4609 m377.9648 -1841.1211 368.8096 -1850.3564 374.2798 -1856.6543 c376.8628 -1859.627 376.5088 -1865.5557 376.5674 -1869.2266 c376.6792 -1876.248 376.5742 -1883.2793 376.5742 -1890.3018 c376.5742 -1906.0205 374.812 -1920.6152 370.1748 -1935.6924 c368.0146 -1942.7168 365.375 -1948.8428 361.1934 -1954.8916 c357.0635 -1960.8652 351.9487 -1966.1689 346.8008 -1971.2627 c337.082 -1980.8799 326.6001 -1990.3291 315.0767 -1997.7266 c303.5601 -2005.1182 290.8506 -2010.4707 277.667 -2014.0508 c270.8774 -2015.8945 264.0435 -2016.9854 257.0063 -2017.1514 c248.8169 -2017.3438 240.7725 -2015.6699 232.5864 -2015.5205 c218.0815 -2015.2559 203.79 -2010.1904 190.646 -2004.2588 c184.0806 -2001.2949 178.4395 -1997.0977 172.249 -1993.5117 c169.187 -1991.7373 165.9551 -1990.2461 162.8032 -1988.6406 c159.0474 -1986.7285 155.647 -1983.8389 151.8047 -1982.2295 c145.4302 -1979.5586 139.9297 -1975.3379 134.5664 -1971.0664 c129.1787 -1966.7744 123.4976 -1962.8525 118.2012 -1958.4492 c112.9653 -1954.0977 109.0288 -1948.5791 104.0303 -1943.9951 c98.2153 -1938.6631 92.3511 -1933.4912 87.5024 -1927.2266 c85.3296 -1924.4189 80.5767 -1924.959 78.3101 -1927.2266 c75.5688 -1929.9668 76.1436 -1933.6191 78.3101 -1936.418 c82.4917 -1941.8213 87.4053 -1946.4629 92.4595 -1951.0342 c97.5693 -1955.6563 101.7734 -1960.9648 106.771 -1965.6699 c111.3394 -1969.9717 116.5908 -1973.5703 121.6069 -1977.3174 c127.062 -1981.3926 132.1753 -1985.875 137.9106 -1989.5703 c140.6934 -1991.3643 143.6772 -1992.8076 146.7256 -1994.085 c149.9609 -1995.4404 153.0718 -1998.2021 156.2417 -1999.8662 c163.1953 -2003.5146 169.6719 -2007.5742 176.4219 -2011.5479 c188.0293 -2018.3809 202.2402 -2023.666 215.3574 -2026.6992 c222.8701 -2028.4365 230.7295 -2028.5547 238.3994 -2028.5811 c242.1138 -2028.5938 245.8936 -2029.541 249.5977 -2029.8896 c253.9087 -2030.2959 258.25 -2030.1943 262.5625 -2029.8896 c276.4282 -2028.9111 289.8911 -2024.4102 302.5879 -2018.9932 c315.1992 -2013.6113 326.9106 -2006.2344 337.2925 -1997.291 c347.9209 -1988.1357 358.4971 -1978.8887 367.4258 -1968.0166 c382.0591 -1950.1982 387.998 -1926.542 389.4214 -1903.835 c390.105 -1892.9395 389.5742 -1881.8633 389.5742 -1870.9492 c389.5742 -1862.7646 389.0737 -1853.9102 383.4722 -1847.4609 cfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF