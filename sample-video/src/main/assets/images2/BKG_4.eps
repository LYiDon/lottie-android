%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.1.0%%For: (Evgeny Bakal) ()%%Title: (BKG 4.eps)%%CreationDate: 26.09.18 3:05%%Canvassize: 16383%%BoundingBox: 9 -2153 3837 -1%%HiResBoundingBox: 9 -2153 3837 -1%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1920.5 -1080.5 1920.5 -1080.5%AI3_TileBox: 1524 -1386 2316 -774%AI3_DocumentPreview: Header%AI5_ArtSize: 3840 2160%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1127 839 0.25 1831 940 18 0 0 6 130 0 0%AI5_OpenViewLayers: 7%%PageOrigin:1520 -1380%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 72 8%%BeginData: 3718 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1BFF7FAFFD51FF85AFFD09FFCACFCAFD1CFFA9AF7F85FD51FFAF%85FD09FFCAFFCACAC9FD1BFF8585FD15FFA9FD3DFF85AFFD0AFFCACFCAFF%C9FD1AFF7FFD15FFA9855B855AFD3BFF5AFD09FFC9FFCACAC9CFC9FD18FF%85AFFD16FF85858561A9FD3AFF85A9FD07FFCAFFCACFCACFCACFFD13FF85%857F857FAFFD16FF855B315B5B85FD1DFFA97F857FA9FD17FF85A9FD08FF%CAFFCACACFC9CAC9FD10FFA9858585A9FD19FFAF855B855B85A9FD17FFAF%FD0685AFA9FF8585FD15FFAF85FD09FFCACFFFCACACAC9FD05FFA985FF85%FD08FF7F85FFAFFD1BFFA9A95A85FD10FFA9A9A9FD05FFA97FA9FFA985A9%FD05FF7F857E857FAFFD10FF7EFD0BFFC9CACACAC9FD04FFAFA97FA98585%85FD05FFA985A9FD2EFFAF85A9FD0585AF85A9FF85A9FD0BFF85FFFFFF5B%FD10FFA985FD0DFFCFFD04FF7F8585FD04FFA95B8585857F85A9FD2EFF85%7FAFA9A9FFFFFFAF7FFF855B85FD10FFAF5BFD10FFA97F8585FFFFFFA9AF%FD13FFA9AFA9FD30FFA97FFD0BFFA9FD12FF85A9FD12FF8585AF85855BFD%46FF7FAFFD1EFF85A9FD13FFA984A9FF855AFFFFAFA9FD41FF85FD1FFFA9%A9FD18FFA985A98585A9FFFFFF85FD3AFF8585A9FD1FFFA9FD1DFFA98585%855BAFFD39FF8585FD7DFFA985FD7FFFA9FDBCFFC3FD7EFFC9CFCAFD7AFF%CAFFC9CAFFCAC9CFFD77FFCACACACFFD04FFCACACFFD76FFC3FD06FFCFC3%FD78FFC9FD04FFCFCAFD0AFFC9CFFD6DFFCACAFFCAFFC9FD09FFCFCAFFCA%FD6DFFCAFFC9FD04CAFD07FFCFC9CAC3CFC9FD6BFFCAC9C9FFFFFFC9CAFD%07FFC9CACAC9CACFFD6CFFCAFD0CFFCACACAC9C3FFC9FD7AFFC9FFFFFFCA%CAFD7AFFCAC9CFC9CACAFD7CFFCAFD6DFFCBC5C5FD78FFA9BF97CBA9BF97%B9A9FD77FFC5B9BFB9BFB9BF97FD78FFA3B997BF97BF97BFFD79FF97BFBF%BF97BFCBFD79FFCB96B997B9A2FD7BFFCBB9B9C5FD7DFFCBC5FDFCFFFDFC%FFFD1FFFAFFD7FFFA9FD7EFFAFFFFFAFFD79FFA9FF855BA95B37FD7BFFAF%315B31A9FD7BFF5B373037A9FF84FD78FF5B37375B3785FD79FF5B313137%315B3185FD67FFAF85FFFFFFA9FFA9FD09FFAF8585375B313731AFFD66FF%A9A97FA9858585A9FD0CFF5B31A984855BFD69FF85AFFD0DFF85FF5B5BFD%7BFFAFFFFF8585FFA9FD7CFFA9FDFCFFFDFCFFFD88FFCBFD7FFFC5FD64FF%CAFD16FFC5FFFFFFCBFD63FFC9CFC9CAC9CACAFD18FFC5CBFD5FFFCFCAFF%C3FFCAFD19FFCBA2FD5FFFCAC9C3C3A1FD11FFCBFD08FFCBCBFD5EFFCACF%FFCAC9CFCFFD10FFCBC5CBFD06FFCBC5FD27FFA98585FD34FFC9CACAC9CA%CACAFD11FFCBC5CBFD04FFCBC5FD28FFAF7F855BA9FD32FFCACACAFFCFCA%CAFD12FFCBC5A2CBCBC59CFD28FFAF7F5B305B5BA9FD4DFFCBCBCBFD29FF%7F855B855BA9A9FD7AFFA9855BA9FD5BFFA9858585A9FD1EFFA9A9FD5AFF%7F5B5A857FA9FD67FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Fade To Edge Black)(Fade To Edge Black) 0 3 Bd[0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br[0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Neon Rings Vignette)(Neon Rings Vignette) 1 17 Bd[0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B5B6B8B9BABDBEC0C1C3C4C5C7C8CACBCDCFD0D2D3D4D5D7D7D8DADBDBDDDEDFE0E2E3E4E5E6E7E7E8EAEAEBECECEDEDEEEEEEEFEFF0F0F1F1F1F2F2F2F2F3F3F2F3F4F3F3F4F4F4F4F5F4F4F5F5F4F4F4F4F4F4F4F3F3F4F4F3F3F3F3F2F3F2F2F2F2F2F2F2F1F1F0F1F0EFF0EFEEEEEEEEEDEDEDECECECECEBEAEBEAEAEAE9E8E8E8E7E7E7E6E6E5E5E5E4E3E3E3E2E2E1E1E0E0DFDFDFDEDDDDDCDCDBDBDAD9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D0D0D0CFCECECDCDCCCCCBCACAC9C8C7C7C6C5C5C4C4C3C3C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B8B7B7B6B5B5B4B3B2B2B1><B0B0B1B1B1B0B1B1B1B2B2B2B1B3B3B2B2B4B3B2B4B4B3B3B5B4B4B6B5B4B3B5B5B4B6B6B5B4B6B5B5B4B6B5B4B6B5B4B4B5B5B4B6B5B4B3B4B4B3B4B3B2B1B3B1B0AFB1B0AFB0AFAEADAFADACAEADABAAACAAA9AAA9A8A7A8A7A5A4A5A4A3A4A3A1A0A1A09E9F9E9D9B9C9B999A9997969795949293929091908E8D8E8C8A8B8A888787868485838280817F7D7B7C7A797977767475737172706F6D6D6C6A6A69676565646260615F5D5D5C5A5858565555535250504E4D4D4B4A4848474544444241413F3E3C3C3B393A3837353634323331302E2F2D2C2A2B2928292726242524><A5A5A3A3A3A3A2A1A19F9F9E9E9C9C9C9B999998979796969594949292929290908F8D8D8C8C8A8A8A8A88888886868686848483828281817F7F7F7D7C7C7C7A797979777776757474737271716F6F6E6E6C6C6C6A6A696967676665646363616160605E5D5D5C5B5B5A58585756555554535251514F4E4E4C4B4B4A484847454544444241413F3E3E3D3B3B3A3A3837373534333331302F2E2D2D2C2A2A292727262624232222201F1F1D1C1B1B191817151514131211110F0E0E0D0B0B0A0908070705050404030202000000000000000000000000000000000000000000000000><D5D4D3D2D1D0CFCECDCCCBC9C8C7C5C4C3C2C0BFBDBCBAB8B7B5B3B1AFADABA9A8A6A4A29F9D9B99979593918F8D8B89878583817E7C7A79777573716F6D6B6968666462605E5C5B5957555352504E4C4B494846444342403F3D3C3A383736343332302F2E2C2B2A29272625242221201F1E1D1C1B1A191716151514131211100F0E0E0D0C0B0B0A090908080706060505040404030303030202020202010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><1313131313131212121212121212121212121111111111111111111111111010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0909090909090909090909090808080808080808080808080707070707070707070707070606060606060606060606050505050505050505050505040404040404040404040404030303030303030303030303020202020202020202020202010101010101010101010101000000000000><0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F40414142434344454646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF>4 %_Br<B1B1B0B0B0B0B0B0AFAFAFAFAEAEAEAEADADADADADACACACABABAAAAAAA9A9A8A8A7A7A7A6A6A6A6A5A4A4A4A3A3A3A3A2A2A2A1A1A1A09F9F9E9E9E9D9D9D9C9B9B9A9A99989897969695959494939292919190908F8E8E8D8C8C8B8B8A898988888786868584848382828180807F7E7D7C7C7B7A797878777675747373727170706F6E6D6C6B6B6A69696867666564636261605F5E5D5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484747464544434241403F3F3E3D3C><2424222222222020211F1F201E1E1E1E1C1C1C1B1B1B1919191A17171816161614141414121213111212101010100E0E0F0D0D0D0D0B0B0C0A0A0B0909090A080909080808070708080607070506060505050504040403040403040404030304020303030202030202020101010201010100010100010101010101000101000001010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001010001>00<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC><AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6><EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB>4 %_Br<3C3D3E3F3F40414243444546474748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5D5E5F60616263646566676869696A6B6B6C6D6E6F707071727373747576777878797A7B7C7C7D7E7F808081828283848485868687888889898A8B8B8C8C8D8E8E8F90909191929293949495959696979898999A9A9B9B9C9D9D9D9E9E9E9F9FA0A1A1A1A2A2A2A3A3A3A3A4A4A4A5A6A6A6A6A7A7A7A8A8A9A9AAAAAAABABACACACADADADADADAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1><0100010100000100000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010100000101000101010101010001010001010102010101020202030202030303020403030404040304040304040405050505060605070706080807070808080909080A0909090B0A0A0C0B0B0D0D0D0D0F0E0E10101010121211131212141414141616161817171A1919191B1B1B1C1C1C1E1E1E1E201F1F212020222222222424>00<BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF>4 %_Br<B1B2B2B3B4B5B5B6B7B7B8B9BABABBBCBCBDBEBEBFBFC0C1C1C2C3C3C4C4C5C5C6C7C7C8C9CACACBCCCCCDCDCECECFD0D0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9DADBDBDCDCDDDDDEDFDFDFE0E0E1E1E2E2E3E3E3E4E5E5E5E6E6E7E7E7E8E8E8E9EAEAEAEBEAEBECECECECEDEDEDEEEEEEEEEFF0EFF0F1F0F1F1F2F2F2F2F2F2F2F3F2F3F3F3F3F4F4F3F3F4F4F4F4F4F4F4F5F5F4F4F5F4F4F4F4F3F3F4F3F2F3F3F2F2F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEAEAE8E7E7E6E5E4E3E2E0DFDEDDDBDBDAD8D7D7D5D4D3D2D0CFCDCBCAC8C7C5C4C3C1C0BEBDBAB9B8B6B5B4><24252426272928292B2A2C2D2F2E3031333234363537383A393B3C3C3E3F4141424444454748484A4B4D4D4E5050525355555658585A5C5D5D5F61606264656567696A6A6C6D6D6F707271737574767779797A7C7B7D7F818082838584868787888A8B8A8C8E8D8E9091909293929495979697999A999B9C9B9D9E9F9EA0A1A0A1A3A4A3A4A5A4A5A7A8A7A8A9AAA9AAACAAABADAEACADAFADAEAFB0AFB0B1AFB0B1B3B1B2B3B4B3B4B4B3B4B5B6B4B5B5B4B4B5B6B4B5B6B4B5B5B6B4B5B6B6B4B5B5B3B4B5B6B4B4B5B3B3B4B4B2B3B4B2B2B3B3B1B2B2B2B1B1B1B0B1B1B1B0B0><00000000000000000000000000000000000000000000000002020304040505070708090A0B0B0D0E0E0F111112131415151718191B1B1C1D1F1F202222232426262727292A2A2C2D2D2E2F3031333334353737383A3A3B3B3D3E3E3F414142444445454748484A4B4B4C4E4E4F51515253545555565758585A5B5B5C5D5D5E606061616363646566676769696A6A6C6C6C6E6E6F6F717172737474757677777979797A7C7C7C7D7F7F7F81818282838484868686868888888A8A8A8A8C8C8D8D8F909092929292949495969697979899999B9C9C9C9E9E9F9FA1A1A2A3A3A3A3A5A5><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010202020202030303030404040505060607080809090A0B0B0C0D0E0E0F101112131415151617191A1B1C1D1E1F20212224252627292A2B2C2E2F303233343637383A3C3D3F404243444648494B4C4E5052535557595B5C5E6062646668696B6D6F71737577797A7C7E81838587898B8D8F91939597999B9D9FA2A4A6A8A9ABADAFB1B3B5B7B8BABCBDBFC0C2C3C4C5C7C8C9CBCCCDCECFD0D1D2D3D4D5><00000000000001010101010101010101010102020202020202020202020203030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606060707070707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010111111111111111111111111121212121212121212121212131313131313><AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A59585857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B3B2B0B0AEADABAAA9A9A7A6A4A4A2A2A0A09E9E9D9D9C9C9A9A989896969595939391918F8F8C8C8988868684848383818180807E7F7D7D7C7B7A7A79797777757574747272717170706F6F6E6E6D6D6C6C6B6B6A6A696968686767666665656464636462626162616160605F5F5E5E5D5D5C5C5B5C5A5A5959585857575656555554545353525150504F4F4E4E4D4C4B4B4A4A49494747464645444343424140403F3E3D3D3C3B3A39383837363534333231302F2E2D2C2B2A282726242322201F1E1C1B1A181716141312100F0E0C0B0A080706050403020000><B0B1B2B3B3B4B5B6B8B8BABABCBDBFC0C2C3C5C4C5C5C6C6C7C7C8C8C9C9CBCBCDCCCECFD1D1D3D5D7D7D9DBDDDEDFE0E0E0E1E2E3E3E4E3E4E5E6E6E8E8EAEAEBECEDEEEFEFEFEFF0F1F1F2F3F2F2F2F3F3F4F4F4F4F5F5F6F6F7F7F6F7F7F7F8F8F9F8F8F9F9FAFAFAFAFAFBFBFBFBFCFCFBFCFCFCFCFDFDFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F2F2F1F1><A5A5A3A3A3A3A1A19FA09FA09F9F9E9E9D9D9C9D9C9C9B9B9A9A9A9A999998989798979796979596949594949394939393949293929291929192909190908F908F908E8F8E8F8E8F8E8F8D8E8D8E8D8E8C8D8B8C8B8C8B8C8A8B8A8B8A8B898A898A888A8889888887888788868786868586858684858384838482838182808180807F7F7E7E7D7D7C7D7B7C7A7B797A787977787677757674757373717270706F6F6D6E6C6D6B6B696A686866666464626260615F5F5D5D5B5B595A57575454525250504E4E4B4B49494646444441413F3F3D3D3A3A383836363434><D5D5D4D3D2D2D1D1D0CFCECECDCDCCCBCACAC9C9C7C7C5C5C4C3C2C1C0BFBDBDBBBAB9B8B6B6B4B3B1B0AFAEACABA9A8A6A5A3A2A0A09D9D9B9A9796949391908E8D8B8A8887858482817F7E7C7A7877757472716F6E6C6B696866656362605F5D5C5A595756545351504F4E4C4B49484646444341403E3D3C3B39383736343332312F2E2D2C2A2928272525232221201F1E1D1C1A1A181816161414131211100F0F0E0D0C0B0A0A09090807070606050404030302020202010101010101000000000000000000000000000000000000000000000000000000000000><131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F101010101010101111111111111111121212121212121313131313131314141414141414141515151515151516161616161616171717171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F202020202020202121212121212122222222222222222323232323232324242424242424252525252525252526262626262626272727272727272828282828282828292929292929292A2A2A2A><0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7B7B>4 %_Br<0000000000000000000101010101010101010101010101010102020202020202020202020202030202020304030404040404050505050505050505060606060606060606070707070707070809090909090909090A0A0A0A09090A0A0B0B0B0B0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0D0D0D0D0E0E0E0E0E0E0E0E0E0E101010101011111111><F1F1F0EFEFEEEDEDECECEBEBEAE9E8E8E7E6E6E5E4E3E3E2E1E0DFDFDEDDDDDCDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBCBBBAB9B7B6B5B4B3B2B1B0AEADACAAA9A8A6A5A3A2A19F9E9D9B9A999796949391908E8D8B8A888786848382807E7D7B7A787776747372706F6E6C6B6A686765646261605E5D><343233302E2F2D2E2B292A2826272523232120201F1F1E1C1D1B1A1A1917181617151314131112100F100E0F0D0C0D0C0B0C0B0A0B0A090A090908070807060605040505060504050404040303040304030203020203020102020102010202010101000100000000010000000000000000000000000000000000000000000000000000000000>0<EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6><2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF><7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F9091919293939495959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCDCECFCFD0>4 %_Br<1111111110101010100E0E0E0E0E0E0E0E0E0E0D0D0D0D0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0B0B0B0B0A0A09090A0A0A0A090909090909090908070707070707070606060606060606060505050505050505050404040404030403020202030202020202020202020202020201010101010101010101010101010101000000000000000000><5D5E606162646567686A6B6C6E6F707273747677787A7B7D7E808283848687888A8B8D8E909193949697999A9B9D9E9FA1A2A3A5A6A8A9AAACADAEB0B1B2B3B4B5B6B7B9BABBBCBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDCDDDDDEDFDFE0E1E2E3E3E4E5E6E6E7E8E8E9EAEBEBECECEDEDEEEFEFF0F1F1><0000000000000000000000000000000000000000000000000000000000010000000001000101010202010201020201020302020302030403040303040404050405060505040506060708070809090A090A0B0A0B0C0B0C0D0C0D0F0E100F1012111314131517161817191A1A1B1D1C1E1F1F2020212323252726282A292B2E2D2F2E30333234>0<E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEE><AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A><D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A8988888787868585848383828181807F7F7E7E7D7C7C7B>4 %_Br<0000020304050607080A0B0C0E0F101213141617181A1B1C1E1F202223242627282A2B2C2D2E2F30313233343536373838393A3B3C3D3D3E3F40404142434344454646474749494A4A4B4B4C4D4E4E4F4F5050515253535454555556565757585859595A5A5C5B5C5C5D5D5E5E5F5F606061616261626264636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727274747575777779797A7A7B7C7D7D7F7E8080818183838484868688898C8C8F8F919193939595969698989A9A9C9C9D9D9E9EA0A0A2A2A4A4A6A7A9A9AAABADAEB0B0B2B3B4><F1F1F2F2F3F3F3F4F4F4F4F5F5F5F5F6F6F6F6F7F7F7F7F7F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFDFDFCFCFCFCFBFCFCFBFBFBFBFAFAFAFAFAF9F9F8F8F9F8F8F7F7F7F6F7F7F6F6F5F5F4F4F4F4F3F3F2F2F2F3F2F1F1F0EFEFEFEFEEEDECEBEAEAE8E8E6E6E5E4E3E4E3E3E2E1E0E0E0DFDEDDDBD9D7D7D5D3D1D1CFCECCCDCBCBC9C9C8C8C7C7C6C6C5C5C4C5C3C2C0BFBDBCBABAB8B8B6B5B4B3B3B2B1B0><3434363638383A3A3D3D3F3F41414444464649494B4B4E4E50505252545457575A595B5B5D5D5F5F616062626464666668686A696B6B6D6C6E6D6F6F707072717373757476757776787779787A797B7A7C7B7D7C7D7D7E7E7F7F8080818082818382848384838584868586858686878688878887888889888A888A898A898B8A8B8A8B8A8C8B8C8B8C8B8D8C8E8D8E8D8E8D8F8E8F8E8F8E8F8E908F908F909091909291929192929392949393939493949495949695979697979897989899999A9A9A9A9B9B9C9C9D9C9D9D9E9E9F9FA09FA09FA1A1A3A3A3A3A5A5><000000000000000000000000000000000000000000000000000000000000010101010101020202020303040405060607070809090A0A0B0C0D0E0F0F101112131414161618181A1A1C1D1E1F2021222325252728292A2C2D2E2F31323334363738393B3C3D3E40414344464648494B4C4E4F505153545657595A5C5D5F606263656668696B6C6E6F7172747577787A7C7E7F8182848587888A8B8D8E9091939496979A9B9D9DA0A0A2A3A5A6A8A9ABACAEAFB0B1B3B4B6B6B8B9BABBBDBDBFC0C1C2C3C4C5C5C7C7C9C9CACACBCCCDCDCECECFD0D1D1D2D2D3D4D5D5><EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413><2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A191919191919191818181818181818171717171717171616161616161615151515151515141414141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C><7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B4B5B4B4B4B5B5B4B4B6B6B6B5B7B7B7B7B9B9B9BBBBBBBABCBCBCBCBEBDBDBCBEBEBEBEBFBFBFBFC0C1C0C2C2C1C1C2C2C2C2C3C3C2C2C3C3C3C2C3C3C3C4C4C3C3C4C4C3C3C4C3C3C2C4C3C3C2C3C2C2C1C2C1C0C2C1C0BFC0C0BFBFBFBFBEBDBDBDBCBBBCBBBABABAB9B8B8B8B6B6B6B5B4B3B4B2B1B0B0AFAEADADACAAAAA9A8A6A6A5A3A2A2A09F9D9D9C9A989896><B0B2B1B3B3B5B5B7B8B9B9BCBEBEC0C0C2C2C4C4C6C6C8CACACCCCCECDCFCFD0D0D1D3D3D5D4D6D5D7D7D8D8DADBDBDCDCDDDCDEDDDEDEDFE0DFE1E0E1E1E2E1E2E1E3E4E3E4E3E4E3E4E3E4E4E5E4E5E6E4E5E4E5E4E5E4E5E4E5E5E4E5E4E5E4E4E3E4E3E3E4E3E3E2E3E1E2E1E1E0E0E1DFE0DEDFDEDEDDDDDCDCDDDBDBDADAD9D9D8D8D7D7D7D6D6D4D4D3D3D2D2D1D1><A5A3A3A2A2A0A09E9E9C9C9A9898969594939191908F8E8C8C8A898887868584838281807F7E7D7C7B7B797978777675747373727170706F6D6D6C6B6A6A69686766656463626160605E5E5C5C5B5A595857565554535251504F4E4D4C4A4A48474645444342403F3D3C3B3A383736353331302E2E2C2B292826252321201D1C1A1917151312100E0D0B0A09080605030200><D5D4D3D2D1D0CECDCCCBCAC9C7C6C5C3C2C1BFBEBCBBB9B7B5B3B1AFADABA9A7A5A3A19F9C9A989693918F8D8B888684827F7D7B79777572706E6C6A68666462605E5B59575553514F4D4B4948454442403E3C3A38363533312F2E2C2A292726242221201E1D1B1A181715141312100F0E0D0C0A0A0808070605050403030302020201010101010101000000000000000000><1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E><0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F303030313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F>4 %_Br<96959392908F8D8C8A898786848382807F7D7B7A787775747371706F6D6C6B69686665646261605E5D5C5A59575655545251504F4C4B4A48474645444241403E3D3C3B3A39383735343332302F2D2C2B2928272625242221201F1E1D1C1B1A191817161514131211><D1CFCECCCBC9C8C7C5C5C4C2C1C0BFBDBCBBBAB9B7B6B5B3B2B1B1AFAEACABAAA9A7A6A5A3A2A1A09E9D9C9C9B99989795949391918F8E8D8C8B898887878685848381807F7E7D7C7B7A7977767575747372706F6E6D6C6B6A6968676665646463636261605F5E5D>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6><4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF><9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0>4 %_Br<1112131415161718191A1B1C1D1E1F2021222425262728292B2C2D2F30323334353738393A3B3C3D3E40414244454647484A4B4C4F50515254555657595A5C5D5E60616264656668696B6C6D6F707173747577787A7B7D7F808283848687898A8C8D8F9092939596><5D5E5F6061626363646465666768696A6B6C6D6E6F7072737475757677797A7B7C7D7E7F808183848586878788898B8C8D8E8F91919394959798999B9C9C9D9EA0A1A2A3A5A6A7A9AAABACAEAFB1B1B2B3B5B6B7B9BABBBCBDBFC0C1C2C4C5C5C7C8C9CBCCCECFD1>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E><AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756565554535251504F4E><D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F>4 %_Br<9698989A9C9D9D9FA0A2A2A3A5A6A6A8A9AAAAACADADAEAFB0B0B1B2B4B3B4B5B6B6B6B8B8B8B9BABABABBBCBBBCBDBDBDBEBFBFBFBFC0C0BFC0C1C2C0C1C2C1C2C2C3C2C3C3C4C2C3C3C4C3C3C4C4C3C3C4C4C3C3C3C2C3C3C3C2C2C3C3C2C2C2C2C1C1C2C2C0C1C0BFBFBFBFBEBEBEBEBCBDBDBEBCBCBCBCBABBBBBBB9B9B9B7B7B7B7B5B6B6B6B4B4B5B5B4B4B4B5B4B4><D1D1D2D2D3D3D4D4D6D6D7D7D7D8D8D9D9DADADBDBDDDCDCDDDDDEDEDFDEE0DFE1E0E0E1E1E2E1E3E2E3E3E4E3E3E4E3E4E4E5E4E5E4E5E5E4E5E4E5E4E5E4E5E4E6E5E4E5E4E4E3E4E3E4E3E4E3E4E3E1E2E1E2E1E1E0E1DFE0DFDEDEDDDEDCDDDCDCDBDBDAD8D8D7D7D5D6D4D5D3D3D1D0D0CFCFCDCECCCCCACAC8C6C6C4C4C2C2C0C0BEBEBCB9B9B8B7B5B5B3B3B1B2B0><000203050608090A0B0D0E1012131517191A1C1D202123252628292B2C2E2E303133353637383A3B3C3D3F40424344454647484A4A4C4D4E4F505152535455565758595A5B5C5C5E5E60606162636465666768696A6A6B6C6D6D6F707071727373747576777879797B7B7C7D7E7F808182838485868788898A8C8C8E8F9091919394959698989A9C9C9E9EA0A0A2A2A3A3A5><00000000000000000001010101010101020202030303040505060708080A0A0C0D0E0F101213141517181A1B1D1E202122242627292A2C2E2F31333536383A3C3E4042444548494B4D4F51535557595B5E60626466686A6C6E70727577797B7D7F828486888B8D8F919396989A9C9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBCBEBFC1C2C3C5C6C7C9CACBCCCDCED0D1D2D3D4D5><7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A69696867666665646363626160605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A494847474645444443424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A29282827262525242322222120201F1E1D1D1C1B1A1A191817171615141413><4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A191918181717161616151514141313121211111110100F0F0E0E0D0D0C0C><9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br[0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 Bs0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS%_0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink Radial)(Pink Radial) 1 2 Bd[0<00000102030405060708090B0C0D0E1011121314141617191A1C1D1E202122232426272728292A2C2D2E2F31313234353638393A3A3B3C3E3F414242434546474848494B4C4D4D4E4F51525254555758585A5B5C5D5D5F60616162636565666869696A6B6C6C6E6F6F707273737576767779797A7B7B7D7E7E7F8181828383848585878888898A8A8C8C8D8E8E8F8F91929294939596969898999B9A9C9C9D9D9F9FA0A2A2A3A3A4A4A6A6A7A7A8A8A9A9AAAAACACADADAEAEAFAFB1B1B2B2B3B3B3B4B4B5B5B6B6B6B7B7B9B9BAB9B9BABABBBBBBBCBCBEBDBDBFBFBFC0C0C0C1C1C2C2C2C3C3C3C4C4C4C4C5C5C5C6C6C6C7C7C7C7C8C8C8C9C9C9C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCCCDCDCDCDCDCDCECECECECECECFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1><0000000001010102020303030303040405050606070808090909090A0A0B0C0C0D0E0E0E0F0F10101112121113131415151615161818191A191A1A1C1C1C1C1D1E1F1E1F20212221222324252425262727282829282A2B2C2B2D2D2E2D2F302F3031323132343334363536373837383A393A3C3B3C3E3D3E403F40404142424445454647474847494A4A4B4A4C4D4D4E4D4F4E505150525153525355555756585759585A5A5B5B5D5D5E5E5F5F616162626363646465656767686869696A6A696B6B6D6D6E6E6D6F6F7171707272747473757577777678787A7A797B7B7A7C7C7C7E7D7D7F7F7F8180808282818184838385858587878686888888888A8A8A8A8C8B8B8B8B8D8D8D8D8F8E8E8E8E909090909090919191919191939292929292929294949494949494949494949595959595959595959595959595>01<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A89888887878685858484838382828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F6F6E6E6D6D6C6C6C6B6B6A6A6A69696868686767676666666565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A59595959595858585858585757575757575656565656565656555555555555555555555454545454545454545454545454><FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777776767575747474737372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A6969696868686767676666666665656564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959>4 %_Br[0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 %_BS%_0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 3 Bd[0<A9A9AAAAABABADADAEAEAEAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B8B9B9BABABABBBBBCBCBDBDBDBEBEBFBFC0C0C1C1C1C2C2C3C3C4C4C5C5C5C6C6C7C7C8C8C8C9C9C9C9CACACBCB><080A0B0C0D0F1012131517191B1C1E1F2123242627292B2D2E3032333537383A3C3D3F414244484A4B4E505153545657595B5D5F6062636567696A6C6F70727476787A7C7D7F81838587898B>01<7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A><ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160>4 %_Br0<8282828383838383838585858585858686878787878888888888888A8A8A8A8A8A8C8C8C8C8C8C8D8D8D8D8D8D8F8F8F8F8F8F90909090909192929292929294949494949495959595959797979797979999999999999B9B9B9B9B9B9D9D9D9D9D9D9E9E9E9E9F9FA0A0A0A0A0A0A2A2A2A2A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7A7A7A7A9A9A9><F5F4F4F3F2F1F0EFEEEDECEAE9E8E6E6E5E4E3E2E1E0DFDEDDDBDAD8D7D6D4D3D2D1D0CFCDCCCAC8C6C5C4C2C1C0BFBEBDBCBAB9B7B6B4B3B1AFADACAAA9A7A5A3A2A09F9D9B9998969492908E8C8A88868482817F7D7A78777573716F6D6B69676562605F5D5B59565452504F4D4A484644413F3C3B39373533302E2D2B29272422201E1C1A17151312100E0B0A08>01<9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A89898989898988888888888887878787878686868686868585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B><1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 %_BS%_0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 Bs0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 %_BS%_0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 Bs0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 %_BS%_0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 139)(Unnamed gradient 139) 1 2 Bd[00001114 %_Br[0 0 0 0 1 1 1 2 87 36.6667 %_BS%_0 0 0 0 1 1 1 2 87 36.6667 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F50525354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBBBCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F80818182838384858686878889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACACADADADADADADADAD><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F4041424344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F8081818283848485858687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E80838587898C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Water)(Water) 0 5 Bd[<D5D6D6D7D7D8D9D9D9DADADBDCDCDDDEDEDFDFE0E1E1E1E2E3E3E4E4E5><5253545657595A5A5B5D5E606163646567686A6B6C6C6D6E7071727475><3F3F404141424345454647474848494B4B4C4C4D4D4F4F505151525353><02020203030304040505050606070709090A0A0B0C0C0D0E0F10101112>0<8A89888786858484838281807F7E7D7C7B7A7978777776757473727170><A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C>4 %_Br<B9BABBBBBCBDBDBEBFBFC0C1C1C2C2C3C3C4C4C5C5C6C6C7C8C8C9C9CACBCCCCCDCDCECFD0D0D0D1D2D2D3D4D4D4D5><17181A1A1B1D1E2021212324262829292B2D2E3032313335363838393B3C3E403F414344464747494A4C4D4F4F5052><15161718191A1A1B1B1D1E1E1F1F202223232425252728292B2C2E2E2F30303133343535363738393A3A3B3C3D3E3F><0000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010202>0<B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929191908F8E8D8C8C8B8A><D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9>4 %_Br<7576777879797A7B7C7D7E7E7F808182828384858586878888898A8B8C8C8D8E8E8F9090919293939494959696979899999A9A9B9C9C9D9E9E9E9FA0A1A1A2A2A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAAAABABACACADADADADAEAEAFAFB0B0B0B1B2B2B2B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B8B8B8B8B8B9B9B9B9B9><02020202020102020201020202010202020102020101020201010202010102010101020202010302020203030202030303030404030304040404050404040505040505050506060605070706060707070708080808090909080A0A09090B0B0B0A0C0C0C0C0E0E0E0E10100F0F111111111212121214141414151515151717><10111010121211111111101112121212121211111313121313131212141413141414131315151414141513141516141515151414161614151515141416161414151414161615151515141416161515151615151617161616161515171716161617161618181717171716161717161616161515171716161616151516171515>0<7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B1B1B1B1B0B0><E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9D9D9D9D8D8D8D8>4 %_Br<000001010203040505060708090A0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233343535363738393A3A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F616162636465666768696A6B6B6C6D6E6F70707172737475><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000010100010102010102010102010202010202><000000000000000000010101010102010202010103020202020203030303030403040403040404050405060506050506060606060607060706060707080807080808090808080909090909080A0A09090A0A0B0B0A0B0A0B0C0B0B0C0C0C0C0C0C0B0D0D0C0C0D0D0E0D0D0D0D0E0F0E0E0E0E0F0F0F0F0E101010100F0F111010>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F><FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0><FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8>4 %_Br[0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 %_BS%_0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 Bs0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 %_BS%_0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 Bs0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 %_BS%_0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 Bs0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS%_0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Diamond Cubes)(Diamond Cubes) 6.5605 11.3652 85.3018 79.5596 [%AI3_Tile(0 O 0 R 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 Xa 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR45.9316 56.8281 m39.3691 45.4609 L26.2471 45.4609 L32.8066 56.8281 L45.9316 56.8281 Lf45.9316 34.0957 m39.3691 22.7305 L26.2471 22.7305 L32.8066 34.0957 L45.9316 34.0957 Lf65.6162 22.7305 m59.0537 11.3652 L45.9316 11.3652 L52.4932 22.7305 L65.6162 22.7305 Lf65.6162 45.4609 m59.0537 34.0977 L45.9316 34.0977 L52.4932 45.4609 L65.6162 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L6.5605 11.3652 L13.123 22.7305 L26.2471 22.7305 Lf26.2471 45.4609 m19.6846 34.0977 L6.5605 34.0977 L13.123 45.4609 L26.2471 45.4609 Lf45.9316 79.5586 m39.3691 68.1924 L26.2471 68.1924 L32.8066 79.5586 L45.9316 79.5586 Lf65.6162 68.1934 m59.0537 56.8281 L45.9316 56.8281 L52.4932 68.1924 L65.6162 68.1934 Lf85.3018 56.8281 m78.7402 45.4609 L65.6162 45.4609 L72.1777 56.8281 L85.3018 56.8281 Lf85.3018 34.0957 m78.7402 22.7305 L65.6162 22.7305 L72.1777 34.0957 L85.3018 34.0957 Lf85.3018 79.5586 m78.7402 68.1924 L65.6162 68.1924 L72.1777 79.5586 L85.3018 79.5586 Lf26.2471 68.1924 m19.6846 56.8281 L6.5605 56.8281 L13.123 68.1924 L26.2471 68.1924 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 Xa 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR26.2471 68.1924 m19.6846 56.8281 L26.2471 45.4609 L32.8066 56.8281 L26.2471 68.1924 Lf26.2471 45.4609 m19.6846 34.0957 L26.2471 22.7305 L32.8066 34.0957 L26.2471 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L26.2471 0 L32.8066 11.3652 L26.2471 22.7305 Lf45.9316 34.0957 m39.3691 22.7305 L45.9316 11.3652 L52.4932 22.7305 L45.9316 34.0957 Lf45.9316 56.8281 m39.3691 45.4609 L45.9316 34.0977 L52.4932 45.4609 L45.9316 56.8281 Lf6.5605 34.0957 m0 22.7305 L6.5605 11.3652 L13.123 22.7305 L6.5605 34.0957 Lf6.5605 56.8281 m0 45.4609 L6.5605 34.0977 L13.123 45.4609 L6.5605 56.8281 Lf26.2471 90.9238 m19.6846 79.5586 L26.2471 68.1924 L32.8066 79.5586 L26.2471 90.9238 Lf45.9316 79.5586 m39.3691 68.1924 L45.9316 56.8281 L52.4932 68.1924 L45.9316 79.5586 Lf65.6162 68.1924 m59.0537 56.8281 L65.6162 45.4609 L72.1777 56.8281 L65.6162 68.1924 Lf65.6162 45.4609 m59.0537 34.0957 L65.6162 22.7305 L72.1777 34.0957 L65.6162 45.4609 Lf65.6162 22.7305 m59.0537 11.3652 L65.6162 0 L72.1777 11.3652 L65.6162 22.7305 Lf85.3018 34.0957 m78.7402 22.7305 L85.3018 11.3652 L91.8643 22.7305 L85.3018 34.0957 Lf85.3018 56.8281 m78.7402 45.4609 L85.3018 34.0977 L91.8643 45.4609 L85.3018 56.8281 Lf65.6162 90.9238 m59.0537 79.5586 L65.6162 68.1924 L72.1777 79.5586 L65.6162 90.9238 Lf85.3018 79.5586 m78.7402 68.1924 L85.3018 56.8281 L91.8643 68.1924 L85.3018 79.5586 Lf6.5605 79.5576 m0 68.1924 L6.5605 56.8281 L13.123 68.1924 L6.5605 79.5576 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6091.6558 7111 L-6091.6558 7075.8271 L-6271 7075.8271 L-6271 7111 Lnuu0 O0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa0 R0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA0.5 w-6109.8286 7076.0781 m-6252.8276 7076.0781 L-6252.8276 7078.647 L-6109.8286 7078.647 L-6109.8286 7076.0781 Lb-6252.8276 7101.4829 m-6109.8286 7101.4829 L-6109.8286 7098.7109 L-6252.8276 7098.7109 L-6252.8276 7101.4829 Lb0 0 0 0 1 1 1 Xa-6252.8276 7078.647 m-6252.8276 7098.7109 L-6109.8286 7098.7109 L-6109.8286 7078.647 L-6252.8276 7078.647 LbU0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7110.6191 m-6092.2544 7110.6191 L-6094.4292 7108.3984 L-6125.9976 7108.3984 L-6131.1978 7110.6191 Lb-6092.2544 7086.5854 m-6109.8286 7086.5854 L-6109.8286 7088.6797 L-6094.3237 7088.6797 L-6092.2544 7086.5854 Lb0 0 0 0 1 1 1 Xa-6094.3237 7088.6797 m-6109.8286 7088.6797 L-6109.8286 7101.4829 L-6125.9976 7108.3984 L-6094.4292 7108.3984 L-6104.6465 7099.1279 L-6094.3237 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6270.4019 7110.6191 m-6231.4595 7110.6191 L-6236.6587 7108.3984 L-6268.2285 7108.3984 L-6270.4019 7110.6191 Lb0 0 0 0 1 1 1 Xa-6252.8286 7088.6797 m-6268.3345 7088.6797 L-6258.0112 7099.1279 L-6268.2285 7108.3984 L-6236.6587 7108.3984 L-6252.8286 7101.4829 L-6252.8286 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6252.8286 7086.5854 m-6270.4019 7086.5854 L-6268.3345 7088.6797 L-6252.8286 7088.6797 L-6252.8286 7086.5854 Lb-6231.4595 7110.6191 m-6252.8286 7101.4829 LSu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6131.1978 7101.4829 m-6131.1978 7108.1836 L-6115.5269 7101.4829 L-6131.1978 7101.4829 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7108.1836 m-6131.1978 7110.6191 L-6109.8286 7101.4829 L-6115.5269 7101.4829 L-6131.1978 7108.1836 Lb-6252.8286 7101.4829 m-6231.4595 7110.6191 L-6231.4595 7108.1836 L-6247.1294 7101.4829 L-6252.8286 7101.4829 Lb0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6247.1294 7101.4829 m-6231.4595 7108.1836 L-6231.4595 7101.4829 L-6247.1294 7101.4829 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 44)0 Au1 Ap0 J 0 j 1 w 4 M []0 d1 XR-6266.6665 7111 m-6271 7111 L-6271 7107.3989 L-6266.6665 7107.3989 L-6266.6665 7111 Lnu0 Ap0 XR-6269.9702 7110.3359 m-6267.6963 7110.3359 L-6267.6963 7108.062 L-6269.9702 7108.062 L-6269.9702 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6267.6963 7109.1992 m-6267.6963 7109.8271 -6268.2056 7110.3359 -6268.8335 7110.3359 c-6269.4614 7110.3359 -6269.9702 7109.8271 -6269.9702 7109.1992 c-6269.9702 7108.5718 -6269.4614 7108.062 -6268.8335 7108.062 c-6268.2056 7108.062 -6267.6963 7108.5718 -6267.6963 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 47)0 Au0 Ap0 J 0 j 1 w 4 M []0 d1 XR-6264.6064 7111 m-6271 7111 L-6271 7107.3989 L-6264.6064 7107.3989 L-6264.6064 7111 Lnu0 XR-6268.9404 7110.3359 m-6266.6665 7110.3359 L-6266.6665 7108.062 L-6268.9404 7108.062 L-6268.9404 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6266.6665 7109.1992 m-6266.6665 7109.8271 -6267.1753 7110.3359 -6267.8032 7110.3359 c-6268.4312 7110.3359 -6268.9404 7109.8271 -6268.9404 7109.1992 c-6268.9404 7108.5718 -6268.4312 7108.062 -6267.8032 7108.062 c-6267.1753 7108.062 -6266.6665 7108.5718 -6266.6665 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 48)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6263.1465 7111 L-6263.1465 7102.5957 L-6271 7102.5957 L-6271 7111 Lnu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa3.86371 M-6270.1582 7102.5957 m-6269.6812 7102.5845 -6269.2842 7102.9595 -6269.2725 7103.4375 c-6269.2593 7103.9141 -6269.6357 7104.3101 -6270.1138 7104.3237 c-6270.5903 7104.3359 -6270.9878 7103.96 -6270.9995 7103.4824 c-6271.0122 7103.0054 -6270.6357 7102.6069 -6270.1582 7102.5957 cf-6270.1357 7103.46 mFUu-6270.1558 7104.8188 m-6269.6782 7104.8086 -6269.2813 7105.1846 -6269.2686 7105.6621 c-6269.2563 7106.1382 -6269.6333 7106.5356 -6270.1104 7106.5488 c-6270.5874 7106.5615 -6270.9849 7106.1846 -6270.9971 7105.7075 c-6271.0093 7105.23 -6270.6328 7104.8345 -6270.1558 7104.8188 cf-6270.1333 7105.6846 mFUu-6270.1523 7107.0469 m-6269.6753 7107.0342 -6269.2783 7107.4102 -6269.2661 7107.8877 c-6269.2539 7108.3638 -6269.6304 7108.7612 -6270.1074 7108.7744 c-6270.5845 7108.7871 -6270.9814 7108.4102 -6270.9937 7107.9326 c-6271.0068 7107.4561 -6270.6299 7107.0581 -6270.1523 7107.0469 cf-6270.1299 7107.9102 mFUu-6270.1499 7109.2725 m-6269.6724 7109.2588 -6269.2754 7109.6357 -6269.2627 7110.1133 c-6269.25 7110.5894 -6269.6274 7110.9863 -6270.1045 7111 c-6270.5815 7111.0127 -6270.9785 7110.6357 -6270.9912 7110.1582 c-6271.0029 7109.6816 -6270.6274 7109.2832 -6270.1499 7109.2725 cf-6270.1274 7110.1357 mFUu-6268.1538 7103.6665 m-6267.6763 7103.6533 -6267.2793 7104.0293 -6267.2666 7104.5068 c-6267.2539 7104.9829 -6267.6309 7105.3809 -6268.1084 7105.394 c-6268.5854 7105.4063 -6268.9824 7105.0293 -6268.9946 7104.5527 c-6269.0068 7104.0752 -6268.6304 7103.6768 -6268.1538 7103.6665 cf-6268.1304 7104.5293 mFUu-6268.1499 7105.8901 m-6267.6729 7105.8789 -6267.2764 7106.2549 -6267.2632 7106.7324 c-6267.2515 7107.21 -6267.6274 7107.6069 -6268.1055 7107.6191 c-6268.5825 7107.6318 -6268.9795 7107.2549 -6268.9917 7106.7773 c-6269.0039 7106.3008 -6268.6274 7105.9023 -6268.1499 7105.8901 cf-6268.1274 7106.7549 mFUu-6268.1475 7108.1157 m-6267.6699 7108.1045 -6267.2729 7108.4805 -6267.2607 7108.9595 c-6267.2485 7109.4341 -6267.6255 7109.8325 -6268.1025 7109.8447 c-6268.5791 7109.8574 -6268.9766 7109.4814 -6268.9888 7109.0029 c-6269.0015 7108.5264 -6268.6245 7108.1279 -6268.1475 7108.1157 cf-6268.1245 7108.9805 mFUu-6266.0723 7104.7119 m-6265.5952 7104.6997 -6265.1987 7105.0781 -6265.1865 7105.5532 c-6265.1738 7106.0303 -6265.5508 7106.4287 -6266.0273 7106.4414 c-6266.5054 7106.4541 -6266.9019 7106.0757 -6266.9141 7105.5996 c-6266.9272 7105.1235 -6266.5498 7104.7261 -6266.0723 7104.7119 cf-6266.0503 7105.5781 mFUu-6266.0698 7106.939 m-6265.5928 7106.9253 -6265.1953 7107.3013 -6265.1831 7107.7788 c-6265.1704 7108.2573 -6265.5474 7108.6543 -6266.0249 7108.6685 c-6266.5024 7108.6797 -6266.8994 7108.3013 -6266.9116 7107.8252 c-6266.9233 7107.3486 -6266.5469 7106.9512 -6266.0698 7106.939 cf-6266.0474 7107.8013 mFUu-6264.0332 7105.7822 m-6263.5557 7105.7695 -6263.1592 7106.147 -6263.1465 7106.6255 c-6263.1333 7107.1016 -6263.5103 7107.4985 -6263.9883 7107.5117 c-6264.4653 7107.5229 -6264.8618 7107.147 -6264.8745 7106.6685 c-6264.8862 7106.1909 -6264.5098 7105.7949 -6264.0332 7105.7822 cf-6264.0103 7106.647 mFUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Banner/ Adobe Patte) -(rnOnPath Brush Tool/ Arrow Brush Circles/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Arrow Brush Circles)(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -( 1 0 4 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(Black)Pc0 0.993988 1 0 1 0 0 Xa(RGB Red)Pc0.061982 0 0.965148 0 1 1 0 Xa(RGB Yellow)Pc0.627649 0 1 0 0 1 0 Xa(RGB Green)Pc0.517937 0 0.125399 0 0 1 1 Xa(RGB Cyan)Pc0.883665 0.769161 0 0 0 0 1 Xa(RGB Blue)Pc0.269902 0.816403 0 0 1 0 1 Xa(RGB Magenta)Pc0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0.000366 0.500664 0.985656 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0.000214 0.348486 0.871305 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.045136 0 0.931884 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188968 0.000397 0.98233 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501091 0.001373 0.990387 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.746151 0 0.99704 0.000092 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.761959 0 0.749783 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.6972 0.14847 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.875364 0.526451 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262516 0.245243 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.970001 0.204959 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.22855 0.274266 0.39942 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.362341 0.574029 0.840574 0.226139 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Fade To Edge Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Fade To Edge Black)PcBb0 0 0 0 Bh2 (Neon Rings Vignette) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Neon Rings Vignette)PcBb2 (Water) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Water)PcBb0 0 0 0 Bh2 (Pink Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Pink Radial)Pc(Diamond Cubes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Diamond Cubes)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(R=0 G=0 B=0)Pc0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.306798 0.242466 0.247654 0 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.193668 0.150057 0.155337 0 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.084596 0.061311 0.065766 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.037049 0.025086 0.025086 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.6318 0.219425 0 0 0.247059 0.662745 0.960784 Xa(R=63 G=169 B=245)Pc0.55407 0 0.965515 0 0.478431 0.788235 0.262745 Xa(R=122 G=201 B=67)Pc0 0.508354 0.961639 0 1 0.576471 0.117647 Xa(R=255 G=147 B=30)Pc0 0.965057 0.900572 0 1 0.113725 0.145098 Xa(R=255 G=29 B=37)Pc0 0.661738 0.032776 0 1 0.482353 0.67451 Xa(R=255 G=123 B=172)Pc0.253758 0.127169 0.116762 0 0.741176 0.8 0.831373 Xa(R=189 G=204 B=212)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 4 255 255 79 0 50 Lb(Layer 5) Ln0 Au0 O0.706355 0.476051 0 0 0.247059 0.52549 1 Xa0 J 0 j 1 w 10 M []0 d0 XR841.771 -1 m841.4824 -2.09668 841.2021 -3.19971 840.8882 -4.27832 c839.2666 -9.84863 835.5796 -14.9263 832.8047 -19.9849 c829.8076 -25.4487 826.499 -30.689 821.4297 -34.4639 c816.29 -38.2905 810.4097 -41.0762 805.0391 -44.5571 c802.2866 -46.3408 799.8652 -48.5732 797.041 -50.2412 c794.2188 -51.9082 790.8838 -52.7612 787.8057 -53.8208 c781.3193 -56.0527 776.1196 -58.2417 769.146 -58.3794 c762.375 -58.5132 754.96 -59.6777 748.4614 -57.4268 c746.9141 -56.8906 745.5425 -56.9409 744.3906 -57.3813 C739.8408 -54.4526 732.2178 -57.876 734.4746 -64.2246 c735.7695 -67.8682 737.4243 -71.3652 738.8267 -74.9668 c740.0186 -78.0269 739.0352 -83.2026 739.0352 -86.46 c739.0352 -91.3408 738.1865 -96.1025 737.1968 -100.8643 c736.105 -106.1167 735.1406 -111.6211 732.6182 -116.3892 c723.6567 -133.3281 704.1201 -142.5781 687.29 -149.5132 c668.4531 -157.2754 647.4995 -164.7651 626.915 -165.0308 c616.958 -165.1592 607.1011 -165.2544 597.2681 -163.5127 c594.1709 -162.9644 583.8975 -161.3916 582.8594 -157.8208 c580.6011 -150.0508 568.791 -152.9971 570.1426 -160.5 C569.3848 -161.4839 568.9102 -162.7637 568.8936 -164.3403 c568.8096 -172.3081 567.6328 -180.7139 563.6016 -187.7358 c562.167 -190.2349 558.9663 -191.6191 556.5352 -192.8745 c552.7632 -194.8223 549.3862 -197.0298 545.3071 -198.3696 c537.2324 -201.022 527.0947 -197.9932 519.2095 -196.0142 c515.3687 -195.0503 511.5688 -193.9756 507.9819 -192.2778 c505.1201 -190.9233 502.5684 -189.0791 499.8413 -187.4927 C499.6553 -187.2148 499.4429 -186.9575 499.2124 -186.7158 C499.0601 -178.7285 486.478 -178.8789 486.2192 -187.1069 c486.0347 -192.9731 484.4556 -199.3296 481.9893 -204.6426 c480.7227 -207.3711 480.3418 -210.209 480.2354 -213.1909 c480.1147 -216.5752 475.9688 -220.6099 474.4097 -223.4888 c471.4644 -228.9282 465.5664 -232.8442 460.8574 -236.6279 c454.8945 -241.4194 448.7949 -245.9346 442.9609 -250.9194 c431.9453 -260.3311 420.2744 -267.9189 406.5195 -272.499 c391.8574 -277.3813 376.6938 -279.0649 361.8252 -282.9883 c354.73 -284.8604 348.1001 -287.2109 340.7349 -287.8975 c332.5127 -288.6641 324.2451 -288.2598 316.0068 -288.5928 c309.2271 -288.8667 303.0269 -288.1597 296.5767 -286.0239 c293.521 -285.0122 290.5264 -284.7021 287.561 -283.3398 c284.3428 -281.8604 281.458 -280.2681 277.9297 -279.6206 c271.6167 -278.4624 265.271 -279.689 259.4033 -276.6294 c254.0518 -273.8389 248.3535 -273.5322 243.1841 -270.1602 c237.7988 -266.6465 232.5425 -262.4404 228.3428 -257.584 c223.9346 -252.4868 218.5962 -247.8862 214.6138 -242.439 c212.5396 -239.6016 209.772 -237.4219 208.3726 -234.1499 c206.959 -230.8467 204.0864 -230.1919 201.5273 -231.1187 C198.7207 -229.5796 194.772 -229.6812 192.3545 -232.9517 c188.7461 -237.834 182.1675 -240.6689 177.2695 -244.0894 c172.605 -247.3467 167.3223 -247.8867 161.8174 -247.6431 c156.3086 -247.3989 150.3608 -243.2998 145.856 -240.4814 c140.5161 -237.1406 135.9043 -232.7681 130.5557 -229.4214 c127.8608 -227.7358 125.2549 -228.2959 123.4365 -229.8828 C120.8291 -229.8369 118.2676 -231.2246 117.4126 -234.5044 c116.4077 -238.3584 112.5674 -241.25 109.5068 -243.6089 c104.6157 -247.3784 99.9414 -251.063 94.7979 -254.4702 c89.5088 -257.9741 84.085 -261.2686 78.6484 -264.5366 c74.3174 -267.1401 67.6812 -271.6685 62.4844 -271.6685 c51.6621 -271.6685 40.6392 -273.3062 29.9668 -275.1694 c26.9644 -275.6938 24.3218 -276.3892 21.2358 -276.4561 c18.1997 -276.5215 15.6108 -275.2842 12.7793 -274.2969 c11.5762 -273.8774 10.3062 -273.5776 9 -273.3569 C9 -287.0747 L10.6362 -287.4312 12.2837 -287.8887 13.9663 -288.4805 c20.229 -290.6836 27.1953 -289.0835 33.4229 -287.7051 c39.6665 -286.3232 46.2026 -286.4219 52.4688 -285.0352 c58.5317 -283.6938 64.3188 -285.1392 70.3765 -282.9941 c83.0303 -278.5132 94.3135 -270.1133 105.6118 -263.0869 c110.9448 -259.7705 115.8735 -255.2373 120.5659 -251.0908 c123.4229 -248.5664 125.9365 -246.1382 127.7554 -243.1216 C139.2598 -251.0068 149.8911 -260.7334 164.7769 -260.7017 c172.106 -260.6865 179.084 -258.6299 185.1162 -254.417 c189.9678 -251.0288 194.9282 -248.2041 199.1729 -244.3433 C201.7476 -248.1406 205.3926 -251.5356 208.3184 -254.7964 c212.9072 -259.9116 217.438 -265.0747 222.1206 -270.1045 c226.3862 -274.686 232.5479 -278.7271 237.7813 -282.1411 c242.9336 -285.502 248.9028 -285.8003 254.1484 -288.5356 c260.1338 -291.6567 266.5137 -291.7656 273.0996 -292.085 c276.0986 -292.23 278.3501 -293.2813 281 -294.5645 c284.4897 -296.2549 287.8354 -297.2593 291.5801 -298.0918 c298.0703 -299.5337 303.9839 -301.6328 310.7456 -301.7427 c318.7607 -301.8726 326.9155 -301.5425 334.9282 -301.2559 c350.2339 -300.7085 364.5171 -295.5649 379.4219 -292.584 c394.188 -289.6309 409.0054 -286.5195 422.7988 -280.2617 c435.7168 -274.4009 447.0317 -264.5244 457.6836 -255.3472 c462.9048 -250.8491 468.6333 -246.9907 473.9912 -242.6426 c479.5933 -238.0962 483.4229 -233.1348 487.3735 -227.189 c489.3188 -224.2607 491.1631 -221.2344 492.4131 -217.9336 c493.6694 -214.6157 492.853 -211.4907 494.7373 -208.3604 c496.0371 -206.2002 496.605 -203.1855 497.1553 -200.4834 C500.0972 -202.2549 502.9229 -204.2563 506.1685 -205.4917 c510.9136 -207.2979 515.8438 -208.5664 520.7642 -209.793 c530.708 -212.272 542.1689 -213.4409 551.9155 -209.7695 c556.2998 -208.1177 560.1523 -205.6079 564.2852 -203.4736 c568.0337 -201.5381 571.5513 -198.9233 574.0044 -195.4546 c578.6104 -188.9419 580.686 -180.4985 581.4805 -172.311 C583.4077 -173.1528 585.4126 -173.8491 587.3706 -174.4639 c597.3184 -177.5864 607.8843 -178.0308 618.229 -178.0308 c630.3242 -178.0308 641.7207 -177.0693 653.5166 -174.2612 c665.6479 -171.373 677.4893 -167.3857 689.0576 -162.7354 c709.9917 -154.3193 730.5688 -143.9487 743.0601 -124.2939 c749.1914 -114.646 750.978 -101.064 751.9131 -89.876 c752.3379 -84.79 752.0352 -79.5806 752.0352 -74.478 c752.0352 -73.4624 751.8496 -72.4209 751.5547 -71.3701 C756.2847 -71.8687 761.0869 -71.4629 765.9043 -71.3926 c773.5142 -71.2817 780.8931 -70.9658 787.915 -67.6782 c795.2471 -64.2451 802.3545 -62.7021 808.9106 -57.6655 c814.8696 -53.0879 821.8359 -49.9868 827.9912 -45.689 c834.1772 -41.3691 838.6807 -35.6694 842.5088 -29.2324 c846.123 -23.1558 849.7534 -16.875 852.4966 -10.3613 c853.7402 -7.40771 854.5776 -4.23633 855.2334 -1 C841.771 -1 Lf*u1 D1544.8154 -153.4873 m1541.6714 -150.0962 1536.3232 -150.0742 1532.1631 -148.9985 c1528.4243 -148.0317 1524.4658 -148.1299 1520.5479 -148.2129 C1521.2271 -147.7954 1521.9082 -147.3838 1522.583 -146.9487 c1525.7041 -144.937 1528.6904 -142.5654 1531.7217 -140.3989 c1535.4043 -137.7671 1536.7451 -134.8438 1538.4063 -130.7231 c1541.6567 -122.6567 1540.9131 -114.9937 1535.248 -108.0459 c1530.0103 -101.6226 1521.458 -98.103 1513.7061 -95.7817 c1504.5103 -93.0283 1495.8853 -94.7476 1487.9131 -99.8477 c1482.7759 -103.1343 1477.8994 -107.418 1473.8696 -112.2158 C1472.3359 -108.7168 1470.0322 -105.6187 1468.1455 -102.2979 c1466.0254 -98.5654 1462.3574 -95.9712 1459.1133 -93.3125 c1454.5786 -89.5962 1450.4556 -86.9497 1444.4717 -86.2661 c1434.501 -85.1274 1424.2559 -85.415 1416.7598 -92.7407 c1401.8276 -107.3345 1410.4766 -130.8779 1420.4922 -145.3496 c1422.5791 -148.3652 1424.7822 -150.9443 1427.8066 -152.6792 C1423.2559 -152.6328 1418.7339 -153.0723 1414.7993 -154.4087 c1406.9111 -157.0874 1398.1499 -164.8882 1393.1099 -171.3408 c1390.3276 -174.9028 1387.4526 -178.4106 1385.7012 -182.5879 c1385.041 -184.1616 1385.0176 -186.1504 1384.8921 -187.8218 c1384.7261 -190.0327 1384.1455 -192.0732 1383.8027 -194.2656 c1383.147 -198.4595 1383.7178 -202.2271 1385.7402 -205.9639 c1387.6616 -209.5146 1392.7061 -211.1377 1396.1924 -212.5015 c1405.2427 -216.041 1415.2236 -213.4746 1423.6743 -209.3047 c1428.7217 -206.814 1433.2832 -203.2163 1437.5752 -199.3608 C1437.5752 -199.3994 1437.5723 -199.4365 1437.5723 -199.4751 c1437.5723 -209.3853 1436.6758 -219.0264 1442.3535 -227.6807 c1447.3652 -235.3193 1455.1519 -242.3418 1464.5464 -242.7251 c1484.3896 -243.5347 1491.605 -221.0059 1493.3901 -205.0889 c1493.7764 -201.6455 1493.2192 -198.2349 1492.1367 -194.9238 C1492.9746 -195.271 1493.8135 -195.6191 1494.6646 -195.9648 c1499.5752 -197.9604 1503.8472 -198.3882 1509.0845 -198.6211 c1526.5068 -199.3965 1543.6958 -190.3071 1548.0527 -172.5737 c1549.6489 -166.0767 1549.5859 -158.6323 1544.8154 -153.4873 cf0 D1474.6245 -144.5713 m1474.8125 -140.7681 1475.2637 -136.9775 1475.6025 -133.1685 C1477.0444 -130.6548 1478.6694 -128.2412 1479.9331 -126.0308 c1482.9697 -120.7173 1487.4263 -116.7007 1492.0801 -112.8091 c1496.9854 -108.7075 1502.2935 -106.5869 1508.6245 -107.9023 c1514.3799 -109.0977 1521.0986 -111.854 1525.188 -116.1748 c1534.5176 -126.0317 1516.5967 -135.5103 1509.9307 -139.5137 c1503.8188 -143.1841 1497.4521 -146.021 1490.9702 -148.9243 c1487.1768 -150.6235 1483.5459 -152.7139 1479.6743 -154.0664 C1477.7822 -154.438 1475.8931 -154.8774 1473.9878 -155.3672 C1473.605 -155.4033 1473.2188 -155.4312 1472.8286 -155.4453 c1472.7559 -155.4478 1472.6885 -155.459 1472.6167 -155.4634 C1473.2891 -151.8315 1474.4399 -148.3037 1474.6245 -144.5713 cf1446.8467 -169.4478 m1444.8735 -172.4761 1443.2388 -176.5552 1440.4653 -178.9155 c1434.437 -184.0464 1428.895 -189.5508 1422.7017 -194.4927 c1419.6436 -196.9326 1416.1924 -198.7319 1412.4922 -199.9653 c1410.9492 -200.4795 1409.2871 -200.856 1407.6729 -201.0566 c1406.5566 -201.1665 1405.438 -201.2153 1404.3169 -201.2036 C1402.6382 -200.9487 1402.1943 -200.9883 1402.9756 -201.3198 C1401.3447 -200.7251 1396.9102 -199.5957 1396.5156 -198.4077 c1395.6553 -195.813 1397.8486 -191.9082 1397.8574 -189.1875 c1397.8682 -185.8252 1399.6509 -184.5557 1401.4604 -181.853 c1403.6836 -178.5327 1406.4404 -176.3589 1409.2783 -173.6348 c1412.0308 -170.9917 1415.3271 -168.7891 1418.5981 -166.8447 c1421.0508 -165.3862 1425.1787 -166.0483 1427.8633 -166.0498 c1434.6621 -166.0547 1440.8535 -167.208 1447.4922 -168.3462 c1447.5479 -168.356 1447.6055 -168.3643 1447.6611 -168.374 C1447.3652 -168.7261 1447.085 -169.082 1446.8467 -169.4478 cf1444.5586 -144.8325 m1441.5669 -143.4893 1435.6992 -143.2554 1433.4521 -140.8896 c1430.6699 -137.9604 1429.3711 -134.3984 1427.3486 -131.0195 c1423.1113 -123.9419 1420.6606 -116.9814 1422.5156 -108.6899 c1423.2891 -105.2339 1425.1543 -102.1792 1428.0371 -100.0928 c1430.876 -98.0386 1436.4185 -98.9453 1439.6787 -98.9556 c1447.3096 -98.979 1454.521 -104.5845 1458.2104 -111.1401 c1460.001 -114.3213 1462.0752 -116.8062 1462.8604 -120.4731 c1463.458 -123.2656 1463.2046 -126.438 1462.9795 -129.4443 C1460.9219 -133.7134 1459.3916 -138.186 1459.1396 -142.7744 c1459.0313 -144.7441 1459.6729 -146.2422 1460.7144 -147.2832 C1460.5469 -148.1885 1460.3818 -149.0942 1460.2256 -150.001 C1454.7939 -147.7466 1448.3159 -146.5195 1444.5586 -144.8325 cf1476.9521 -219.5566 m1474.9902 -224.1929 1471.0776 -229.5684 1465.6396 -229.7319 c1460.5762 -229.8843 1456.4043 -224.9683 1453.5791 -221.1196 c1449.3926 -215.4175 1450.5723 -208.1074 1450.5723 -201.4404 c1450.5723 -197.5161 1450.7827 -194.6509 1452.5791 -191.123 c1454.1851 -187.9683 1456.2324 -185.02 1458.0723 -182.0005 c1459.0967 -180.3193 1459.3916 -178.0215 1459.9063 -176.1479 c1460.064 -175.5757 1460.2388 -174.9873 1460.4409 -174.4146 C1461.0664 -174.8481 1461.8154 -175.1924 1462.7134 -175.4019 c1463.6357 -175.6172 1464.4868 -176.0059 1465.2813 -176.5083 C1465.3086 -176.6235 1465.3286 -176.7358 1465.3623 -176.853 c1466.6963 -181.5044 1469.8545 -184.7344 1473.6987 -187.1177 C1476.6431 -191.6865 1479.814 -196.7798 1480.396 -202.106 c1480.9697 -207.3589 1479 -214.7188 1476.9521 -219.5566 cf1535.5171 -169.1177 m1533.1104 -180.6631 1521.6616 -185.8242 1510.7227 -185.6768 c1507.5542 -185.6343 1504.3413 -185.6553 1501.3159 -184.6685 c1497.5342 -183.4355 1493.9707 -180.4717 1490.1328 -179.6411 c1488.3975 -179.2656 1485.6147 -178.7041 1483.1265 -177.7329 C1481.0142 -174.4087 1478.5835 -171.0288 1475.6733 -168.2891 C1475.9941 -168.2251 1476.2881 -168.1587 1476.5513 -168.0874 C1478.9121 -167.73 1481.1724 -167.1392 1483.376 -166.3862 C1484.6377 -166.1436 1485.9106 -165.9526 1487.2065 -165.8428 c1494.8066 -165.1997 1502.0732 -162.5059 1509.6318 -161.5469 c1515.9063 -160.751 1524.0649 -160.3335 1530.166 -161.9111 c1531.8145 -162.3374 1533.543 -162.5522 1535.209 -162.9097 c1535.4404 -162.9595 1535.6206 -162.9961 1535.7739 -163.0264 C1536.3784 -164.9341 1535.9126 -167.2217 1535.5171 -169.1177 cf*U2790.1357 -316.5107 m2790.1357 -310.2671 2786.0107 -303.7295 2784.793 -297.6084 c2783.6514 -291.8721 2779.9932 -287.0215 2776.8965 -282.2222 c2773.9561 -277.6631 2771.7373 -271.8677 2767.7129 -268.1812 c2762.9727 -263.8384 2760.3984 -257.5425 2756.6787 -252.2598 c2752.9141 -246.9116 2749.3418 -241.8359 2743.8867 -238.0503 c2741.7402 -236.561 2738.5508 -235.8354 2736.6865 -234.0806 c2734.3047 -231.8398 2731.4531 -230.0371 2728.6553 -228.3735 c2723.0703 -225.0518 2717.2705 -221.4897 2710.8896 -220.019 c2704.1484 -218.4653 2697.0293 -219.0249 2690.1973 -218.0107 c2675.7012 -215.8589 2660.0889 -214.1743 2645.916 -218.9561 c2634.5449 -222.7925 2624.1758 -229.3301 2615.3086 -237.3779 C2614.7363 -235.5229 2614.1074 -233.6719 2613.4609 -231.7979 c2611.6123 -226.4429 2611.0938 -220.7915 2608.959 -215.5259 c2606.6758 -209.8887 2603.209 -204.9692 2600.8535 -199.3584 c2598.7773 -194.4111 2595.8389 -189.876 2591.7031 -186.3687 c2587.4639 -182.7729 2581.7842 -181.7544 2576.8857 -179.313 c2571.6914 -176.7246 2567.4697 -173.4043 2561.8818 -171.5649 c2556.4355 -169.772 2551.0322 -167.7017 2545.4004 -166.7036 c2538.2285 -165.4331 2530.9648 -165.0547 2523.7402 -164.2451 c2509.209 -162.6172 2495.1797 -165.3394 2480.8242 -166.9912 c2474.3887 -167.7319 2467.7285 -167.7637 2461.5059 -169.7017 c2455.6133 -171.5366 2449.6758 -173.2007 2443.792 -175.0405 c2431.8057 -178.7876 2421.0332 -186.1143 2410.8652 -193.2637 c2404.7861 -197.5391 2398.1787 -202.8677 2394.4014 -209.5405 C2390.665 -205.4458 2385.4902 -202.3848 2380.7754 -199.1094 c2371.9053 -192.9458 2360.6631 -189.231 2349.8955 -188.9946 c2329.3281 -188.5435 2306.2734 -187.6001 2288.2773 -199.1416 c2279.376 -204.8516 2271.6191 -212.4907 2263.7041 -219.4512 c2254.9092 -227.1855 2246.958 -235.8496 2240.083 -245.332 c2233.4414 -254.4907 2226.6387 -263.5479 2220.1152 -272.8145 c2216.9561 -277.3027 2214.7637 -282.4019 2211.6465 -286.8721 c2210.5996 -288.3735 2209.6484 -289.7983 2208.8115 -291.2363 C2207.4336 -288.9131 2205.9053 -286.6621 2204.5371 -284.4736 c2203.0898 -282.1577 2201.5107 -280.0474 2199.7109 -277.9824 c2197.8359 -275.8301 2197.5273 -273.6519 2196.1504 -271.2939 c2193.4053 -266.5918 2189.1426 -263.6484 2184.3828 -261.2114 c2178.9512 -258.4307 2173.7539 -255.4238 2167.6982 -254.1968 c2161.9316 -253.0283 2155.5283 -253.6538 2149.6992 -254.0117 c2142.9551 -254.4263 2136.418 -255.6938 2130.0596 -257.9653 c2122.1963 -260.7749 2113.5566 -266.7046 2107.8535 -273.8418 C2105.1475 -270.1108 2102.3428 -266.436 2099.6924 -262.7148 c2095.2715 -256.5068 2089.8965 -251.5024 2083.709 -247.0957 c2080.9268 -245.1152 2077.3535 -243.5225 2074.2764 -241.9839 c2070.6602 -240.1758 2066.3008 -240.1191 2062.333 -239.6289 c2053.5459 -238.5439 2044.8262 -238.123 2035.9727 -238.1201 c2027.3701 -238.1172 2018.6465 -238.1089 2010.3701 -240.6602 c2002.1367 -243.1978 1994.0049 -245.1563 1986.1182 -248.7139 c1978.2383 -252.2686 1966.5586 -257.3408 1960.4111 -265.2139 C1960.4082 -265.2129 1960.4063 -265.2114 1960.4033 -265.2104 C1960.3994 -265.209 L1959.75 -264.4995 1959.2285 -263.7974 1958.4717 -263.189 c1957.2988 -262.2466 1956.2295 -261.7661 1954.8486 -261.2178 c1949.6699 -259.1611 1957.6533 -262.541 1952.541 -260.5244 c1950.4971 -259.7178 1948.4854 -259.1616 1946.3877 -258.8174 C1940.3799 -254.582 1932.9668 -255.895 1925.7402 -256.0928 c1921.2783 -256.2148 1916.9902 -256.3384 1912.5781 -257.1279 c1907.2246 -258.0854 1901.6475 -260.5117 1896.4541 -262.2007 c1892.4375 -263.5078 1888.3457 -264.5254 1884.3364 -265.8638 c1880.0952 -267.2793 1876.4922 -269.7749 1872.5371 -271.7612 c1863.4116 -276.3442 1854.7163 -281.3882 1846.8569 -287.9512 c1839.9033 -293.7578 1835.4814 -301.4067 1830.4746 -308.8369 c1827.7583 -312.8682 1826.3716 -317.4502 1824.5474 -321.9023 c1822.6006 -326.6533 1820.9937 -331.5264 1819.7607 -336.5093 c1817.6577 -345.0093 1816.292 -353.4048 1816.2036 -362.1743 c1816.1582 -366.6704 1816.6758 -370.957 1817.208 -375.4087 c1817.481 -377.6934 1817.5415 -379.9282 1817.6611 -382.1509 C1802.0059 -386.5527 1786.5464 -393.064 1773.1367 -402.2246 c1766.1963 -406.9663 1759.9023 -412.6245 1753.3569 -417.8682 c1747.5732 -422.5015 1741.4619 -426.0586 1737.2236 -430.6841 c1731.8472 -436.5518 1726.7749 -442.4209 1723.626 -449.8223 c1722.0278 -453.5796 1720.3213 -457.2471 1718.9155 -461.0898 c1717.5396 -464.8516 1716.8374 -469.3862 1715.0674 -472.9316 c1711.8369 -479.4023 1703.3853 -494.3848 1712.7783 -499.4541 c1719.0127 -502.8184 1724.6646 -495.3237 1721.8125 -490.5171 C1721.9902 -489.8296 1722.2012 -489.1489 1722.416 -488.4761 c1722.9678 -486.75 1723.6763 -485.0796 1724.417 -483.4282 c1726.4707 -478.8467 1728.1743 -474.3389 1729.7417 -469.5449 c1731.9009 -462.9395 1734.3848 -456.3472 1737.8833 -450.3237 c1741.1572 -444.6875 1746.5928 -441.0186 1750.4277 -436.0151 c1752.123 -433.8032 1755.3794 -432.6108 1757.6816 -431.1572 c1760.3105 -429.498 1762.6729 -426.9766 1765.0928 -425.0063 c1770.832 -420.332 1776.4604 -415.4897 1782.6875 -411.4624 c1794.8584 -403.5918 1808.5962 -398.0957 1822.5557 -394.2832 C1826.9561 -395.9219 1833.0898 -392.5225 1831.3613 -386.6733 c1830.1099 -382.4395 1830.5361 -378.1543 1830.0156 -373.8032 c1829.481 -369.3291 1829.1748 -365.0425 1829.2202 -360.5273 c1829.3066 -351.9399 1831.1758 -343.4854 1833.562 -335.2612 c1836.3525 -325.6436 1840.2935 -317.0151 1846.2822 -309.0078 c1848.8081 -305.6299 1850.4214 -302.2217 1853.5542 -299.2158 c1856.9639 -295.9434 1861.0156 -293.2417 1864.9922 -290.7188 c1869.0171 -288.165 1873.2651 -285.9634 1877.5049 -283.793 c1881.4155 -281.791 1885.0845 -279.3032 1889.2627 -277.9087 c1893.3706 -276.5376 1897.582 -275.4941 1901.7075 -274.1519 c1906.3989 -272.6255 1911.2393 -270.7495 1916.0342 -269.6631 c1920.3438 -268.687 1924.9365 -269.2178 1929.3164 -268.9243 c1931.5615 -268.7739 1933.7646 -268.5571 1936.0186 -268.5874 C1936.8223 -268.8076 1937.6406 -268.9473 1938.4678 -269.0361 C1938.584 -269.1538 1938.7949 -269.3335 1939.1172 -269.5854 C1940.7939 -271.2188 1942.5479 -271.2183 1944.6924 -271.6123 c1946.7295 -271.9863 1948.4189 -273.1162 1950.373 -273.6533 C1950.4561 -273.6699 1950.5283 -273.6841 1950.6055 -273.6992 C1950.8281 -273.959 1951.0596 -274.2119 1951.2754 -274.478 c1951.9375 -275.3105 1952.7168 -276.0151 1953.6123 -276.5928 C1955.3506 -277.6108 1955.6816 -277.6802 1955.499 -277.2939 C1956.0742 -277.9556 1956.7539 -278.4561 1957.4902 -278.8174 C1960.5439 -282.4727 1968.6621 -281.0161 1969.3838 -274.5747 c1969.2061 -276.1577 1969.9248 -274.3149 1970.3242 -273.8589 c1971.1504 -272.918 1972.1172 -272.0923 1973.0508 -271.2627 c1974.7461 -269.7544 1976.5811 -268.4033 1978.3447 -266.978 c1980.5254 -265.2148 1983.8252 -264.1753 1986.373 -262.9277 c1989.4424 -261.4243 1992.54 -259.9824 1995.6699 -258.6084 c2008.9404 -252.7827 2023.3594 -251.1162 2037.6523 -251.1206 c2050.7979 -251.125 2065.9268 -250.6787 2077.1475 -258.3208 c2081.9434 -261.5869 2086.0156 -265.8325 2089.3701 -270.5439 c2093.6406 -276.5405 2098.3467 -282.3984 2102.251 -288.6392 c2104.5068 -292.2456 2108.5254 -292.3247 2111.3438 -290.5972 C2112.6816 -290.1865 2113.8828 -289.1929 2114.6738 -287.4409 c2118.1484 -279.7461 2126.875 -272.8735 2134.7539 -270.0586 c2139.6191 -268.3208 2144.5596 -267.417 2149.6992 -267.0117 c2154.8203 -266.6084 2160.7383 -266.0225 2165.792 -267.0464 c2170.1475 -267.9292 2173.8926 -270.5024 2177.8213 -272.4365 c2179.8389 -273.4297 2181.8535 -274.4961 2183.5449 -275.9883 c2185.0518 -277.3169 2185.498 -279.9956 2186.4043 -281.7681 c2188.168 -285.2173 2191.4209 -287.6606 2193.3125 -291.0352 c2194.6738 -293.4639 2196.0586 -295.9092 2197.4863 -298.3008 C2198.0713 -299.1763 2198.6953 -300.0225 2199.3594 -300.8394 C2198.0313 -299.3223 2199.6846 -302.0371 2199.8467 -302.6626 c2201.0254 -307.208 2205.4824 -308.1226 2208.8018 -306.6191 C2212.5156 -308.2393 2218.166 -306.3291 2218.6055 -300.9346 c2218.9102 -297.186 2222.7441 -294.1196 2224.3906 -290.8984 c2226.4326 -286.9033 2228.8262 -283.0864 2231.3408 -279.3755 c2236.9893 -271.04 2243.6611 -263.4507 2249.1807 -255.0454 c2259.6357 -239.1255 2274.8115 -226.2637 2289.4502 -214.2988 c2304.1836 -202.2573 2322.2266 -201.832 2340.4395 -201.9336 c2349.2637 -201.9824 2357.3105 -201.9956 2365.5439 -205.6377 c2369.5791 -207.4224 2373.2852 -209.6641 2376.8799 -212.2017 c2379.3477 -213.9434 2386.2002 -217.1855 2386.5303 -220.6567 c2387.0947 -226.5928 2393.9541 -228.3066 2397.4883 -225.7153 C2400.7148 -225.6753 2404.0498 -223.585 2404.3223 -219.4585 c2404.5586 -215.8765 2408.0156 -213.1992 2409.9795 -210.459 c2412.832 -206.4771 2418.7129 -203.6216 2422.6465 -200.8081 c2431.5137 -194.4668 2441.6211 -188.7515 2452.2715 -186.186 c2457.0996 -185.0234 2461.6748 -183.2607 2466.4082 -181.7866 c2472.0996 -180.0142 2478.6602 -180.3115 2484.5557 -179.5283 c2497.707 -177.7813 2510.4336 -176.0293 2523.7402 -177.2451 c2529.1973 -177.7441 2534.7461 -178.123 2540.1699 -178.9458 c2545.5488 -179.7622 2550.2744 -181.6299 2555.4531 -183.1909 c2560.1201 -184.5977 2563.4336 -186.5464 2567.5732 -189.0347 c2572.0908 -191.75 2577.0439 -193.0986 2581.7578 -195.2476 c2585.2324 -196.8311 2587.5996 -201.103 2588.9883 -204.4116 c2591.1836 -209.6411 2594.166 -214.2837 2596.5674 -219.3779 c2598.6748 -223.8491 2598.9814 -228.9844 2600.4063 -233.6768 c2601.9922 -238.9033 2604.3945 -243.8735 2604.5986 -249.4126 c2604.8848 -257.1641 2616.084 -257.7461 2617.459 -251.0977 C2618.8926 -251.0688 2620.3672 -250.5078 2621.6855 -249.2163 c2629.998 -241.0742 2639.8145 -234.7163 2650.8682 -230.9868 c2663.3057 -226.7905 2677.9365 -229.2036 2690.5703 -231.1216 c2696.1777 -231.9727 2701.8652 -231.5723 2707.4336 -232.5547 c2713.124 -233.5591 2718.6016 -237.522 2723.5039 -240.437 c2725.7891 -241.7964 2727.6992 -244.3364 2730.0313 -245.4399 c2732.415 -246.5669 2735.0947 -247.458 2737.1035 -249.2163 c2741.7129 -253.252 2744.9814 -257.9409 2748.3379 -263.0747 c2751.3223 -267.6382 2753.208 -272.9102 2757.4277 -276.4639 c2759.2607 -278.0073 2760.1289 -279.1694 2761.1055 -281.3447 c2762.3438 -284.1016 2764.1055 -286.2451 2765.6719 -288.7837 c2768.1719 -292.8345 2771.0117 -296.3945 2772.2568 -301.0645 c2772.9531 -303.6753 2773.5938 -306.2573 2774.4346 -308.8354 c2775.3809 -311.7329 2777.1357 -315.1313 2777.1357 -318.2192 c2777.1357 -329.7227 2778.5215 -341.3135 2779.8457 -352.7573 c2780.627 -359.502 2780.958 -366.0728 2780.1309 -372.8252 c2779.7617 -375.8398 2779.6543 -378.708 2778.5664 -381.5703 c2777.667 -383.9346 2776.9619 -388.0161 2775.627 -389.9136 c2770.7891 -396.7876 2782.0684 -403.2729 2786.8516 -396.4751 c2788.6602 -393.9043 2788.8076 -390.9263 2789.9033 -388.0435 c2791.1729 -384.7065 2792.4805 -381.8389 2792.584 -378.2168 c2792.7969 -370.7793 2793.9082 -363.876 2793.2305 -356.3711 c2792.0293 -343.0659 2790.1357 -329.8545 2790.1357 -316.5107 cf3353.4375 -273.0996 m3348.9756 -274.604 3344.5537 -276.1689 3339.9473 -277.1826 c3335.2324 -278.2207 3330.0039 -277.6802 3325.2119 -277.5718 c3314.4639 -277.3291 3303.6445 -275.2129 3293.3906 -272.0073 c3285.8086 -269.6367 3278.2773 -264.6704 3274.0244 -257.8779 c3268.7188 -249.4038 3266.8125 -241.1514 3267.0859 -231.2583 c3267.2109 -226.7666 3268.3984 -223.2578 3269.6152 -219.0112 c3270.8359 -214.75 3271.7686 -210.6445 3273.3467 -206.4839 c3276.8887 -197.1426 3281.2617 -188.1172 3286.4912 -179.605 c3291.9375 -170.7422 3297.2383 -162.915 3305.6191 -156.5581 c3309.4492 -153.6528 3313.1016 -150.478 3317.0615 -147.7534 c3319.9199 -145.7866 3324.043 -142.2876 3327.6084 -142.0864 c3330.0625 -141.9478 3331.791 -140.7197 3332.8047 -139.0723 C3334.4629 -138.1777 3335.8135 -136.5874 3336.2725 -134.918 c3336.9609 -132.417 3336.1602 -130.311 3334.5859 -128.7759 C3334.0098 -127.355 3333.373 -126.4307 3331.6279 -124.9551 c3329.7705 -123.3853 3328.0586 -121.1294 3326.2881 -119.4014 c3324.0088 -117.1763 3322.4033 -114.1763 3320.2227 -111.8193 c3317.7725 -109.1724 3315.083 -106.8237 3313.4512 -103.5439 c3312.0938 -100.8159 3311.3994 -97.7012 3309.6475 -95.2129 c3307.876 -92.6958 3306.9033 -89.8423 3306.1152 -86.9009 c3305.2344 -83.6177 3305.3848 -80.2388 3305.2461 -76.8755 c3305.0635 -72.4595 3304.8652 -68.4653 3306.3174 -64.2256 c3307.4346 -60.9653 3307.9092 -57.4541 3309.0977 -54.1606 c3310.3193 -50.7744 3311.749 -47.4619 3313.0273 -44.0962 c3315.7578 -36.9097 3316.8115 -29.5278 3320.1504 -22.4844 c3323.542 -15.3276 3326.9824 -8.32422 3331.043 -1.51221 c3331.1455 -1.33984 3331.2578 -1.1709 3331.3652 -1 C3316.084 -1 L3313.7852 -5.40723 3311.8223 -10.0425 3309.6787 -14.374 c3307.8975 -17.9722 3306.2871 -21.6445 3304.8418 -25.3896 c3303.3438 -29.2754 3302.8584 -33.3398 3301.6602 -37.2852 c3299.2471 -45.231 3295.1895 -52.5093 3293.7822 -60.7695 c3293.1582 -64.4277 3292.1387 -67.6865 3292.0518 -71.4839 c3291.96 -75.5352 3292.2148 -79.7393 3292.5176 -83.7793 c3292.8037 -87.6011 3293.7012 -91.3286 3295.0273 -94.9116 c3296.292 -98.3291 3298.4629 -101.2485 3299.7734 -104.6084 c3302.5771 -111.7988 3307.1133 -116.7798 3312.2754 -122.3574 c3314.7734 -125.0566 3316.9785 -128.2485 3319.4766 -131.1021 C3313.0596 -133.8281 3307.2578 -138.7949 3302.0928 -142.9849 c3297.7129 -146.5391 3293.0928 -149.71 3289.0527 -153.6719 c3284.7676 -157.873 3281.2949 -163.2583 3278.0176 -168.251 c3271.5361 -178.125 3266.457 -189.0098 3262.0254 -199.9302 c3258.0166 -209.8076 3254.5703 -220.5693 3254.0859 -231.2583 c3253.0889 -253.3003 3264.4414 -274.0171 3285.127 -282.7285 c3296.3242 -287.4438 3309.3047 -289.6611 3321.377 -290.417 c3327.5039 -290.8008 3333.9072 -291.0498 3340.002 -290.2485 c3345.8506 -289.48 3351.3291 -287.5107 3356.8945 -285.6357 c3364.7939 -282.9731 3361.4053 -270.415 3353.4375 -273.0996 cf3502.5605 -316.1138 m3505.0283 -312.6855 3509.1367 -310.9126 3511.9316 -307.9277 c3515.0498 -304.5967 3517.6074 -300.812 3520.1367 -297.0269 c3524.8096 -290.0342 3513.5439 -283.5337 3508.9121 -290.4653 c3507.1816 -293.0552 3505.375 -296.8013 3502.7578 -298.6196 c3499.7363 -300.7188 3497.0605 -303.2524 3494.4502 -305.8281 c3492.5469 -307.7065 3491.2764 -309.7539 3488.9668 -311.165 c3485.6455 -313.1929 3481.9707 -314.7515 3478.4932 -316.4902 c3471.2266 -320.1235 3463.7793 -322.25 3455.8828 -324.1572 c3447.8721 -326.0923 3439.6543 -325.5879 3431.4785 -325.5879 c3423.2803 -325.5879 3416.0254 -325.0776 3408.0586 -323.0225 c3405.3428 -322.3218 3402.8311 -321.4116 3400.3848 -320.042 c3399.0889 -319.3164 3397.9434 -317.7451 3396.9063 -316.708 c3395.5635 -315.3662 3393.8867 -314.7295 3392.1777 -314.0205 c3387.0957 -311.9106 3384.3301 -306.0698 3382.1729 -301.3013 c3379.1113 -294.5327 3375.0781 -288.1943 3374.8457 -280.5659 c3374.5908 -272.2026 3361.5898 -272.1782 3361.8457 -280.5659 c3362.1074 -289.1392 3365.3223 -296.3672 3369.1533 -303.8906 c3372.751 -310.9551 3375.46 -317.8809 3381.9648 -322.9019 c3384.7285 -325.0347 3387.7588 -325.9458 3390.1094 -328.2964 c3393.0254 -331.2119 3396.5703 -332.793 3400.373 -334.2563 c3409.1387 -337.6299 3418.5986 -338.5879 3427.8945 -338.5879 c3436.5938 -338.5879 3445.3145 -338.9648 3453.9463 -337.7568 c3463.3857 -336.4355 3473.3701 -333.5576 3481.8594 -329.313 c3488.9883 -325.7485 3497.7305 -322.8228 3502.5605 -316.1138 cf3837 -361.0835 m3833.8027 -360.0366 3829.6816 -361.063 3828.1699 -365.1064 c3825.6484 -371.8496 3819.083 -376.3008 3814.3535 -381.4092 c3811.7129 -384.2607 3810.084 -386.8501 3806.7324 -388.9932 c3803.2109 -391.2441 3800.5801 -393.5645 3796.5215 -394.8872 c3788.9971 -397.3398 3780.6152 -398.416 3772.8389 -399.8589 c3764.5859 -401.3901 3756.0889 -401.8296 3747.7168 -401.3511 c3743.9463 -401.1357 3740.2754 -399.666 3736.5293 -399.1143 c3731.7715 -398.4141 3727.0049 -399.021 3722.3379 -397.71 c3718.9033 -396.7456 3715.5479 -395.5068 3712.0996 -394.5649 c3708.3525 -393.541 3704.0869 -392.7095 3700.6484 -390.873 c3697.2227 -389.042 3693.9785 -386.8945 3690.8398 -384.6104 c3687.2041 -381.9639 3685.2578 -378.9463 3682.5215 -375.5684 c3680.4902 -373.0605 3677.6152 -371.2949 3675.2383 -369.1167 c3673.7598 -367.7617 3673.0166 -366.3892 3671.1719 -365.3213 c3669.4072 -364.3008 3667.9238 -362.4619 3666.4961 -361.04 c3665.5273 -360.0762 3664.4727 -359.5186 3663.4121 -359.2773 C3662.3965 -358.4907 3661.0879 -358 3659.5029 -358 C3658 -358 L3655.1133 -358 3653.2744 -359.6948 3652.4707 -361.8579 C3649.0898 -363.8418 3644.4707 -364.2705 3640.8525 -364.9463 c3633.8184 -366.2598 3626.71 -367.749 3619.5898 -368.4707 c3603.582 -370.0928 3586.9795 -366.8086 3571.3672 -363.686 c3558.4316 -361.0986 3547.1543 -350.2773 3539.8184 -339.7837 c3531.8809 -328.4287 3529.4893 -313.4082 3533.9707 -300.2671 c3536.6846 -292.3101 3524.125 -288.9224 3521.4355 -296.8101 c3510.3486 -329.3208 3533.4063 -362.2622 3562.7637 -374.8438 c3567.0752 -376.6909 3572.3008 -377.0957 3576.8984 -378.0151 c3581.5215 -378.9395 3586.1191 -379.5981 3590.7998 -380.1553 c3600.3184 -381.2886 3610.0078 -382.188 3619.5898 -381.4629 c3628.2695 -380.8062 3636.9678 -378.8374 3645.5146 -377.2412 c3650.3037 -376.3467 3655.5449 -375.2305 3659.8047 -372.6445 C3660.5508 -373.3374 3661.3066 -374.0171 3662.0957 -374.6704 c3662.8789 -375.2988 3663.6846 -375.8965 3664.5078 -376.4702 C3664.6768 -376.6865 3664.9004 -376.9722 3665.1855 -377.333 C3667.8193 -380.3232 3671.7295 -382.1987 3673.6543 -385.6973 c3677.8281 -393.2813 3688.1035 -398.9014 3695.5234 -402.8647 c3698.9678 -404.7051 3703.1387 -405.6812 3706.9004 -406.6514 c3711.5518 -407.8496 3716.0625 -409.4536 3720.6797 -410.7505 c3725.2637 -412.0386 3730.0449 -411.2041 3734.6787 -411.8862 c3739.665 -412.6206 3744.2422 -414.1523 3749.3281 -414.4429 c3758.8633 -414.9878 3768.5459 -413.832 3777.9072 -412.0952 c3786.6885 -410.4658 3796.1816 -409.2373 3804.4463 -405.7593 c3808.2861 -404.1436 3811.0781 -401.6348 3814.5332 -399.4253 c3818.8662 -396.6548 3821.2305 -393.1011 3824.6543 -389.4033 c3829.0361 -384.6709 3833.5518 -380.6611 3837 -375.6201 C3837 -361.0835 Lf3690.6563 -1497.4063 m3685.9414 -1497.1611 3681.4238 -1496.208 3676.6484 -1496.208 c3671.5908 -1496.208 3666.5342 -1496.1992 3661.4766 -1496.2236 c3649.876 -1496.2783 3638.1133 -1496.5566 3626.7539 -1499.1172 c3616.5059 -1501.4277 3606.3799 -1504.9014 3596.3184 -1507.9199 c3586.0361 -1511.0039 3575.7949 -1514.54 3566.582 -1520.1416 C3566.0586 -1520.4971 3565.5098 -1520.8135 3564.9697 -1521.1406 C3564.2061 -1520.2998 3562.5762 -1518.5605 3561.8994 -1518.1074 c3558.4941 -1515.8281 3555.0723 -1515.0293 3551.3936 -1513.3887 c3542.3965 -1509.374 3533.4326 -1505.2998 3523.8398 -1502.832 c3519.8311 -1501.8018 3515.2852 -1498.1348 3511.8145 -1495.8975 c3509.7178 -1494.5459 3506.4619 -1494.168 3504.0879 -1493.459 c3501.4121 -1492.6602 3498.7295 -1492.0195 3495.9561 -1491.6738 c3485.0215 -1490.3115 3474 -1490.2188 3463 -1490.2168 c3455 -1490.2158 3455 -1503.2158 3463 -1503.2168 C3483.9199 -1503.9961 3494.4277 -1504.4834 v3504.9443 -1504.9717 3512.3164 -1513.293 3521.9824 -1515.7793 c3531.0176 -1518.1035 3538.9932 -1522.7031 3547.6816 -1525.8477 c3551.4727 -1527.2188 3553.7607 -1527.8496 3556.4434 -1530.957 c3559.3193 -1534.2881 3564.9629 -1535.8711 3568.9629 -1533.9238 c3572.9492 -1531.9824 3576.5635 -1529.2764 3580.5879 -1527.3281 c3585.1855 -1525.1016 3590.0898 -1523.5039 3594.9443 -1521.9443 c3604.9385 -1518.7334 3615.084 -1515.8242 3625.1807 -1512.9541 c3636.4316 -1509.7559 3647.9434 -1509.374 3659.5742 -1509.2383 c3664.7422 -1509.1777 3669.9121 -1509.208 3675.0801 -1509.208 c3680.3945 -1509.208 3685.3887 -1510.1328 3690.6563 -1510.4063 c3699.0381 -1510.8418 3698.9961 -1497.8398 3690.6563 -1497.4063 cf*u1 D1721.8389 -2015.2891 m1714.2734 -2009.8848 1706.8584 -2007.2988 1697.5313 -2006.7373 c1693.6689 -2006.5049 1690.0107 -2006.6699 1686.4414 -2007.1816 C1689.9053 -2002.4453 1693.3965 -1998.1563 1694.7456 -1992.0762 c1696.3154 -1985.0029 1692.939 -1979.1045 1686.9536 -1975.5049 c1676.6187 -1969.2881 1661.2285 -1971.291 1651.5254 -1977.6904 c1650.9443 -1978.0742 1650.3809 -1978.4883 1649.8286 -1978.917 C1649.8887 -1977.4375 1649.8091 -1975.9229 1649.5161 -1974.3545 c1648.2061 -1967.3408 1641.8145 -1962.6689 1635.4438 -1960.6699 c1627.7197 -1958.2461 1617.8438 -1956.7764 1609.7788 -1957.3047 c1605.2114 -1957.6035 1601.2744 -1959.9639 1597.2378 -1961.9229 c1593.1309 -1963.915 1590.9019 -1965.75 1589.1729 -1970.1338 c1586.23 -1977.5947 1587.0488 -1986.5752 1588.4126 -1994.3047 c1589.4761 -2000.3301 1593.042 -2005.3867 1597.165 -2009.8584 C1589.4092 -2010.3965 1582.042 -2012.9824 1574.9473 -2016.4766 c1559.4795 -2024.0967 1543.2988 -2034.9482 1545.9561 -2054.5596 c1548.2065 -2071.1709 1575.3701 -2071.3535 1587.373 -2069.1143 c1596.6333 -2067.3867 1604.0439 -2060.6855 1611.3584 -2055.2715 c1611.7305 -2054.9961 1612.0933 -2054.7207 1612.4551 -2054.4443 C1610.7925 -2061.2373 1610.2783 -2068.1621 1609.6592 -2075.4375 c1608.7979 -2085.5566 1614.8525 -2094.6621 1621.5972 -2101.6016 c1627.7598 -2107.9404 1638.0967 -2109.333 1646.4688 -2108.4844 c1651.0283 -2108.0215 1654.9092 -2106.3281 1658.3315 -2103.2871 c1661.5342 -2100.4414 1662.7534 -2095.5225 1664.3335 -2091.7148 c1667.9824 -2082.9229 1668.2085 -2071.9004 1666.916 -2062.5566 c1666.1982 -2057.3662 1664.2402 -2052.1543 1661.6777 -2047.2578 C1669.2329 -2050.1094 1677.104 -2052.1992 1685.292 -2053.7285 c1694.4028 -2055.4307 1701.7334 -2051.2383 1709.6982 -2047.6904 c1716.314 -2044.7441 1723.3198 -2039.9219 1726.4619 -2033.1875 c1727.9175 -2030.0693 1728.9927 -2026.6338 1728.501 -2023.1904 c1727.9653 -2019.4424 1724.6938 -2017.3281 1721.8389 -2015.2891 cf0 D1649.4683 -2019.123 m1649.749 -2013.7188 1651.0161 -2008.2344 1651.6821 -2002.8477 c1652.2881 -1997.9463 1652.9561 -1994.0742 1656.4619 -1990.3613 c1661.7974 -1984.7109 1671.5674 -1983.7822 1678.6328 -1985.9561 c1682.5112 -1987.1494 1682.7109 -1988.6475 1681.1338 -1992.1289 c1679.2725 -1996.2354 1675.9829 -1999.1113 1673.6284 -2002.8457 c1668.7012 -2010.6611 1658.9893 -2017.8857 1649.4316 -2019.4863 C1649.4434 -2019.3652 1649.4619 -2019.248 1649.4683 -2019.123 cf1608.3008 -2041.25 m1603.417 -2046.2529 1596.377 -2050.8223 1590.3086 -2054.252 c1584.6738 -2057.4346 1578.1445 -2057.2969 1571.8945 -2056.792 c1567.666 -2056.4492 1559.6563 -2056.0381 1558.4917 -2051.1035 c1557.3408 -2046.2266 1561.7803 -2040.458 1565.0396 -2037.499 c1570.0679 -2032.9336 1576.9395 -2029.9521 1582.9639 -2026.9844 c1590.0322 -2023.5029 1597.894 -2021.8047 1605.7148 -2023.2471 c1610.6338 -2024.1543 1615.3574 -2025.9873 1620.0054 -2027.958 C1615.7295 -2032.0449 1612.4395 -2037.0107 1608.3008 -2041.25 cf1617.3555 -2010.0342 m1611.4624 -2007.251 1606.936 -2001.3613 1602.9038 -1996.4375 c1599.3877 -1992.1436 1600.2036 -1983.4629 1600.3872 -1978.3467 c1600.4302 -1977.1504 1600.8726 -1975.9561 1601.2202 -1974.8281 c1601.3154 -1974.5176 1601.3145 -1974.3311 1601.269 -1974.2178 C1601.5029 -1974.1455 1601.8169 -1974.0283 1602.2588 -1973.832 c1605.9463 -1972.1934 1608.8755 -1970.2236 1612.9839 -1970.1855 c1619.1973 -1970.1279 1625.9575 -1971.7959 1631.9878 -1973.2051 c1637.3184 -1974.4512 1637.5703 -1978.8398 1636.1016 -1983.2471 c1635.0156 -1986.5039 1632.8848 -1990.499 1632.8735 -1993.9619 c1632.8628 -1997.2832 1632.3169 -2000.002 1631.5913 -2003.2227 c1630.7778 -2006.8311 1629.6318 -2010.2568 1628.6704 -2013.7266 C1625.0166 -2012.3828 1621.1709 -2011.8359 1617.3555 -2010.0342 cf1653.4746 -2082.0977 m1652.4253 -2085.8105 1651.248 -2089.2256 1649.8799 -2092.8809 c1648.957 -2095.3467 1646.0205 -2095.5664 1643.7705 -2095.7012 c1637.9521 -2096.0527 1632.8789 -2094.7383 1628.915 -2090.4229 c1623.9126 -2084.9766 1622.248 -2079.5527 1622.9399 -2072.3301 c1623.6846 -2064.5547 1624.207 -2057.5977 1627.46 -2050.3223 c1629.3462 -2046.1055 1629.9951 -2038.084 1634.2671 -2035.5195 c1634.2983 -2035.501 1634.3247 -2035.4795 1634.3555 -2035.4609 C1638.5317 -2037.625 1642.7441 -2041.7539 1644.8389 -2044.7754 c1648.6943 -2050.3359 1652.0293 -2056.4736 1653.8701 -2062.9883 c1655.4155 -2068.457 1655.0039 -2076.6865 1653.4746 -2082.0977 cf1714.0742 -2028.8145 m1711.293 -2033.4629 1705.1499 -2034.9707 1700.7944 -2037.4746 c1697.8945 -2039.1416 1695.0898 -2040.3115 1691.8145 -2041.0225 c1688.6572 -2041.708 1685.1953 -2040.4004 1682.1147 -2039.8457 c1673.6621 -2038.3232 1665.6396 -2035.5137 1658.0732 -2031.7158 C1658.4067 -2031.6045 1658.7402 -2031.4932 1659.0742 -2031.3818 c1662.2627 -2030.3193 1665.085 -2028.2354 1668.3174 -2027.1064 c1674.8364 -2024.8301 1680.5068 -2021.2344 1687.3848 -2019.8604 c1693.6357 -2018.6113 1701.4385 -2019.627 1707.4165 -2021.5781 c1710.0938 -2022.4521 1712.7783 -2024.9199 1715.1895 -2026.4551 C1714.8979 -2027.2744 1714.5381 -2028.0391 1714.0742 -2028.8145 cf*U572.6157 -2153 m571.9873 -2152.75 571.3579 -2152.5098 570.7256 -2152.29 c567.6748 -2151.2324 563.2515 -2146.6914 564.0137 -2142.9443 c564.501 -2140.5479 571.1191 -2140.3438 572.8057 -2139.9951 c574.7197 -2139.5996 576.7148 -2139.0596 578.6748 -2138.9629 c580.8984 -2138.8535 583.9209 -2140.7734 585.9741 -2141.5225 c590.6982 -2143.2461 595.2808 -2143.9805 599.7485 -2146.4629 c600.3799 -2146.8145 601.061 -2147.2695 601.7588 -2147.793 C602.5596 -2149.5645 603.4443 -2151.2988 604.373 -2153 C622.958 -2153 L621.5127 -2151.3975 620.4824 -2149.9023 619.3447 -2147.6426 c618.1289 -2145.2275 615.1748 -2142.9668 613.3145 -2141.0215 c613.1416 -2140.8408 612.9536 -2140.6738 612.7773 -2140.4961 C611.4214 -2136.8789 610.6475 -2133.1211 610.6475 -2129.0908 c610.6475 -2125.1367 609.4556 -2119.5029 612.5068 -2116.4268 c614.9336 -2113.9805 620.3179 -2113.1094 623.5151 -2112.2773 c625.52 -2111.7549 627.5142 -2111.6797 629.5752 -2111.7607 c631.0977 -2111.8203 630.9878 -2112.7139 631.7847 -2114.1699 c632.1777 -2114.918 632.5938 -2115.6514 633.0337 -2116.3721 c633.1514 -2116.5723 635.1631 -2120.1289 634.4014 -2118.1807 c635.5146 -2121.0273 636.6411 -2123.3662 637.4189 -2126.293 c638.6929 -2131.083 639.2368 -2135.8672 639.4541 -2140.7402 C637.96 -2144.7129 636.8213 -2148.8027 636.2959 -2153 C651.7842 -2153 L652.2661 -2149.6406 652.5635 -2146.2305 652.5254 -2142.6299 C655.3325 -2136.4482 659.4492 -2130.7627 663.585 -2125.6143 c667.0259 -2121.3311 672.5215 -2119.3271 677.6416 -2118.0254 c682.6201 -2116.7607 688.6025 -2114.6309 692.3867 -2119.5342 c698.5513 -2127.5215 691.6758 -2137.8398 686.3359 -2144.0879 c683.5464 -2147.3516 680.2051 -2150.1309 676.9849 -2153 C695.7803 -2153 L705.5449 -2142.2578 712.3467 -2126.4063 703.6118 -2112.9727 c693.7344 -2097.7822 671.0181 -2103.3906 658.7783 -2112.4727 c655.4941 -2114.9102 652.5371 -2117.9766 649.9419 -2121.3428 C649.4736 -2119.8691 648.9209 -2118.4551 648.2637 -2117.1338 c645.5215 -2111.6191 642.6084 -2104.5957 637.3828 -2100.9795 c632.0605 -2097.2969 623.7515 -2098.5576 617.9961 -2100.3242 c612.1392 -2102.1211 605.7949 -2103.9541 601.8081 -2108.9238 c596.7256 -2115.2578 597.6475 -2123.1973 597.6475 -2130.8164 c597.6475 -2130.9805 597.6577 -2131.1445 597.6602 -2131.3086 C593.4805 -2129.8389 589.1396 -2128.7197 584.9961 -2127.293 c578.1782 -2124.9473 570.606 -2126.7188 563.8071 -2128.5283 c557.9321 -2130.0918 553.5518 -2133.7852 551.478 -2139.4883 c549.9248 -2143.7598 551.394 -2148.7051 553.6802 -2153 C572.6157 -2153 Lf*u1 D393.7627 -1537.2061 m386.4316 -1530.8652 380.1016 -1523.5107 373.9004 -1516.0859 c370.3711 -1511.8613 366.2363 -1508.3232 362.9761 -1503.8223 c359.5928 -1499.1514 356.7974 -1494.0967 353.3711 -1489.4443 c346.6953 -1480.3809 342.252 -1469.7949 335.4878 -1460.8477 c328.8379 -1452.0518 321.6084 -1443.7139 314.897 -1434.9668 c313.7603 -1433.4854 312.6372 -1431.9727 311.5122 -1430.458 C311.0796 -1429.4854 310.6475 -1428.5117 310.2148 -1427.5391 c309.5767 -1426.1035 308.4883 -1425.1943 307.2192 -1424.7285 C307.1948 -1424.6963 307.1709 -1424.6631 307.1465 -1424.6309 C310.0449 -1415.9102 314.0156 -1407.7773 317.3105 -1399.1943 c323.9927 -1381.79 329.0591 -1363.9766 334.834 -1346.2773 c336.6528 -1340.7041 331.0991 -1337.3711 326.6924 -1338.5518 C323.8765 -1336.3926 319.3945 -1336.1807 316.9629 -1340.0713 c314.9849 -1343.2354 310.7666 -1345.4805 307.9326 -1347.8281 c303.7915 -1351.2578 300.127 -1354.2852 295.3311 -1356.8652 c291.1948 -1359.0908 287.791 -1361.1836 284.4302 -1364.5166 c280.6343 -1368.2813 276.1079 -1371.124 271.6987 -1374.1182 c269.1338 -1375.8594 266.5415 -1377.5605 263.9395 -1379.2461 C259.2285 -1375.2871 254.1563 -1371.6738 249.6001 -1367.6182 c241.8765 -1360.7432 234.812 -1352.0215 228.7393 -1343.666 c227.6489 -1342.166 226.2373 -1341.3281 224.7588 -1341.0029 C223.7563 -1333.793 211.9824 -1334.1846 211.834 -1342.1533 c211.7383 -1347.2813 210.9722 -1352.3418 210.6694 -1357.4551 c210.3179 -1363.3896 210.646 -1369.4951 211.0332 -1375.4199 c211.8262 -1387.5479 212.7202 -1399.6143 213.1987 -1411.7705 C206.3691 -1416.2969 199.417 -1420.4961 192.4932 -1424.9121 c184.063 -1430.2891 177.6099 -1438.6973 170.1616 -1445.2871 c162.7266 -1451.8662 156.7393 -1459.7227 149.5942 -1466.541 c142.6357 -1473.1816 134.6367 -1478.4727 128.667 -1486.1309 c124.2695 -1491.7734 130.4917 -1499.4551 135.5869 -1497.1738 C136.2241 -1499.7412 138.2461 -1501.9395 141.6504 -1502.0205 c152.1802 -1502.2695 162.0933 -1506.752 172.2729 -1508.9775 c177.231 -1510.0625 182.3291 -1509.8467 187.2505 -1510.9248 c192.79 -1512.1387 198.2588 -1514.2695 203.6465 -1516.0273 c209.2925 -1517.8701 214.9263 -1519.6113 220.6309 -1521.0908 C221.4517 -1525.332 222.5117 -1529.4961 222.6172 -1533.8623 c222.6587 -1535.5801 222.792 -1537.291 222.9834 -1538.9951 C222.9736 -1540.9053 223.1958 -1542.7734 223.8145 -1544.5352 C224.1333 -1546.2637 224.4946 -1547.9844 224.8877 -1549.6953 c226.1572 -1555.2227 226.2241 -1560.8711 227.8047 -1566.418 c229.3779 -1571.9385 231.2983 -1577.3213 232.6123 -1582.918 c234.0039 -1588.8486 234.5371 -1594.8809 234.5991 -1600.96 c234.6318 -1604.165 235.2305 -1607.2949 235.8247 -1610.4238 C234.8525 -1613.7783 234.126 -1617.1982 233.73 -1620.6934 C233.2734 -1621.6133 233 -1622.7109 233 -1624 C233 -1624.5244 233 -1624.9238 v233 -1633.3252 245.9512 -1633.2832 246.2002 -1624.9238 c246.2021 -1624.8594 246.2109 -1624.7959 246.2129 -1624.7314 C248.3423 -1623.8955 250 -1621.9697 250 -1618.9326 c250 -1618.5332 250 -1618 Y250 -1617.3242 249.9189 -1616.7061 249.7837 -1616.1328 C249.5879 -1614.2617 249.2856 -1612.4912 248.9648 -1610.751 C252.4048 -1600.4893 258.3276 -1590.5098 262.5874 -1581.3242 c269.7866 -1565.7998 277.3735 -1550.6904 281.7085 -1534.0811 c281.8818 -1533.417 282.0278 -1532.7412 282.1641 -1532.0605 C285.8931 -1532.2275 289.6289 -1532.3164 293.3545 -1532.5293 C293.4141 -1532.752 293.4712 -1532.9746 293.542 -1533.1934 c295.0181 -1537.7588 300.8525 -1539.6748 304.4063 -1536.0625 c305.0283 -1535.4297 305.5713 -1534.7666 306.0845 -1534.0898 C311.2627 -1535.1855 315.9907 -1536.7676 321.377 -1536.7676 c326.8408 -1536.7676 331.9429 -1539.1768 337.2002 -1540.7148 c342.0835 -1542.1436 346.7578 -1542.5996 351.811 -1542.8359 c353.9712 -1542.9365 356.4473 -1544.5996 358.4399 -1545.3721 c360.6162 -1546.2168 362.7944 -1546.3516 365.1108 -1546.3594 c371.0762 -1546.377 377.144 -1547.9277 383.083 -1548.6611 c387.3701 -1549.1904 391.2568 -1550.8389 395.582 -1551.1455 c399.1206 -1551.3965 402 -1547.999 402 -1544.6455 C402 -1543 L402 -1538.2773 397.4741 -1536.3535 393.7627 -1537.2061 Cf0 D318.3721 -1356 m317.9766 -1357.3848 317.5771 -1358.7686 317.1729 -1360.1504 C316.7539 -1359.4561 316.2002 -1358.8477 315.5059 -1358.3652 C316.4316 -1357.5586 317.3765 -1356.7617 318.3721 -1356 Cf148.8066 -1489.7188 m147.0669 -1489.4365 145.3105 -1489.2207 143.5273 -1489.1074 C145.0557 -1487.625 146.6489 -1486.2109 148.2593 -1484.8145 C148.5771 -1485.3506 148.9678 -1485.8154 149.4355 -1486.1885 C149.043 -1487.3594 148.8262 -1488.5469 148.8066 -1489.7188 Cf179.6514 -1488.4199 m179.4614 -1488.5986 179.2778 -1488.7822 179.1079 -1488.9814 C177.0059 -1488.9561 174.9038 -1488.9141 172.8027 -1488.8223 c171.7861 -1488.7773 170.7778 -1488.6963 169.772 -1488.6006 C173.1104 -1486.9355 176.5591 -1485.5479 180.0518 -1484.1992 C179.3877 -1485.4902 179.2964 -1486.9932 179.6514 -1488.4199 Cf216.8936 -1483.1162 m217.0288 -1484.3008 217.166 -1485.4863 217.334 -1486.6641 c217.4937 -1487.7832 217.6621 -1488.8984 217.8286 -1490.0107 C216.02 -1489.8848 214.1982 -1489.7148 212.3584 -1489.3789 C214.2466 -1487.4541 215.8174 -1485.333 216.8936 -1483.1162 Cf205.5015 -1502.9688 m204.332 -1502.5869 203.1621 -1502.2051 201.9912 -1501.8262 C202.0928 -1501.8076 202.1929 -1501.7852 202.2939 -1501.7656 C203.7051 -1501.8613 205.1177 -1501.9463 206.5332 -1502.0059 c207.4785 -1502.0459 208.4194 -1502.1104 209.3594 -1502.1836 C212.5796 -1502.9717 215.8105 -1503.6787 219.0923 -1504.1025 C219.1182 -1505.1504 219.1367 -1506.2041 219.1763 -1507.2451 C214.5952 -1505.917 210.0483 -1504.4531 205.5015 -1502.9688 cf237.4829 -1381.0586 m236.6255 -1380.3623 233.6426 -1378.5928 233.6763 -1378.6787 c232.7744 -1376.4043 232.7017 -1373.877 231.7905 -1371.5791 c230.7075 -1368.8457 228.6553 -1366.8066 225.5229 -1366.8066 c224.9487 -1366.8066 224.356 -1366.9063 223.772 -1367.085 C223.7925 -1364.3301 223.8945 -1361.585 224.0342 -1358.8418 C228.3408 -1364.2949 232.9331 -1369.6064 237.7837 -1374.3662 c242.2974 -1378.7959 247.5405 -1382.5205 252.5181 -1386.4922 C250.4531 -1387.7793 248.3848 -1389.0615 246.3169 -1390.3438 C243.8413 -1386.8164 240.8394 -1383.7852 237.4829 -1381.0586 cf245.6152 -1473.4238 m244.8853 -1475.7451 245.6367 -1477.8301 247.0693 -1479.3262 C246.2866 -1486.5879 245.5327 -1493.8535 244.752 -1501.1162 c244.7451 -1501.1797 244.7368 -1501.2441 244.73 -1501.3076 C243.9463 -1499.4355 242.2749 -1498.2354 240.3965 -1497.7803 C240.8921 -1490.625 241.3896 -1483.4697 241.8867 -1476.3145 C243.1802 -1475.1191 244.0049 -1473.4219 244.0044 -1471.5566 c244.0034 -1468.6797 243.9209 -1465.8613 243.0913 -1463.1621 C243.6084 -1462.5723 244.1152 -1461.998 244.6099 -1461.458 c246.2441 -1459.6748 247.8213 -1457.8408 249.3721 -1455.9834 C249.0703 -1458.957 248.8003 -1461.9375 248.5283 -1464.918 C247.4961 -1467.7295 246.5151 -1470.5615 245.6152 -1473.4238 cf253.0928 -1544.2285 m252.0493 -1547.5225 250.9683 -1550.8057 249.8779 -1554.0859 C249.8628 -1553.8828 249.8555 -1553.6797 249.8394 -1553.4766 c249.354 -1547.4033 249.0781 -1541.3184 248.8047 -1535.2334 C250.9019 -1534.7559 252.7412 -1533.3193 253.3574 -1530.7969 c253.5898 -1529.8457 253.8018 -1528.8857 254.0229 -1527.9297 C254.0659 -1527.917 254.1084 -1527.9004 254.1509 -1527.8867 C254.4814 -1527.958 254.8125 -1528.0283 255.1431 -1528.0996 C253.9204 -1531.418 252.7202 -1534.748 251.606 -1538.126 c250.7788 -1540.6328 251.5693 -1542.7764 253.0928 -1544.2285 Cf265.4399 -1489.4092 m263.7476 -1493.293 261.9639 -1497.1748 259.9976 -1500.9482 C261.2227 -1495.8887 262.5962 -1490.7705 263.5332 -1485.6621 C263.9902 -1484.1094 264.4307 -1482.5469 264.8672 -1480.9814 C265.0713 -1483.3799 265.4053 -1485.8672 265.9365 -1488.2676 C265.7715 -1488.6465 265.6045 -1489.0313 265.4399 -1489.4092 cf271.7427 -1465.5664 m271.7017 -1465.8906 271.6929 -1466.1973 271.6982 -1466.4971 C270.7651 -1466.416 269.8164 -1466.5146 268.9253 -1466.7832 C269.2583 -1465.7148 269.5986 -1464.6494 269.9551 -1463.5918 c270.6533 -1461.5186 271.5049 -1458.7217 272.6489 -1455.9658 C272.769 -1456.0879 272.8804 -1456.2158 273.0015 -1456.3369 C273.9536 -1457.2891 L273.0313 -1460.002 272.1055 -1462.7031 271.7427 -1465.5664 cf279.8057 -1436.377 m278.5776 -1435.5986 277.2148 -1435.1025 275.8462 -1435.1025 c275.7764 -1435.1025 275.7095 -1435.1123 275.6406 -1435.1143 C275.9766 -1434.3799 276.3115 -1433.6445 276.645 -1432.9092 C277.1436 -1432.3154 277.6333 -1431.7158 278.1167 -1431.1104 C278.5923 -1432.2256 279.4438 -1433.1133 280.4941 -1433.7393 C280.2603 -1434.6191 280.0298 -1435.498 279.8057 -1436.377 Cf292.3438 -1375.1729 m292.0947 -1376.2598 292.0757 -1377.25 292.231 -1378.1367 C292.0654 -1378.2402 291.9004 -1378.3516 291.7363 -1378.4775 c286.3125 -1382.6309 283.1758 -1388.3955 280.6802 -1394.6523 c280.4341 -1395.2686 280.1572 -1395.8799 279.8687 -1396.4902 C279.5996 -1396.1943 279.3291 -1395.9004 279.062 -1395.6035 C279.4468 -1391.9766 279.5464 -1388.293 279.0088 -1384.8027 C280.314 -1383.9277 281.6177 -1383.0518 282.9111 -1382.1582 c286.2407 -1379.8594 289.4805 -1377.5664 292.439 -1374.8379 C292.4087 -1374.9512 292.3701 -1375.0576 292.3438 -1375.1729 cf298.8311 -1489.6943 m299.3232 -1487.7021 299.894 -1485.7432 300.5171 -1483.8066 C300.8027 -1484.0908 L300.1675 -1485.9658 299.4995 -1487.8301 298.8311 -1489.6943 Cf301.3281 -1455.9736 m301.9478 -1453.1533 302.5459 -1450.3174 303.2959 -1447.5371 C304.1216 -1450.3828 304.8403 -1453.2959 305.7441 -1456.1064 C304.3359 -1455.625 302.7681 -1455.5479 301.3281 -1455.9736 Cf333.1377 -1481.292 m333.2583 -1481.5029 333.3804 -1481.7129 333.5015 -1481.9238 C333.231 -1481.96 332.9619 -1482.0078 332.6982 -1482.0801 C332.8599 -1481.8271 333.0078 -1481.5645 333.1377 -1481.292 Cf319.7949 -1523.6885 m320.3135 -1523.2393 320.8032 -1522.7412 321.2651 -1522.2021 C321.415 -1522.7148 321.6094 -1523.2148 321.8623 -1523.6855 C321.1719 -1523.6934 320.4834 -1523.7031 319.7949 -1523.6885 Cf347.1689 -1529.6904 m344.4453 -1529.585 341.6118 -1528.459 339.02 -1527.7012 c336.603 -1526.9941 334.2422 -1526.0947 331.8535 -1525.3242 C332.4814 -1524.7617 333.0537 -1524.1582 333.5654 -1523.5107 C335.5298 -1527.1162 340.916 -1528.8457 343.9458 -1525.2793 c344.0518 -1525.1543 344.146 -1525.0215 344.2495 -1524.8945 C345.3052 -1526.9072 347.5664 -1527.9668 349.9238 -1528.0244 C350.834 -1528.6328 351.7407 -1529.25 352.6372 -1529.877 C350.8198 -1529.708 348.9561 -1529.7598 347.1689 -1529.6904 cf*U169.4048 -1560.418 m162.8687 -1568.1299 155.3086 -1574.9482 152.1572 -1584.8545 c149.6079 -1592.8652 162.1611 -1596.2676 164.6924 -1588.3096 c167.0723 -1580.8301 173.667 -1575.4277 178.5972 -1569.6113 c183.9824 -1563.2578 174.833 -1554.0146 169.4048 -1560.418 cf176.2007 -1382.6953 m178.4912 -1380.4043 178.979 -1375.71 176.2007 -1373.502 c174.6792 -1372.2939 173.4102 -1371.5859 171.6055 -1370.8623 C171.3447 -1370.7725 171.084 -1370.6836 170.8232 -1370.5938 C170.1475 -1370.0615 169.3877 -1369.6729 168.54 -1369.4355 c167.1177 -1369.0439 165.6963 -1369.2002 164.2686 -1368.8047 c163.46 -1368.5811 162.7871 -1368.2324 161.7056 -1367.6943 c158.5337 -1366.1152 154.6904 -1366.8193 152.812 -1370.0264 c151.1128 -1372.9268 151.9741 -1377.3408 155.144 -1378.9189 c158.3232 -1380.502 161.3848 -1381.6416 164.811 -1382.0449 C165.2295 -1382.2676 165.667 -1382.4805 166.1699 -1382.6816 c167.0825 -1383.0479 169.1665 -1384.4102 167.0083 -1382.6953 c169.7793 -1384.8965 173.4834 -1385.4121 176.2007 -1382.6953 cf275 -1287.0371 m275 -1279.8486 L275 -1276.3057 272.0435 -1273.3486 268.5 -1273.3486 c264.9565 -1273.3486 262 -1276.3057 262 -1279.8486 C262 -1287.0371 L262 -1290.5801 264.9565 -1293.5371 268.5 -1293.5371 c272.0435 -1293.5371 275 -1290.5801 275 -1287.0371 Cf395.1343 -1412.5693 m389.0142 -1413.6924 382.6919 -1413.5332 376.4932 -1413.5352 c368.1099 -1413.5371 368.1099 -1426.5371 376.4932 -1426.5352 c383.9053 -1426.5332 391.2769 -1426.4473 398.5903 -1425.1045 c406.8281 -1423.5928 403.3281 -1411.0654 395.1343 -1412.5693 cf332.4375 -1605.2236 m331.7339 -1601.749 327.6777 -1599.793 324.4419 -1600.6836 c320.853 -1601.6709 319.1992 -1605.21 319.9023 -1608.6787 c320.9609 -1613.9043 322.2041 -1619.083 323.4961 -1624.2549 c325.5273 -1632.3848 338.0645 -1628.9355 336.0322 -1620.7998 c334.7397 -1615.627 333.4966 -1610.4492 332.4375 -1605.2236 cfUu0 0.411658 0.493629 0 1 0.658824 0.498039 Xa3800.1699 -121.3262 m3799.3096 -114.1206 3795.5615 -108.8032 3792.5313 -102.418 c3790.751 -98.667 3789.2168 -94.8223 3787.2227 -91.1738 c3785.042 -87.1836 3781.9189 -83.5718 3779.1523 -79.9814 c3773.71 -72.916 3768.2676 -64.8989 3761.123 -59.4604 c3754.415 -54.3545 3747.1514 -49.8687 3740.2881 -44.9497 c3732.9248 -39.6724 3725.2988 -34.7339 3716.9063 -31.2495 c3708.6377 -27.8169 3699.5059 -26.0361 3690.7324 -24.3613 c3681.9209 -22.6797 3673.2031 -21.7212 3664.2314 -21.6187 c3654.8184 -21.5112 3645.4229 -21.6797 3636.0264 -20.9917 c3631.1689 -20.6362 3626.4443 -19.9277 3621.5566 -20.0283 c3616.0391 -20.1416 3610.5234 -21.0605 3605.0703 -21.8369 c3601.5557 -22.3369 3599.6816 -26.749 3600.5303 -29.8325 c3601.5586 -33.5698 3605.0215 -34.8711 3608.5254 -34.3721 c3623.8281 -32.1948 3638.7256 -34.5083 3654.0879 -34.5972 c3668.3203 -34.6792 3681.7246 -35.4028 3695.6377 -38.6699 c3702.2227 -40.2163 3708.7725 -41.6089 3714.9219 -44.5176 c3721.5889 -47.6714 3727.7285 -51.9194 3733.7266 -56.1748 c3738.957 -59.8862 3744.0635 -63.6719 3749.4727 -67.1245 c3755.6436 -71.0635 3759.7959 -76.4917 3764.376 -82.1113 c3768.7441 -87.4712 3773.3828 -92.9497 3776.708 -99.0352 c3779.9766 -105.0181 3782.5488 -111.3423 3785.8467 -117.3267 c3788.7012 -122.5073 3787.6543 -130.1382 3787.5557 -135.7979 c3787.4072 -144.3008 3784.6289 -150.6338 3780.7588 -158.0537 c3777.5654 -164.1763 3773.8984 -169.9263 3770.2061 -175.7588 c3766.9531 -180.8975 3763.6094 -187.9819 3758.666 -191.7217 c3748.0176 -199.7793 3738.5752 -209.5718 3726.7188 -215.9307 c3723.8008 -217.4956 3720.6563 -218.5654 3717.7246 -220.0703 c3714.6396 -221.6538 3711.6455 -223.4634 3708.3789 -224.646 c3705.6631 -225.6289 3702.3496 -225.5278 3699.5088 -226.1855 c3695.8457 -227.0327 3692.3945 -228.4463 3688.6846 -229.144 c3682.1387 -230.3755 3675.085 -229.5054 3668.4697 -229.4619 c3660.7266 -229.4111 3653.1758 -228.5845 3645.6445 -226.7715 c3638.7422 -225.1094 3632.2314 -222.4268 3626.0684 -218.9282 c3620.0537 -215.5146 3614.7793 -211.2681 3608.9912 -207.5532 c3603.4414 -203.9912 3600.334 -198.832 3598.5957 -192.5151 c3597.7197 -189.3311 3595.7285 -187.1353 3594.4941 -184.1318 c3593.3223 -181.2837 3593.5605 -177.5537 3592.9346 -174.5078 c3592.3223 -171.5303 3593 -167.9023 3593 -164.8677 C3593 -154.8745 L3593 -147.0264 3593.9541 -139.3774 3595.9092 -131.7861 c3597.5508 -125.4102 3599.7617 -118.8535 3602.959 -113.0835 c3606.0254 -107.5479 3611.585 -103.5479 3616.8213 -100.2544 c3622.0029 -96.9951 3628.334 -94.4409 3634.2617 -92.9492 c3641.4102 -91.1494 3648.5391 -89.0674 3655.8008 -87.7656 c3669.8076 -85.2539 3686.4199 -87.4521 3699.1035 -93.7905 c3705.0352 -96.7544 3711.0459 -99.7305 3716.8809 -102.876 c3719.7686 -104.4326 3722.1299 -106.7241 3724.874 -108.502 c3727.5996 -110.2671 3730.3145 -111.3394 3732.2676 -114.0425 c3736.002 -119.2124 3739.8281 -125.9033 3740.125 -132.3687 c3740.4551 -139.5601 3740.2178 -147.5889 3737.8848 -154.4116 c3733.6699 -166.7388 3726.6787 -177.894 3715.1729 -184.562 c3702.6045 -191.8467 3687.5449 -191.5469 3673.5625 -189.5225 c3666.6641 -188.5234 3661.7217 -186.0977 3656.7451 -181.1904 c3652.2344 -176.7427 3648.3145 -170.4033 3647.4824 -164.0303 c3645.9854 -152.5781 3656.7031 -142.0781 3666.6504 -138.5352 c3672.6768 -136.3887 3679.8652 -137.3208 3686.1201 -137.6855 c3691.9746 -138.0269 3697.3799 -139.2495 3702.2764 -142.5591 c3705.5605 -144.7793 3704.8203 -148.8115 3703.8555 -152.0811 c3703.3652 -153.7397 3703.3867 -153.2344 3701.2441 -153.2051 c3698.5781 -153.1685 3696.8447 -151.5444 3695.7813 -149.3096 c3692.1807 -141.7427 3680.9746 -148.3433 3684.5566 -155.8711 c3689.1914 -165.6113 3704.6738 -170.3994 3712.7676 -162.0869 c3720.041 -154.6157 3718.9131 -140.9727 3712.0537 -133.916 c3703.2119 -124.8203 3688.4756 -124.5 3676.7754 -124.3979 c3663.709 -124.2842 3652.4727 -129.2622 3643.748 -139.0957 c3635.2139 -148.7153 3632.1797 -161.2598 3636.6484 -173.4482 c3641.1816 -185.813 3650.9668 -195.562 3663.0068 -200.5908 c3669.3477 -203.2397 3678.0879 -203.2539 3684.8867 -203.6313 c3692.5625 -204.0576 3700.2471 -203.2329 3707.7529 -201.6343 c3719.4971 -199.1328 3731.7773 -190.6177 3738.5635 -180.8525 c3740.3828 -178.2334 3742.2705 -175.6611 3744.0898 -173.0415 c3745.8926 -170.4478 3746.7051 -167.1211 3747.9033 -164.2075 c3750.8311 -157.0928 3752.4473 -150.8428 3752.7236 -143.1494 c3752.9766 -136.105 3753.7764 -129.3213 3751.2637 -122.5781 c3748.6582 -115.5879 3744.9971 -109.3379 3740.4473 -103.4531 c3738.6406 -101.1147 3735.2676 -99.4971 3732.7568 -98.0586 c3729.9297 -96.439 3727.5449 -94.2354 3724.8105 -92.4595 c3718.8906 -88.6133 3711.9277 -85.833 3705.6611 -82.5654 c3692.3623 -75.6309 3677.2705 -73.7935 3662.4736 -74.2471 c3655.5186 -74.46 3648.7012 -75.7104 3642.0088 -77.5649 c3635.0547 -79.4912 3627.9961 -80.8267 3621.3623 -83.7354 c3609.6094 -88.8887 3598.6563 -95.3472 3591.668 -106.522 c3584.3125 -118.2847 3581.1934 -133.9497 3580.0205 -147.5464 c3579.4277 -154.4097 3579.7402 -161.3848 3579.7402 -168.2671 c3579.7402 -174.5522 3580.125 -181.5352 3581.958 -187.5879 c3582.8506 -190.5371 3585.4033 -193.0415 3586.0605 -195.9712 c3586.7754 -199.1606 3588.1738 -202.2256 3589.627 -205.1357 c3592.833 -211.5522 3597.7041 -215.7451 3603.6133 -219.5381 c3608.9902 -222.9897 3613.7842 -227.1421 3619.5059 -230.1538 c3626.292 -233.7246 3633.084 -236.7676 3640.4844 -238.8613 c3654.3223 -242.7759 3669.3193 -242.9976 3683.6016 -242.5747 c3690.418 -242.373 3696.46 -240.4312 3702.9648 -238.7207 c3705.9092 -237.9468 3708.9189 -238.022 3711.834 -237.1816 c3715.6201 -236.0908 3719.165 -233.9854 3722.6211 -232.1499 c3728.5117 -229.0225 3734.6406 -226.7612 3740.2285 -223.0146 c3746.3359 -218.9204 3751.8438 -214.0508 3757.3574 -209.209 c3761.668 -205.4238 3766.2803 -202.2773 3770.2344 -198.1587 c3775.1094 -193.0801 3778.6025 -186.7881 3782.3408 -180.8833 c3790.0381 -168.7266 3798.7109 -155.8022 3800.2598 -141.2119 c3800.9463 -134.7383 3800.9414 -127.7896 3800.1699 -121.3262 cf*u1 D3691.4297 -615.9424 m3686.2451 -612.1201 3677.7637 -611.123 3671.6357 -609.751 c3664.9219 -608.2476 3659.6816 -606.123 3653.7773 -602.6284 c3649.1699 -599.9019 3643.9785 -597.6182 3638.791 -596.2998 c3632.8389 -594.7866 3628.001 -591.1323 3622.4033 -588.7505 c3617.2725 -586.5669 3612.0898 -585.8999 3607.1602 -583.25 c3604.2246 -581.6729 3601.627 -581.1045 3598.3457 -581.4766 c3597.7129 -581.5479 3595.748 -579.3135 3594.3164 -577.7612 C3593.1719 -573.8716 3591.373 -570.0278 3590.2236 -566.5811 c3589.0137 -562.9521 3587.7529 -559.3643 3586.1426 -555.8901 c3584.6172 -552.5967 3581.3672 -549.7339 3579.29 -546.7524 c3577.3398 -543.9526 3577.2695 -539.8804 3574.8477 -537.4419 c3572.3809 -534.959 3571.3438 -531.9658 3569.1367 -529.4473 c3566.9805 -526.9854 3565.4229 -523.4634 3563.8867 -520.584 c3562.2832 -517.5767 3560.0352 -514.7935 3557.7168 -512.3159 c3555.4121 -509.8545 3550.8047 -509.7114 3548.5234 -512.3159 c3542.959 -518.6699 3539.8867 -527.0894 3535.3574 -534.189 c3533.2188 -537.5425 3530.2168 -540.4097 3527.7129 -543.4902 c3524.8164 -547.0532 3522.6992 -551.0747 3519.876 -554.6729 c3517.3076 -557.9473 3514.9844 -561.3062 3513.1357 -565.043 c3511.0508 -569.2559 3510.375 -574.1797 3507.5371 -577.9683 c3506.0371 -579.9702 3504.5791 -581.998 3503.1621 -584.0596 c3501.9648 -585.8032 3501.0645 -588.3228 3499.585 -589.8174 c3497.1279 -592.2988 3495.542 -594.9087 3494.7012 -597.9941 C3493.8125 -597.4897 3492.7295 -597.1958 3491.4482 -597.2095 c3483.7969 -597.292 3476.2637 -598.3662 3468.7041 -599.4629 c3460.4688 -600.6577 3452.0381 -601.874 3443.8672 -603.4917 c3436.7773 -604.8945 3430.1563 -607.0684 3422.8389 -607.5728 c3419.7588 -607.7852 3416.8945 -608.6304 3413.7871 -608.6304 c3413.6338 -608.6304 3413.5176 -608.6387 3413.4189 -608.6504 C3413.2969 -608.4932 3413.0898 -608.2822 3412.7285 -607.9849 c3411.1318 -606.6714 3409.5557 -605.8374 3407.5215 -605.4365 c3404.1504 -604.772 3400.3838 -606.3438 3399.5254 -609.9761 c3397.2031 -619.8022 3411.3564 -628.9048 3417.1729 -634.5737 c3421.4785 -638.77 3426.0898 -642.6953 3430.417 -646.8481 c3432.3867 -648.7388 3434.9355 -649.8955 3436.9023 -651.7827 c3439.1914 -653.9785 3441.0088 -656.3027 3443.1152 -658.667 c3447.2705 -663.3315 3451.75 -667.6079 3456.0156 -672.2241 c3457.8203 -674.1777 3460.0488 -675.4399 3461.8887 -677.3857 c3462.001 -677.5044 3462.0859 -677.5752 3462.1563 -677.6226 C3462.0742 -677.8125 3462 -678.2275 3462 -679.0864 C3462 -685.939 L3462 -692.3252 3460.0059 -697.6924 3459.1563 -703.9224 c3458.168 -711.1558 3457.2256 -717.7866 3454.0508 -724.4492 c3451.1982 -730.4326 3449.7422 -735.7993 3449.5488 -742.4673 c3449.4531 -745.7734 3449.4844 -748.9814 3448.9072 -752.2544 c3448.2217 -756.144 3447.2559 -759.5693 3447.2559 -763.5576 c3447.2559 -771.1411 3441.4082 -789.6494 3453.2051 -791.7158 c3459.209 -792.7676 3463.8672 -788.2207 3467.6846 -784.2256 c3472.7236 -778.9521 3478.7852 -774.9858 3484.5547 -770.5352 c3489.998 -766.3354 3494.7324 -761.022 3500.583 -757.3984 c3506.9102 -753.48 3511.8037 -748.7056 3517.3154 -743.7778 c3519.7207 -741.6279 3522.3125 -740.6221 3525.2266 -739.395 c3527.9063 -738.2671 3530.1621 -736.5273 3532.4502 -734.7505 c3534.5605 -733.1113 3536.5586 -731.3789 3538.8301 -729.9619 c3541.6357 -728.2124 3543.0693 -731.3765 3545.2715 -732.666 c3550.7715 -735.8882 3557.3154 -736.356 3563.4336 -737.5107 c3570.6035 -738.8643 3577.2676 -743.332 3583.9629 -746.0957 c3589.8818 -748.5391 3595.8027 -749.6982 3601.2324 -753.2236 c3603.3066 -754.5693 3605.6904 -756.1689 3608.0967 -756.8252 c3608.1885 -756.8506 3611.6543 -757.8633 3610.9404 -757.5063 c3613.0879 -758.5801 3615.3223 -760.0439 3617.6328 -760.7314 c3623.5234 -762.4834 3627.5068 -767.9551 3633.8145 -768.7617 c3636.3086 -769.0806 3638.0439 -769.7666 3640.6465 -769.2969 c3643.5586 -768.7715 3645.5674 -765.6943 3646.1299 -763.0303 c3647.417 -756.9385 3644.4736 -751.4175 3641.8848 -746.1484 c3640.4766 -743.2822 3639.3994 -740.3657 3638.5664 -737.2842 c3637.4336 -733.0918 3634.9844 -729.3867 3633.3965 -725.3257 c3630.833 -718.7725 3629.0723 -711.9346 3626.6182 -705.3364 c3623.7861 -697.7256 3623.5762 -690.8975 3623.5762 -682.8809 c3623.5762 -679.439 3622.8838 -678.8384 3625.8486 -677.2925 c3628.6543 -675.8291 3631.7051 -674.8823 3634.6152 -673.6533 c3641.4863 -670.7515 3647.8301 -666.8975 3654.6826 -663.9775 c3660.4053 -661.5396 3666.1367 -658.8257 3670.916 -654.771 c3676.1543 -650.3267 3680.2236 -644.9473 3685.3613 -640.3906 c3688.9922 -637.1709 3693.1641 -634.2656 3695.5889 -629.9463 c3698.6553 -624.4839 3695.9766 -619.2949 3691.4297 -615.9424 cf0 D3681.5986 -626.5142 m3676.9629 -630.7017 3672.5625 -634.7041 3668.332 -639.3052 c3663.7109 -644.3315 3658.668 -647.8584 3652.4854 -650.8091 c3646.5068 -653.6621 3640.6016 -656.3916 3634.6973 -659.4014 c3628.7002 -662.458 3621.6279 -663.8999 3616.1982 -667.9824 c3610.4922 -672.272 3610.5762 -678.1787 3610.5762 -684.7544 c3610.5762 -692.6973 3610.9766 -699.5747 3613.5117 -707.1826 c3615.7207 -713.8125 3617.9355 -720.4629 3620.2305 -727.0684 c3621.4307 -730.5229 3622.9082 -733.8906 3624.4863 -737.1865 c3626.2266 -740.8228 3627.1484 -744.7471 3628.7373 -748.4648 c3629.4717 -750.1826 3630.2695 -751.8667 3631.084 -753.5435 C3630.0176 -752.6909 3629.0107 -751.8135 3628.209 -751.2778 c3624.9707 -749.1128 3620.9785 -748.0195 3617.502 -746.2813 c3614.8887 -744.9746 3612.2373 -744.7085 3609.7793 -743.1768 c3607.4297 -741.7134 3605.0918 -740.2275 3602.6133 -738.9883 c3596.3203 -735.8423 3589.2734 -734.4536 3582.8584 -731.4302 c3576.6777 -728.5166 3570.5693 -725.5205 3563.7754 -724.4307 c3560.6611 -723.9316 3557.9111 -723.3965 3554.9375 -722.3921 c3551.7793 -721.3252 3550.626 -719.9136 3547.2637 -718.0146 c3541.9834 -715.0332 3536.0039 -716.4082 3531.1377 -719.4424 c3528.7188 -720.9507 3526.5469 -722.9355 3524.334 -724.7222 c3521.7607 -726.7993 3519.167 -727.7339 3516.2031 -729.0728 c3509.9795 -731.8843 3505.4209 -737.2598 3500.5176 -741.832 c3498.291 -743.9082 3495.3486 -745.3516 3492.7744 -746.9458 c3489.2568 -749.124 3486.1865 -752.1211 3483.0918 -754.8477 c3477.6533 -759.6382 3471.8828 -763.9199 3466.0869 -768.2661 c3463.6611 -770.0854 3461.4629 -771.8091 3459.417 -774.0381 c3459.3789 -774.0796 3459.3379 -774.1187 3459.2998 -774.1602 C3459.6182 -772.1333 3460.2598 -770.1846 3460.2598 -768.0786 c3460.2598 -760.9326 3462.042 -754.2954 3462.5029 -747.1895 c3462.6992 -744.1631 3462.3975 -741.1099 3462.8047 -738.0918 c3463.2246 -734.9854 3464.6387 -732.4019 3465.9658 -729.6182 c3469.1162 -723.0078 3470.7314 -716.3096 3471.585 -709.0654 c3472.3086 -702.9199 3474.4844 -697.2007 3475.0547 -691.0269 c3475.3652 -687.666 3475.1064 -684.1733 3475.1064 -680.7998 c3475.1064 -676.9287 3475.3457 -673.7612 3472.9883 -670.5059 c3470.7666 -667.4385 3467.7715 -665.6797 3465.208 -663.0317 c3462.1455 -659.8687 3459.4707 -656.3901 3455.8984 -653.7578 c3456.7021 -654.3506 3453.7305 -651.0205 3453.2754 -650.5615 c3452.0996 -649.375 3451.0908 -647.7827 3450.0605 -646.4502 c3447.8584 -643.604 3444.5635 -641.0728 3441.6211 -639.022 c3435.2773 -634.6006 3429.6191 -628.4521 3423.9932 -623.0972 c3423.21 -622.3516 3422.4033 -621.6338 3421.5879 -620.9272 C3428.5508 -619.9131 3435.7725 -619.4287 3442.5088 -617.3989 c3450.4053 -615.0195 3458.5889 -614.5322 3466.6826 -613.064 c3474.9063 -611.5723 3483.0605 -610.3003 3491.4482 -610.2095 c3494.1475 -610.1802 3495.9727 -608.8081 3496.9336 -606.9683 C3500.6113 -608.8042 3506.5605 -606.9375 3507.085 -601.4253 c3507.1748 -600.4771 3508.1992 -599.6309 3508.7773 -599.0098 c3510.333 -597.3369 3511.3076 -595.6406 3512.4453 -593.666 c3514.8467 -589.4976 3518.5361 -585.9385 3520.5557 -581.6055 c3522.0684 -578.3613 3522.96 -574.8862 3524.3613 -571.604 c3525.9375 -567.9116 3528.4746 -564.6353 3530.9238 -561.4937 c3533.123 -558.6709 3534.7188 -555.502 3536.9053 -552.6826 c3539.4648 -549.3823 3542.3672 -546.3677 3544.9004 -543.043 c3547.4746 -539.6631 3549.8057 -536.2676 3551.791 -532.5117 c3552.3984 -531.3608 3552.959 -530.1597 3553.5293 -528.959 C3554.9707 -531.4863 3556.3262 -534.1157 3558.0127 -536.5244 c3560.4307 -539.9775 3564.3711 -545.2271 3566.3516 -549.8672 c3568.7656 -555.52 3573.8271 -559.3901 3575.9756 -565.0981 c3577.2305 -568.4326 3578.2754 -571.8242 3579.4014 -575.2031 c3580.209 -577.6265 3583.0527 -582.3682 3582.2568 -584.8662 c3580.3838 -590.7412 3586.6348 -594.126 3591.1035 -592.377 C3591.5449 -592.6592 3591.9707 -592.9297 3592.3242 -593.187 c3594.9385 -595.0869 3598.1211 -593.3467 3600.5977 -594.4756 c3602.9072 -595.5273 3604.8916 -597.1489 3607.3594 -597.9014 c3610.6133 -598.8936 3614.1602 -599.2598 3617.2998 -600.5957 c3623.0029 -603.0229 3627.917 -606.7944 3633.9688 -608.4878 c3640.2227 -610.2383 3645.584 -612.8975 3651.1836 -616.2114 c3657.0527 -619.6851 3663.2969 -621.1934 3669.8848 -622.668 c3673.3203 -623.4375 3676.7285 -624.2773 3680.0996 -625.2998 c3680.7939 -625.5103 3681.4756 -625.7422 3682.1484 -625.9917 C3681.9619 -626.1621 3681.791 -626.3491 3681.5986 -626.5142 cf*U*u1 D3412.7197 -1829.9482 m3409.9297 -1828.3486 3408.0322 -1826.6191 3404.7061 -1826.2285 c3401.6289 -1825.8662 3398.5918 -1825.2285 3395.5146 -1824.833 c3388.0967 -1823.8789 3380.1348 -1825.2861 3373.3896 -1828.4502 c3367.2832 -1831.3145 3361.8076 -1832.2637 3356.6563 -1836.9902 c3351.3594 -1841.8516 3346.875 -1847.0068 3342.8545 -1852.9883 c3341.5527 -1854.9258 3340.4277 -1856.9219 3339.418 -1858.9561 C3339.2441 -1858.1709 3339.0635 -1857.3877 3338.8672 -1856.6094 c3335.627 -1843.7842 3328.417 -1832.4277 3318.0244 -1824.3252 c3314.0098 -1821.1953 3309.8262 -1817.5088 3304.9043 -1815.9082 c3298.7266 -1813.9004 3291.4258 -1814.2236 3284.9707 -1813.6641 c3273.4824 -1812.667 3259.6426 -1810.8945 3252.2734 -1821.6563 c3247.6602 -1828.3945 3248.4512 -1838.1777 3249.458 -1845.8281 c3251.0801 -1858.1426 3256.6133 -1868.6133 3263.8975 -1878.5166 c3267.543 -1883.4717 3271.0918 -1887.7031 3276.0127 -1891.4277 c3281.0938 -1895.2754 3287.1514 -1897.752 3293.0371 -1900.0713 c3294.1777 -1900.5205 3295.3281 -1900.9668 3296.4785 -1901.4121 C3293.4922 -1902.1045 3290.5176 -1902.8828 3287.5059 -1903.6377 c3284.0488 -1904.5039 3280.6973 -1905.6543 3277.2607 -1906.5977 c3274.1787 -1907.4443 3271.0273 -1907.5039 3267.9785 -1908.5205 c3265.3125 -1909.4092 3262.6553 -1910.8887 3260.1729 -1912.1973 c3258.8721 -1912.8828 3257.6426 -1913.6797 3256.3184 -1914.333 c3254.5801 -1915.1895 3252.8271 -1914.9004 3251.0254 -1915.3965 c3244.9707 -1917.0615 3238.8926 -1922.2832 3233.9072 -1925.9229 c3228.6855 -1929.7363 3223.6055 -1933.8027 3219.3418 -1938.6875 c3211.4355 -1947.7461 3206.7578 -1962.5156 3212.585 -1973.8799 c3218.7285 -1985.8594 3229.9951 -1990.5527 3242.7891 -1991.1396 c3257.6426 -1991.8213 3270.7373 -1984.9854 3283.9834 -1979.0605 c3290.2363 -1976.2637 3295.7881 -1972.0791 3301.4102 -1968.2275 c3306.8184 -1964.5225 3310.832 -1959.1787 3315.4707 -1954.6191 c3320.9365 -1949.2461 3326.2207 -1942.8174 3330.3086 -1935.8877 C3330.3945 -1936.2266 3330.4766 -1936.5654 3330.5752 -1936.9053 c3332.0771 -1942.0488 3332.334 -1947.4111 3333.7646 -1952.5117 c3335.3262 -1958.083 3338.6025 -1962.8691 3341.1865 -1967.9629 c3345.9844 -1977.4238 3353.8867 -1989.5186 3363.8809 -1994.1357 c3373.1514 -1998.4199 3384.9902 -1997.9043 3392.8369 -1991.2109 c3400.9824 -1984.2617 3405.2031 -1973.5752 3404.6855 -1963.1426 c3404.4082 -1957.5693 3403.9932 -1952.7451 3401.7051 -1947.5664 c3400.5508 -1944.9531 3399.2402 -1942.4893 3397.7012 -1940.083 c3396.3164 -1937.916 3395.8652 -1935.3066 3394.2744 -1933.2305 C3393.6621 -1932.2402 3392.8691 -1931.4238 3391.8965 -1930.7813 C3391.1826 -1930.1875 3389.0527 -1929.3418 3388.5645 -1928.6621 c3387.2793 -1926.8711 3385.5469 -1925.3105 3384.1133 -1923.582 c3383.1963 -1922.4785 3382 -1921.2539 3379.8926 -1919.8242 c3378.1602 -1918.6494 3376.5615 -1916.8457 3374.7998 -1915.5391 c3370.3535 -1912.2402 3366.2148 -1910.3174 3360.8926 -1908.8115 c3358.6211 -1908.168 3356.6328 -1907.2129 3354.6406 -1906 C3359.9336 -1905.4258 3365.2383 -1904.8115 3370.4043 -1903.5195 c3383.167 -1900.3281 3396.4814 -1897.3584 3407.9072 -1890.5566 c3413.0557 -1887.4912 3417.4824 -1883.0645 3421.3193 -1878.5088 c3425.8057 -1873.1846 3426.1035 -1867.252 3425.9375 -1860.5625 c3425.6514 -1848.9736 3423.6211 -1836.1992 3412.7197 -1829.9482 cf0 D3324.5771 -1915.9385 m3323.167 -1921.7979 3319.6641 -1928.3096 3317.0361 -1931.9883 c3314.5771 -1935.4297 3312.6113 -1939.2676 3309.6387 -1942.3027 c3306.252 -1945.7607 3302.835 -1949.1895 3299.4102 -1952.6143 c3291.2529 -1960.7725 3281.2051 -1966.1475 3270.7383 -1970.7773 c3260.3164 -1975.3887 3249.8369 -1979.8799 3238.1641 -1977.9688 c3228.6895 -1976.417 3222.0146 -1968.8447 3223.3594 -1959.1035 c3224.6191 -1949.9678 3232.2354 -1943.3955 3239.1514 -1938.1309 c3243.6436 -1934.7119 3248.3457 -1931.5684 3253.2422 -1928.7607 c3254.9102 -1927.8047 3256.5215 -1927.8877 3258.9092 -1927.2178 c3261.2158 -1926.5703 3263.4639 -1925.3057 3265.5479 -1924.1533 c3274.8301 -1919.0195 3285.7676 -1918.0781 3295.9199 -1914.8623 c3305.5234 -1911.8203 3315.5762 -1912.0674 3325.4482 -1912.1553 C3325.1621 -1913.418 3324.8799 -1914.6797 3324.5771 -1915.9385 cf3316.3447 -1894.7324 m3311.1973 -1893.5664 3306.0645 -1891.0098 3301.0762 -1889.2354 c3291.3018 -1885.7578 3282.4912 -1881.6641 3276.0967 -1873.2549 c3269.7295 -1864.8809 3264.3936 -1856.1689 3262.4492 -1845.7012 c3261.541 -1840.8105 3260.7383 -1833.7939 3263.0156 -1829.0596 c3264.376 -1826.2305 3267.3945 -1826.0898 3270.2246 -1826.0117 c3276.1895 -1825.8477 3282.5127 -1826.376 3288.4453 -1826.9961 c3292.8975 -1827.4609 3298.2617 -1826.8271 3302.2959 -1828.915 c3306.5293 -1831.1064 3310.5234 -1834.7256 3313.9717 -1837.9521 c3321.6885 -1845.1738 3326.0781 -1855.9385 3327.5752 -1866.2881 c3328.3828 -1871.8799 3328.5752 -1877.4434 3328.4551 -1883.0938 c3328.3643 -1887.415 3327.9717 -1891.6182 3329.0244 -1895.748 C3324.7617 -1895.7422 3320.5273 -1895.6797 3316.3447 -1894.7324 cf3359.0049 -1921.791 m3363.0996 -1922.9492 3366.002 -1925.1055 3369.3906 -1927.6191 c3368.2031 -1926.7383 3371.8975 -1930.0771 3372.3066 -1930.3555 c3373.291 -1931.0225 3374.7354 -1932.4668 3375.4023 -1933.4512 c3377.5195 -1936.5703 3379.1514 -1938.1191 3382.7139 -1940.1865 c3385.248 -1941.6563 3386.626 -1946.7822 3388.1719 -1949.4102 c3392.4023 -1956.6025 3393.5918 -1967.1836 3389.3232 -1974.5078 c3387.3604 -1977.876 3385.1279 -1981.3506 3381.6777 -1983.3262 c3379.2744 -1984.7031 3374.043 -1983.7363 3371.4453 -1983.1367 c3367.3223 -1982.1855 3363.9648 -1977.8057 3361.2158 -1974.8262 c3357.9434 -1971.2793 3355.4785 -1967.1543 3353.2031 -1962.9248 c3351.0537 -1958.9297 3348.5283 -1954.9824 3346.874 -1950.7539 c3345.2773 -1946.6738 3345.3662 -1941.8711 3344.1084 -1937.6387 c3343.0527 -1934.0869 3341.916 -1930.1318 3341.5371 -1926.4238 c3341.3525 -1924.6299 3341.3359 -1922.8701 3341.0342 -1921.0781 c3340.8926 -1920.2246 3340.7461 -1919.3711 3340.5957 -1918.5195 c3340.4492 -1917.6787 3341.0322 -1916.3379 3340.5977 -1916.9492 c3341.1357 -1916.1904 3341.4668 -1915.4375 3341.6396 -1914.7061 C3343.6729 -1915.7832 3345.8037 -1916.4893 3348.2031 -1917.2236 c3349.7822 -1917.7061 3351.5605 -1919.1406 3353.1602 -1919.8008 c3355.0781 -1920.5928 3357.0088 -1921.2256 3359.0049 -1921.791 cf3412.9414 -1867.1787 m3412.8076 -1870.6582 3407.1641 -1874.752 3404.8496 -1876.8379 c3401.2607 -1880.0742 3396.4326 -1882.1426 3391.9688 -1883.8301 c3382.4609 -1887.4258 3372.1738 -1890.2334 3362.1768 -1892.0303 c3356.7051 -1893.0127 3351.1104 -1893.291 3345.6104 -1894.0586 c3344.5684 -1894.2041 3343.5078 -1894.3506 3342.4443 -1894.4951 C3344.8262 -1881.7002 3347.6738 -1869.0811 3355.0078 -1858.168 c3357.7725 -1854.0547 3361.0195 -1850.4961 3364.707 -1847.2031 c3368.9355 -1843.4268 3373.2715 -1842.8086 3378.2383 -1840.4785 c3383.7988 -1837.8701 3389.4541 -1837.29 3395.5146 -1837.833 c3398.2686 -1838.0791 3400.834 -1839.0596 3403.6191 -1839.1006 c3403.4717 -1839.0977 3407.8008 -1842.1436 3408.1758 -1842.7148 c3410.1191 -1845.6855 3411.5498 -1847.2197 3411.832 -1851.0742 c3412.2305 -1856.5098 3413.1523 -1861.6631 3412.9414 -1867.1787 cf*U209.9463 -777.8994 m207.895 -770.5337 204.1904 -763.688 201.2832 -756.6475 c198.6304 -750.2241 195.9253 -743.9736 192.6641 -737.8135 c189.3491 -731.5527 184.7769 -726.0103 180.3813 -720.4854 c176.4316 -715.5205 171.1606 -712.8174 166.4634 -708.7588 c163.9512 -706.5879 162.3369 -704.3696 159.4087 -702.5962 c156.0161 -700.5415 152.5649 -698.3711 149.0225 -696.6006 c144.0005 -694.0898 139.3901 -691.5054 133.7505 -690.8594 c125.4297 -689.9063 125.522 -702.917 133.7505 -703.8594 c137.2119 -704.2559 141.0942 -707.1421 144.1743 -708.6816 c147.1328 -710.1606 149.9824 -712.1494 152.8472 -713.8213 c154.8364 -714.9824 156.2368 -717.0576 158.4199 -718.9438 c161.1216 -721.2783 164.3413 -722.9204 167.0469 -725.2217 c171.6797 -729.1621 175.5879 -734.9404 178.8955 -739.9961 c182.958 -746.2051 186.0337 -753.228 188.7476 -760.1035 c191.3457 -766.6875 194.5928 -772.9829 196.8901 -779.688 c199.562 -787.4863 200.5259 -796.0371 201.1509 -804.2144 c201.7056 -811.4766 201.6519 -818.8682 201.1909 -826.1338 c200.7305 -833.396 197.9849 -840.4434 194.8999 -846.98 c189.1162 -859.2368 176.9829 -866.5166 165.2217 -872.2974 c152.4097 -878.5947 138.2427 -883.2109 124.3433 -886.3726 c117.1606 -888.0059 109.9951 -888.4585 102.6509 -888.4297 c95.2695 -888.4004 86.9434 -888.5 80.498 -884.4717 c77.6372 -882.6836 75.2612 -880.1235 72.4224 -878.231 c69.9043 -876.5522 67.1987 -875.3486 65.71 -872.7231 c61.9556 -866.1025 60.064 -858.7778 57.9795 -851.5215 c54.1719 -838.2676 52.5796 -822.7134 55.4565 -809.1191 c56.8164 -802.6934 58.52 -796.2822 60.5845 -790.0508 c61.5898 -787.0171 61.9771 -783.6543 63.4082 -780.7969 c64.8462 -777.9263 67.1768 -775.5625 68.9175 -772.8901 c70.4053 -770.605 71.4785 -767.8086 72.7827 -765.3984 c74.3301 -762.5396 76.707 -760.2153 78.96 -757.9185 c83.6968 -753.0898 87.8804 -747.4844 94.0127 -744.3403 c98.9365 -741.8159 106.3569 -742.3276 111.5767 -743.2959 c118.5044 -744.5806 124.748 -747.9658 130.5801 -751.7803 c142.1719 -759.3628 151.3877 -768.7295 157.1758 -781.3706 c158.4399 -784.1318 157.835 -788.9063 157.7373 -791.8716 c157.6206 -795.4116 156.9648 -798.939 156.2739 -802.4038 c154.812 -809.7329 152.2197 -816.1357 146.7134 -821.2461 c144.2402 -823.542 141.9878 -824.7393 138.8325 -825.8564 c135.8301 -826.9194 133.1279 -828.5244 130.1665 -829.5679 c124.6836 -831.5 117.0288 -830.2402 111.5791 -828.8174 c96.7061 -824.9331 92.1387 -810.3071 94.0273 -796.4492 c94.6211 -792.0903 94.9458 -787.1089 97.8643 -783.5879 c100.3931 -780.5381 104.0029 -778.7544 107.7139 -777.5947 c111.4399 -776.4302 115.6016 -776.1025 119.4595 -776.7197 c124.3027 -777.4951 129.5542 -781.4272 133.9805 -783.4878 c134.9634 -783.9453 139.3843 -785.2041 139.6191 -785.9346 c140.1255 -787.5122 139.9717 -789.8936 139.708 -791.52 c139.1084 -795.2212 137.1382 -798.8584 133.9961 -800.9692 c132.54 -801.9473 133.7705 -801.6313 131.7231 -801.6997 c130.2622 -801.7485 128.8018 -801.7676 127.3403 -801.7646 c125.6343 -801.7612 123.9331 -801.6655 122.2344 -801.5112 c121.7764 -801.4697 121.4404 -801.4229 121.1855 -801.3789 C119.8037 -798.9287 116.3223 -797.7383 113.749 -798.4463 c110.0146 -799.4731 108.7061 -802.9375 109.2095 -806.4419 c110.5088 -815.4907 124.4033 -814.8848 130.9731 -814.7222 c141.7344 -814.4561 149.1753 -806.0688 151.9839 -796.1416 c153.3799 -791.209 153.4956 -784.2817 151.0933 -779.6606 c147.9336 -773.5835 140.1841 -772.3208 134.4536 -769.4199 c128.7739 -766.5449 123.9023 -764.0088 117.4585 -763.5127 c111.8179 -763.0781 105.8438 -764.2524 100.6284 -766.3545 c95.7319 -768.3276 91.2866 -771.2412 87.8984 -775.3286 c83.5947 -780.5205 82.478 -786.4927 81.4917 -792.9932 c80.4756 -799.6865 80.0732 -806.1362 81.3667 -812.8159 c82.769 -820.0566 86.9346 -826.5029 91.4658 -832.1519 c99.4897 -842.1553 115.7217 -843.5156 127.4175 -843.1387 c133.8608 -842.9312 139.5327 -839.4648 145.4189 -837.25 c151.0801 -835.1191 157.7524 -830.3315 161.0625 -825.126 c168.7358 -813.0557 171.8208 -797.3862 170.4541 -783.2266 c169.1177 -769.3818 158.7329 -757.9131 148.604 -749.2842 c138.4097 -740.6001 126.8096 -732.9448 113.4414 -730.4648 c107.1382 -729.2959 100.7075 -729.5488 94.4253 -730.6895 c87.7588 -731.8999 82.6191 -736.0513 77.6538 -740.3555 c72.9209 -744.4575 68.2388 -749.832 64.3945 -754.7734 c60.5161 -759.7588 58.1704 -765.5996 54.4922 -770.7222 c50.6523 -776.0688 49.5688 -782.0083 47.5376 -788.1392 c45.3008 -794.8882 43.5063 -802.0283 42.2671 -809.0322 c39.7642 -823.1792 41.6069 -837.8691 44.6338 -851.7319 c46.0664 -858.2935 48.0981 -865.2051 50.6782 -871.3975 c52.0269 -874.6343 53.6035 -877.73 55.332 -880.7788 c57.3979 -884.4219 60.9946 -886.2114 64.3926 -888.4771 c69.9087 -892.1543 74.3081 -896.5513 80.6289 -898.9219 c87.9141 -901.6533 96.8418 -901.4067 104.4961 -901.437 c119.7466 -901.4971 134.2734 -897.7188 148.6055 -892.8115 c161.5605 -888.376 174.3252 -883.1982 185.7393 -875.5303 c191.0264 -871.978 195.9102 -867.7998 200.1484 -863.0474 c204.8433 -857.7827 207.5605 -850.7896 210.0596 -844.2891 c215.4136 -830.3618 215.1553 -815.0469 213.8296 -800.3599 c213.1494 -792.8286 211.9766 -785.189 209.9463 -777.8994 cfUu*u1 D0.300267 0.756374 0 0 0.941176 0.247059 1 Xa3482.3682 -933.9756 m3479.1221 -923.1904 3474.0703 -910.0415 3460.8633 -909.1357 c3456.8477 -908.8608 3452.8281 -909.9341 3448.9307 -911.2461 C3442.0117 -906.2871 3430.7607 -911.8091 3424.502 -915.7666 c3418.9434 -919.2822 3413.8555 -922.1836 3407.7637 -924.6357 c3401.1426 -927.3008 3395.9307 -931.6411 3390.208 -935.7661 c3385.498 -939.1611 3381.9492 -943.8364 3379.3203 -948.9712 c3378.3125 -950.9399 3377.8174 -953.4277 3376.5938 -955.2271 c3375.2363 -957.2217 3373.7588 -959.1382 3372.3291 -961.0806 c3370.1289 -964.0703 3367.4453 -967.5161 3365.2725 -971.2095 C3360.3887 -966.5723 3355.0645 -962.4473 3350.0654 -957.936 c3347.5469 -955.6626 3345.6494 -952.9009 3343.3516 -950.4209 c3340.9863 -947.8672 3338.2422 -945.6582 3335.6201 -943.3794 c3327.0078 -935.8955 3316.6436 -929.1631 3305.2314 -927.0645 c3294.5049 -925.0923 3283.3076 -926.1558 3273.9707 -932.0654 c3273.6533 -932.2661 3273.3477 -932.4805 3273.0381 -932.6904 C3270.3037 -932.8604 3267.6855 -934.5225 3267.1201 -937.6748 C3262.418 -942.5195 3258.8926 -948.5239 3256.3955 -954.7578 c3252.8066 -963.7134 3251.2354 -973.4653 3251.4502 -983.0977 c3251.5449 -987.3071 3252.2949 -991.3662 3253.457 -995.3164 C3253.1543 -996.249 3252.8477 -997.1797 3252.54 -998.104 c3251.2266 -1002.0537 3254.1982 -1005.2725 3257.6006 -1006.1035 C3259.5 -1010.2266 3261.6387 -1014.2612 3263.7188 -1018.2578 C3264.8906 -1025.2861 3266.0625 -1032.3149 3267.2334 -1039.3433 c3267.9121 -1043.4155 3273.5039 -1045.3643 3276.7813 -1043.2275 c3276.9033 -1043.1484 3277.0068 -1043.0537 3277.124 -1042.9702 C3279.9258 -1046.8828 3283.0859 -1050.5703 3286.3242 -1054.0586 c3295.3301 -1063.7617 3305.8184 -1072.0225 3314.666 -1081.9443 c3318.3887 -1086.1191 3321.4658 -1090.8301 3324.5635 -1095.4717 c3327.6709 -1100.1309 3332.6367 -1103.9229 3336.2588 -1108.2314 c3341.748 -1114.7598 3346.5781 -1122.833 3354.1836 -1127.1904 c3355.0117 -1127.665 3355.8281 -1127.9316 3356.6172 -1128.041 C3359.6611 -1130.75 3365.8965 -1130.5195 3367.9297 -1125.4053 c3369.4365 -1121.6162 3375.5244 -1118.1182 3378.7188 -1115.8613 c3384.4551 -1111.8066 3388.9902 -1106.2959 3394.2031 -1101.6357 c3398.8379 -1097.4922 3402.5576 -1093.3271 3406.4033 -1088.3916 c3410.9688 -1082.5313 3416.75 -1078.0596 3421.6182 -1072.498 c3432.0098 -1060.6255 3441.5078 -1048.2725 3450.9756 -1035.6484 c3458.5723 -1025.5195 3464.959 -1014.7373 3472.0957 -1004.2715 c3479.3662 -993.6108 3483.1602 -982.8867 3484.5898 -970.0781 c3485.9004 -958.3359 3485.791 -945.3452 3482.3682 -933.9756 cf0 D3285.2256 -947.1138 m3284.7793 -947.1699 3284.3389 -947.2432 3283.9082 -947.3408 C3283.1143 -946.3457 3282.2051 -945.4521 3281.1475 -944.7314 c3280.7588 -944.4663 3280.373 -944.2441 3279.9834 -944.0537 C3279.9844 -943.9243 3279.9844 -943.7954 3279.9854 -943.666 C3283.6465 -941.0615 3287.5293 -939.6079 3291.5039 -939.0596 C3288.7539 -940.9375 3286.5332 -943.7949 3285.2256 -947.1138 Cf3296.7188 -1030.7861 m3297.3359 -1030.7793 3297.9609 -1030.7212 3298.5938 -1030.6074 C3298.7031 -1032.791 3299.0488 -1035.9463 3299.1719 -1039.2158 C3298.3291 -1036.4141 3297.5254 -1033.5996 3296.7188 -1030.7861 Cf3296.4404 -1017.3433 m3295.9473 -1017.0327 3295.4785 -1016.688 3295.0576 -1016.2798 C3294.3242 -1015.6572 3293.6885 -1014.9805 3293.1074 -1014.2671 C3294.1611 -1010.0205 3294.5576 -1005.6982 3294.7383 -1001.3013 c3294.8809 -997.8198 3295.5537 -994.7349 3296.5137 -991.6255 C3297.3428 -992.1597 3298.25 -992.6074 3299.2441 -992.9565 C3298.5059 -996.1094 3297.6289 -999.2363 3296.6211 -1002.3022 c3295.4932 -1005.7334 3297.1689 -1008.3125 3299.6523 -1009.5156 C3298.9785 -1012.3994 3298.0342 -1015.5801 3296.4404 -1017.3433 Cf3308.6357 -1057.3623 m3309.0615 -1056.644 3309.417 -1055.875 3309.7402 -1055.084 C3310.3721 -1057.0171 3311.1377 -1058.9043 3312.0938 -1060.7251 C3310.9492 -1059.5918 3309.7959 -1058.4722 3308.6357 -1057.3623 Cf3313.8379 -945.5469 m3313.7617 -945.6167 3313.7061 -945.6963 3313.6367 -945.7695 C3313.165 -945.2637 3312.6953 -944.7559 3312.2197 -944.2554 c3311.5303 -943.5303 3310.8125 -942.8081 3310.0684 -942.1094 C3311.7686 -942.834 3313.4453 -943.6611 3315.0918 -944.5654 C3314.6582 -944.8613 3314.2363 -945.1807 3313.8379 -945.5469 cf3339.8496 -1079.7715 m3340.4336 -1079.8271 3341.0225 -1079.7959 3341.6016 -1079.6924 C3341.958 -1081.1758 3342.3721 -1082.6709 3342.8594 -1084.1123 C3341.8535 -1082.667 3340.8477 -1081.2217 3339.8496 -1079.7715 Cf3341.5996 -1024.9443 m3341.1387 -1023.8589 3340.6191 -1022.7871 3339.9863 -1021.7402 c3337.6973 -1017.9575 3332.7275 -1017.8442 3329.918 -1020.3169 C3328.8076 -1014.9468 3327.6348 -1009.5889 3325.9482 -1004.4014 c3325.7959 -1003.9321 3325.6016 -1003.5034 3325.3779 -1003.1079 C3326.6436 -1002.3013 3327.6426 -1001.0684 3328.0469 -999.4609 c3328.0771 -999.3408 3328.0967 -999.2212 3328.124 -999.1016 C3328.3018 -999.2349 3328.4736 -999.3716 3328.6523 -999.5044 c3331.7373 -1001.7983 3335.3555 -1004.3755 3339.2148 -1006.3828 C3339.5586 -1007.814 3339.9482 -1009.2534 3340.3701 -1010.6934 C3341.4746 -1015.4917 3342.3604 -1020.3271 3343.0352 -1025.1934 C3342.5713 -1025.0591 3342.0898 -1024.9761 3341.5996 -1024.9443 Cf3364.2539 -1018.7695 m3362.6299 -1015.6987 3360.8193 -1012.7217 3358.9434 -1009.8281 C3360.5195 -1010.1904 3362.127 -1010.4321 3363.7617 -1010.5303 c3366.7676 -1010.7104 3369.1094 -1008.3857 3370.0293 -1005.7583 c3371.7422 -1000.8657 3369.2813 -995.749 3365.7695 -991.1855 C3368.0371 -992.0752 3370.6992 -991.8491 3372.4004 -989.8979 C3372.9805 -991.8755 3374.3037 -993.0166 3375.8818 -993.459 C3374.5723 -997.833 3373.1543 -1002.1724 3371.7188 -1006.5059 C3369.1504 -1010.541 3366.6553 -1014.6284 3364.2539 -1018.7695 Cf3372.9658 -1103.7979 m3373.8057 -1102.7666 3374.6289 -1101.7227 3375.4316 -1100.6641 C3375.6992 -1100.707 3375.9697 -1100.7402 3376.2412 -1100.75 C3375.1631 -1101.7813 3374.0723 -1102.7969 3372.9658 -1103.7979 Cf3370.2959 -1069.3047 m3370.3779 -1067.9492 3370.4043 -1066.5859 3370.4414 -1065.2246 C3371.2012 -1064.5283 3371.9092 -1063.8467 3372.5547 -1063.2026 c3374.375 -1061.3857 3376.1787 -1059.6113 3377.9463 -1057.8184 C3375.8281 -1061.7729 3373.3447 -1065.9111 3370.2959 -1069.3047 Cf3384.626 -983.6997 m3384.7832 -980.2446 3386.8867 -977.2188 3389.0479 -974.5132 C3389.3633 -974.6274 3389.6836 -974.7202 3390.0088 -974.7866 C3388.1045 -977.6968 3386.2959 -980.6611 3384.626 -983.6997 Cf3415.8398 -961.0996 m3415.7383 -960.9004 3415.625 -960.7104 3415.501 -960.5293 C3416.1494 -959.4233 3416.8809 -958.2256 3417.6611 -957.0684 C3417.0527 -958.4111 3416.4424 -959.7559 3415.8398 -961.0996 Cf3426.1104 -937.0786 m3426.1387 -937.4795 3426.1797 -937.8848 3426.2461 -938.2983 C3425.6621 -938.1719 3425.084 -938.0903 3424.5146 -938.0557 C3425.0322 -937.6997 3425.5674 -937.3784 3426.1104 -937.0786 Cf3432.1582 -1039.1016 m3433.5947 -1036.3862 3434.9492 -1033.6201 3436.248 -1030.8198 C3436.5996 -1031.2988 3437.001 -1031.7422 3437.4453 -1032.1328 C3435.6885 -1034.4634 3433.9307 -1036.792 3432.1582 -1039.1016 Cf3438.0566 -987.085 m3436.7803 -990.6641 3435.8428 -994.4434 3434.8789 -998.2109 C3432.3398 -1004.9873 3429.1797 -1012.1196 3426.0166 -1018.9785 c3425.5293 -1020.0356 3425.0068 -1021.0874 3424.498 -1022.1416 C3424.8184 -1020.1152 3425.167 -1018.0938 3425.5605 -1016.0791 C3426.7539 -1013.498 3427.9453 -1010.9155 3429.1133 -1008.3228 c3430.5234 -1005.4263 3431.9023 -1002.5176 3433.001 -999.4609 c3433.3877 -998.3862 3433.4355 -997.3608 3433.2305 -996.4209 C3433.6934 -995.9629 3434.1074 -995.4023 3434.4453 -994.7163 c3435.7256 -992.1196 3436.9414 -989.4932 3438.1387 -986.8589 C3438.1123 -986.9346 3438.084 -987.0093 3438.0566 -987.085 cf3451.3584 -1008.1621 m3451.8955 -1006.5137 3452.4121 -1004.8394 3452.9199 -1003.1348 C3453.1377 -1003.2754 3453.3633 -1003.4004 3453.5938 -1003.5151 C3452.8955 -1005.0586 3452.1543 -1006.626 3451.3584 -1008.1621 Cf3457.9199 -962.1948 m3457.8535 -962.5742 3457.7676 -962.9492 3457.6963 -963.3271 C3455.2803 -961.4419 3451.8555 -961.2773 3449.3779 -963.8599 C3450.1348 -962.5718 3450.8906 -961.2783 3451.6338 -959.96 c3453.3174 -956.9707 3454.9902 -953.981 3456.7734 -951.0562 C3458.3711 -950.1567 3459.6875 -948.6362 3460.2891 -946.9839 c3460.541 -946.2939 3460.7207 -945.6016 3460.8418 -944.9102 C3461.3779 -944.1934 3461.9707 -943.4565 3462.6133 -942.7563 C3461.7441 -949.3223 3459.0254 -955.915 3457.9199 -962.1948 cf3456.5137 -930.9385 m3456.4717 -930.8789 3456.4307 -930.8174 3456.3877 -930.7583 c3455.3848 -929.3711 3454.3828 -928.208 3453.3359 -927.2412 C3453.6523 -925.9775 3453.8535 -924.6934 3453.9316 -923.4121 C3454.6035 -923.1953 3455.2744 -922.9785 3455.9463 -922.7603 c3460.5195 -921.2739 3463.5527 -923.2222 3465.666 -926.542 C3462.2148 -927.2402 3459.1934 -928.8164 3456.5137 -930.9385 Cf*U148.3481 -1866.6025 m156.4009 -1869.0088 159.7261 -1856.5215 151.7144 -1854.127 c146.688 -1852.625 148 -1846.9141 148 -1842.6074 C148 -1818 L148 -1810 135.1797 -1810 135.1797 -1818 C135.0752 -1838 135.1963 -1847.877 v135.3076 -1857.0137 139.3604 -1863.917 148.3481 -1866.6025 cf254.5747 -1812.4131 m255.6226 -1815.7832 255.5083 -1819.6211 256.3711 -1823.0859 c257.1606 -1826.2539 258.5156 -1829.3086 259.9131 -1832.2471 c263.5112 -1839.8154 274.7173 -1833.2148 271.1377 -1825.6865 c268.313 -1819.7441 268.5259 -1813.5107 266.626 -1807.3984 c264.5752 -1800.8008 262.9736 -1794.0566 261.2979 -1787.3574 c259.2642 -1779.2275 246.7271 -1782.6777 248.7622 -1790.8125 c250.5713 -1798.0469 252.3608 -1805.29 254.5747 -1812.4131 cf375.6338 -1880.9629 m373.9814 -1878.4609 373.0786 -1875.542 371.9053 -1872.7969 c369.6025 -1867.4111 366.4995 -1862.2373 362.481 -1857.957 c356.7324 -1851.833 347.5576 -1861.0439 353.2886 -1867.1484 c357.1333 -1871.2441 359.707 -1876.6719 361.665 -1881.8867 c362.8281 -1884.9854 364.4375 -1887.5684 366.2573 -1890.3223 c368.252 -1893.3428 368.1772 -1895.4063 368.1772 -1898.9102 c368.1772 -1905.3516 368.4009 -1911.877 367.4541 -1918.2676 c366.4297 -1925.1797 364.9072 -1932.0137 364.0376 -1938.957 c363.647 -1942.0771 362.5591 -1945.1875 362.1421 -1948.3525 c361.793 -1951.0049 362.0454 -1953.626 361.4238 -1956.2402 c359.8389 -1962.9043 356.9854 -1969.0996 353.5562 -1974.9971 c346.9683 -1986.3281 337.5386 -1995.6973 327.0942 -2003.4824 c316.915 -2011.0703 307.8257 -2020.0664 296.5889 -2026.1553 c284.1992 -2032.8691 268.6865 -2031.3496 255.2871 -2029.1563 c225.7124 -2024.3145 194.4023 -2016.5508 169.0981 -2000.0088 c161.2256 -1994.8623 153.4189 -1989.6406 145.4087 -1984.707 c137.6094 -1979.9043 129.647 -1975.4922 122.6006 -1969.5781 c115.7803 -1963.8545 109.9717 -1957.1084 105.311 -1949.5322 c103.8018 -1947.0791 100.3101 -1945.4688 98.2324 -1943.4043 c96.4048 -1941.5879 93.7964 -1938.7422 93.6035 -1936.0205 c93.0151 -1927.708 80.0107 -1927.6504 80.6035 -1936.0205 c81.0103 -1941.7646 83.7085 -1946.1797 87.2305 -1950.5869 c88.8174 -1952.5732 90.7227 -1954.3027 92.7114 -1955.873 c93.6787 -1956.6377 94.646 -1957.3535 95.6812 -1958.0186 c93.9614 -1956.9141 97.4614 -1961.2461 97.8979 -1961.8623 c106.0806 -1973.416 116.9136 -1982.4531 128.8428 -1989.9238 c141.146 -1997.6289 153.4019 -2005.3369 165.5952 -2013.2227 c178.1997 -2021.374 192.7046 -2026.6533 206.9707 -2031.1377 c221.5723 -2035.7285 236.7578 -2039.0732 251.8311 -2041.6914 c265.7314 -2044.1064 281.1758 -2045.5654 294.7959 -2041.0332 c306.9951 -2036.9736 317.043 -2028.2637 326.7959 -2020.2227 c336.811 -2011.9658 347.0977 -2004.6572 355.4937 -1994.6123 c363.3711 -1985.1875 369.459 -1974.4561 373.127 -1962.7197 c374.9204 -1956.9824 374.4521 -1951.2686 375.7227 -1945.4902 c377.0337 -1939.5244 378.4497 -1933.4775 379.0195 -1927.3525 c379.6836 -1920.2119 381.0962 -1913.4111 381.1694 -1906.1758 c381.2241 -1900.7988 381.9028 -1894.7197 380.3921 -1889.5127 c379.4883 -1886.3955 377.3945 -1883.6279 375.6338 -1880.9629 cfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF