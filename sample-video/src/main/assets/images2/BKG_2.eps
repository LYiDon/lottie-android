%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.1.0%%For: (Evgeny Bakal) ()%%Title: (BKG 2.eps)%%CreationDate: 26.09.18 3:04%%Canvassize: 16383%%BoundingBox: 9 -2153 3837 -1%%HiResBoundingBox: 9 -2153 3837 -1%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1920.5 -1080.5 1920.5 -1080.5%AI3_TileBox: 1524 -1386 2316 -774%AI3_DocumentPreview: Header%AI5_ArtSize: 3840 2160%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1127 839 0.25 1831 940 18 0 0 6 130 0 0%AI5_OpenViewLayers: 7%%PageOrigin:1520 -1380%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 72 8%%BeginData: 3720 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1BFF7FAFFD51FF85A9FD09FFCACFCAFD1CFFAFFF5B85FD51FFAF%7FFD09FFCAFFCACAC3FD1BFF855BAFFD14FFA9FD3DFF85AFFD0AFFCACFCA%FFC9FD1AFF5BFD15FFA9857F855AFD3AFFAF7EFD08FFCFC9FFCACAC9FFC9%FD18FF7FAFFD16FFFD0485FD3BFF85AFFD07FFCAFFCACACACFCACFFD13FF%FD04855BAFFD16FF8585375B5B85FD1CFFAFA97FA985A9FD17FF8585FD08%FFCAFFCACAFFC9CACAFD10FFA9858585AFFFAFFD17FFA985855B7FA9A9FD%18FFAFFD0585AFA9FF8585FD15FFAF85FD09FFCACFCFCACACAC9FD05FFA9%85AFA9FD08FF7FA9AFAFFD1BFFA9A95AA9FD10FFA9A985FD05FFA98584FF%A985A9FD05FF855B7E857FFD11FF7EFD0BFFC9CAC9CAC9FD04FFAF857FAF%85A985FD05FFA98585FD2FFFA9AF858585A985A97FA9AF85AFFD0BFFAFFF%FFAF5BFD10FFA985FD12FF7F85A9FD04FFA95B857F857F85A9FD2EFFAF5B%A985A9FFFFFFAF5BFF855BA9FD10FFAF7FFD0FFFA9857F857FFFFFFFA9AF%FD13FFA9FD33FF5BFD0BFFA9FD12FF85A9FD12FFA97FAF85857FFD46FF85%A9FD1EFFA9A9FD13FFAF84A9FF857EFFFFAFFD41FFA985FD1FFFA985FD18%FFA985A95B85FD04FF85FD3AFF7F85A9FD1FFFA95BA9FD19FFAFFF85857F%855BA9FD39FF85A9FD22FFAF85FD1EFFAFFD3AFFA985FD24FF7FAFFD58FF%AFA9FD24FF85A9FD7EFF7FFD17FFC3FD66FF5BFD17FFC9CACAFD64FF7FA9%FD14FFCAFFCACAFFCAC9FD78FFC9CACACFFD04FFC9CFFD77FFC9FD06FFCA%C3FD78FFC9FD04FFCFC9FD0AFFC9CFFD6DFFCACAFFCAFFC9CFFD08FFCFCA%FFC9CFFD6CFFCAFFC9CAC9CFCAFD08FFC3CAC3FFC9FD6CFFC9C9FFFFFFC9%CAFD07FFCACACFC9CACFFD6CFFCAFD0DFFCACACAC3FFC9FD7AFFCACFFFFF%CACAFD7BFFC9CAC9CACAFDEAFFCBC5C5FD78FFCBC59DFFCBBF97B9A9FD77%FFCBB9BFBFC5B9BF97CBFD77FFA3B99DBF97BF97BFCBFD78FF97BFB9BF97%BFCBFD79FFC596BF97B9A3FD7BFFC5BFB9C5FD7DFFC5C5FDFCFFFDFCFFFD%FCFFFDA1FF8585A95B5BFD7CFF315B3185FD7BFF85373037A9FD69FFA9FD%05FFA9FD0AFF8537315B37AFFD6AFF5BFFFFA985AFFD09FF5B3131373137%31A9FD69FFAF7F8585FD0BFFA985853737313731A9FD69FF8585FD0FFF85%31A97E855BAFFD79FF7F85FD7EFFAFA9FDFCFFFDFCFFFDFCFFFD0BFFCBFD%7BFFCBCBFFCBCBFD63FFCFCAFD16FFC5CBFFFFC5FD63FFC3CFC9CAC9CACA%FD7AFFCAFFC3FFCAFD1AFF9CFD60FFCAC2C3C3FD11FFCBCBFD07FFCBCBFD%5EFFCACACFCAC9CFFD11FFCBC5CBFD06FFCBA3FD27FFA9A9A9FD34FFC9CA%CFC9CACACAFD11FFCBC5CBFD05FFC5FD28FFAF5B855BFD33FFCFCACAFFCA%CACAFD12FFCBC5A3FFCBCB9CFD28FFAF7F5B305B5BA9FD4CFFCBC5C5C5FD%29FF7F855B5B5BA9A9FD7AFFA9857F85FD5BFFA9FD0485FD1EFFA985FD5A%FF5B5B365B7F85FD67FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Fade To Edge Black)(Fade To Edge Black) 0 3 Bd[0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br[0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Neon Rings Vignette)(Neon Rings Vignette) 1 17 Bd[0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B5B6B8B9BABDBEC0C1C3C4C5C7C8CACBCDCFD0D2D3D4D5D7D7D8DADBDBDDDEDFE0E2E3E4E5E6E7E7E8EAEAEBECECEDEDEEEEEEEFEFF0F0F1F1F1F2F2F2F2F3F3F2F3F4F3F3F4F4F4F4F5F4F4F5F5F4F4F4F4F4F4F4F3F3F4F4F3F3F3F3F2F3F2F2F2F2F2F2F2F1F1F0F1F0EFF0EFEEEEEEEEEDEDEDECECECECEBEAEBEAEAEAE9E8E8E8E7E7E7E6E6E5E5E5E4E3E3E3E2E2E1E1E0E0DFDFDFDEDDDDDCDCDBDBDAD9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D0D0D0CFCECECDCDCCCCCBCACAC9C8C7C7C6C5C5C4C4C3C3C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B8B7B7B6B5B5B4B3B2B2B1><B0B0B1B1B1B0B1B1B1B2B2B2B1B3B3B2B2B4B3B2B4B4B3B3B5B4B4B6B5B4B3B5B5B4B6B6B5B4B6B5B5B4B6B5B4B6B5B4B4B5B5B4B6B5B4B3B4B4B3B4B3B2B1B3B1B0AFB1B0AFB0AFAEADAFADACAEADABAAACAAA9AAA9A8A7A8A7A5A4A5A4A3A4A3A1A0A1A09E9F9E9D9B9C9B999A9997969795949293929091908E8D8E8C8A8B8A888787868485838280817F7D7B7C7A797977767475737172706F6D6D6C6A6A69676565646260615F5D5D5C5A5858565555535250504E4D4D4B4A4848474544444241413F3E3C3C3B393A3837353634323331302E2F2D2C2A2B2928292726242524><A5A5A3A3A3A3A2A1A19F9F9E9E9C9C9C9B999998979796969594949292929290908F8D8D8C8C8A8A8A8A88888886868686848483828281817F7F7F7D7C7C7C7A797979777776757474737271716F6F6E6E6C6C6C6A6A696967676665646363616160605E5D5D5C5B5B5A58585756555554535251514F4E4E4C4B4B4A484847454544444241413F3E3E3D3B3B3A3A3837373534333331302F2E2D2D2C2A2A292727262624232222201F1F1D1C1B1B191817151514131211110F0E0E0D0B0B0A0908070705050404030202000000000000000000000000000000000000000000000000><D5D4D3D2D1D0CFCECDCCCBC9C8C7C5C4C3C2C0BFBDBCBAB8B7B5B3B1AFADABA9A8A6A4A29F9D9B99979593918F8D8B89878583817E7C7A79777573716F6D6B6968666462605E5C5B5957555352504E4C4B494846444342403F3D3C3A383736343332302F2E2C2B2A29272625242221201F1E1D1C1B1A191716151514131211100F0E0E0D0C0B0B0A090908080706060505040404030303030202020202010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><1313131313131212121212121212121212121111111111111111111111111010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0909090909090909090909090808080808080808080808080707070707070707070707070606060606060606060606050505050505050505050505040404040404040404040404030303030303030303030303020202020202020202020202010101010101010101010101000000000000><0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F40414142434344454646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF>4 %_Br<B1B1B0B0B0B0B0B0AFAFAFAFAEAEAEAEADADADADADACACACABABAAAAAAA9A9A8A8A7A7A7A6A6A6A6A5A4A4A4A3A3A3A3A2A2A2A1A1A1A09F9F9E9E9E9D9D9D9C9B9B9A9A99989897969695959494939292919190908F8E8E8D8C8C8B8B8A898988888786868584848382828180807F7E7D7C7C7B7A797878777675747373727170706F6E6D6C6B6B6A69696867666564636261605F5E5D5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484747464544434241403F3F3E3D3C><2424222222222020211F1F201E1E1E1E1C1C1C1B1B1B1919191A17171816161614141414121213111212101010100E0E0F0D0D0D0D0B0B0C0A0A0B0909090A080909080808070708080607070506060505050504040403040403040404030304020303030202030202020101010201010100010100010101010101000101000001010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001010001>00<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC><AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6><EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB>4 %_Br<3C3D3E3F3F40414243444546474748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5D5E5F60616263646566676869696A6B6B6C6D6E6F707071727373747576777878797A7B7C7C7D7E7F808081828283848485868687888889898A8B8B8C8C8D8E8E8F90909191929293949495959696979898999A9A9B9B9C9D9D9D9E9E9E9F9FA0A1A1A1A2A2A2A3A3A3A3A4A4A4A5A6A6A6A6A7A7A7A8A8A9A9AAAAAAABABACACACADADADADADAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1><0100010100000100000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010100000101000101010101010001010001010102010101020202030202030303020403030404040304040304040405050505060605070706080807070808080909080A0909090B0A0A0C0B0B0D0D0D0D0F0E0E10101010121211131212141414141616161817171A1919191B1B1B1C1C1C1E1E1E1E201F1F212020222222222424>00<BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF>4 %_Br<B1B2B2B3B4B5B5B6B7B7B8B9BABABBBCBCBDBEBEBFBFC0C1C1C2C3C3C4C4C5C5C6C7C7C8C9CACACBCCCCCDCDCECECFD0D0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9DADBDBDCDCDDDDDEDFDFDFE0E0E1E1E2E2E3E3E3E4E5E5E5E6E6E7E7E7E8E8E8E9EAEAEAEBEAEBECECECECEDEDEDEEEEEEEEEFF0EFF0F1F0F1F1F2F2F2F2F2F2F2F3F2F3F3F3F3F4F4F3F3F4F4F4F4F4F4F4F5F5F4F4F5F4F4F4F4F3F3F4F3F2F3F3F2F2F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEAEAE8E7E7E6E5E4E3E2E0DFDEDDDBDBDAD8D7D7D5D4D3D2D0CFCDCBCAC8C7C5C4C3C1C0BEBDBAB9B8B6B5B4><24252426272928292B2A2C2D2F2E3031333234363537383A393B3C3C3E3F4141424444454748484A4B4D4D4E5050525355555658585A5C5D5D5F61606264656567696A6A6C6D6D6F707271737574767779797A7C7B7D7F818082838584868787888A8B8A8C8E8D8E9091909293929495979697999A999B9C9B9D9E9F9EA0A1A0A1A3A4A3A4A5A4A5A7A8A7A8A9AAA9AAACAAABADAEACADAFADAEAFB0AFB0B1AFB0B1B3B1B2B3B4B3B4B4B3B4B5B6B4B5B5B4B4B5B6B4B5B6B4B5B5B6B4B5B6B6B4B5B5B3B4B5B6B4B4B5B3B3B4B4B2B3B4B2B2B3B3B1B2B2B2B1B1B1B0B1B1B1B0B0><00000000000000000000000000000000000000000000000002020304040505070708090A0B0B0D0E0E0F111112131415151718191B1B1C1D1F1F202222232426262727292A2A2C2D2D2E2F3031333334353737383A3A3B3B3D3E3E3F414142444445454748484A4B4B4C4E4E4F51515253545555565758585A5B5B5C5D5D5E606061616363646566676769696A6A6C6C6C6E6E6F6F717172737474757677777979797A7C7C7C7D7F7F7F81818282838484868686868888888A8A8A8A8C8C8D8D8F909092929292949495969697979899999B9C9C9C9E9E9F9FA1A1A2A3A3A3A3A5A5><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010202020202030303030404040505060607080809090A0B0B0C0D0E0E0F101112131415151617191A1B1C1D1E1F20212224252627292A2B2C2E2F303233343637383A3C3D3F404243444648494B4C4E5052535557595B5C5E6062646668696B6D6F71737577797A7C7E81838587898B8D8F91939597999B9D9FA2A4A6A8A9ABADAFB1B3B5B7B8BABCBDBFC0C2C3C4C5C7C8C9CBCCCDCECFD0D1D2D3D4D5><00000000000001010101010101010101010102020202020202020202020203030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606060707070707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010111111111111111111111111121212121212121212121212131313131313><AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A59585857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B3B2B0B0AEADABAAA9A9A7A6A4A4A2A2A0A09E9E9D9D9C9C9A9A989896969595939391918F8F8C8C8988868684848383818180807E7F7D7D7C7B7A7A79797777757574747272717170706F6F6E6E6D6D6C6C6B6B6A6A696968686767666665656464636462626162616160605F5F5E5E5D5D5C5C5B5C5A5A5959585857575656555554545353525150504F4F4E4E4D4C4B4B4A4A49494747464645444343424140403F3E3D3D3C3B3A39383837363534333231302F2E2D2C2B2A282726242322201F1E1C1B1A181716141312100F0E0C0B0A080706050403020000><B0B1B2B3B3B4B5B6B8B8BABABCBDBFC0C2C3C5C4C5C5C6C6C7C7C8C8C9C9CBCBCDCCCECFD1D1D3D5D7D7D9DBDDDEDFE0E0E0E1E2E3E3E4E3E4E5E6E6E8E8EAEAEBECEDEEEFEFEFEFF0F1F1F2F3F2F2F2F3F3F4F4F4F4F5F5F6F6F7F7F6F7F7F7F8F8F9F8F8F9F9FAFAFAFAFAFBFBFBFBFCFCFBFCFCFCFCFDFDFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F2F2F1F1><A5A5A3A3A3A3A1A19FA09FA09F9F9E9E9D9D9C9D9C9C9B9B9A9A9A9A999998989798979796979596949594949394939393949293929291929192909190908F908F908E8F8E8F8E8F8E8F8D8E8D8E8D8E8C8D8B8C8B8C8B8C8A8B8A8B8A8B898A898A888A8889888887888788868786868586858684858384838482838182808180807F7F7E7E7D7D7C7D7B7C7A7B797A787977787677757674757373717270706F6F6D6E6C6D6B6B696A686866666464626260615F5F5D5D5B5B595A57575454525250504E4E4B4B49494646444441413F3F3D3D3A3A383836363434><D5D5D4D3D2D2D1D1D0CFCECECDCDCCCBCACAC9C9C7C7C5C5C4C3C2C1C0BFBDBDBBBAB9B8B6B6B4B3B1B0AFAEACABA9A8A6A5A3A2A0A09D9D9B9A9796949391908E8D8B8A8887858482817F7E7C7A7877757472716F6E6C6B696866656362605F5D5C5A595756545351504F4E4C4B49484646444341403E3D3C3B39383736343332312F2E2D2C2A2928272525232221201F1E1D1C1A1A181816161414131211100F0F0E0D0C0B0A0A09090807070606050404030302020202010101010101000000000000000000000000000000000000000000000000000000000000><131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F101010101010101111111111111111121212121212121313131313131314141414141414141515151515151516161616161616171717171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F202020202020202121212121212122222222222222222323232323232324242424242424252525252525252526262626262626272727272727272828282828282828292929292929292A2A2A2A><0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7B7B>4 %_Br<0000000000000000000101010101010101010101010101010102020202020202020202020202030202020304030404040404050505050505050505060606060606060606070707070707070809090909090909090A0A0A0A09090A0A0B0B0B0B0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0D0D0D0D0E0E0E0E0E0E0E0E0E0E101010101011111111><F1F1F0EFEFEEEDEDECECEBEBEAE9E8E8E7E6E6E5E4E3E3E2E1E0DFDFDEDDDDDCDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBCBBBAB9B7B6B5B4B3B2B1B0AEADACAAA9A8A6A5A3A2A19F9E9D9B9A999796949391908E8D8B8A888786848382807E7D7B7A787776747372706F6E6C6B6A686765646261605E5D><343233302E2F2D2E2B292A2826272523232120201F1F1E1C1D1B1A1A1917181617151314131112100F100E0F0D0C0D0C0B0C0B0A0B0A090A090908070807060605040505060504050404040303040304030203020203020102020102010202010101000100000000010000000000000000000000000000000000000000000000000000000000>0<EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6><2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF><7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F9091919293939495959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCDCECFCFD0>4 %_Br<1111111110101010100E0E0E0E0E0E0E0E0E0E0D0D0D0D0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0B0B0B0B0A0A09090A0A0A0A090909090909090908070707070707070606060606060606060505050505050505050404040404030403020202030202020202020202020202020201010101010101010101010101010101000000000000000000><5D5E606162646567686A6B6C6E6F707273747677787A7B7D7E808283848687888A8B8D8E909193949697999A9B9D9E9FA1A2A3A5A6A8A9AAACADAEB0B1B2B3B4B5B6B7B9BABBBCBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDCDDDDDEDFDFE0E1E2E3E3E4E5E6E6E7E8E8E9EAEBEBECECEDEDEEEFEFF0F1F1><0000000000000000000000000000000000000000000000000000000000010000000001000101010202010201020201020302020302030403040303040404050405060505040506060708070809090A090A0B0A0B0C0B0C0D0C0D0F0E100F1012111314131517161817191A1A1B1D1C1E1F1F2020212323252726282A292B2E2D2F2E30333234>0<E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEE><AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A><D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A8988888787868585848383828181807F7F7E7E7D7C7C7B>4 %_Br<0000020304050607080A0B0C0E0F101213141617181A1B1C1E1F202223242627282A2B2C2D2E2F30313233343536373838393A3B3C3D3D3E3F40404142434344454646474749494A4A4B4B4C4D4E4E4F4F5050515253535454555556565757585859595A5A5C5B5C5C5D5D5E5E5F5F606061616261626264636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727274747575777779797A7A7B7C7D7D7F7E8080818183838484868688898C8C8F8F919193939595969698989A9A9C9C9D9D9E9EA0A0A2A2A4A4A6A7A9A9AAABADAEB0B0B2B3B4><F1F1F2F2F3F3F3F4F4F4F4F5F5F5F5F6F6F6F6F7F7F7F7F7F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFDFDFCFCFCFCFBFCFCFBFBFBFBFAFAFAFAFAF9F9F8F8F9F8F8F7F7F7F6F7F7F6F6F5F5F4F4F4F4F3F3F2F2F2F3F2F1F1F0EFEFEFEFEEEDECEBEAEAE8E8E6E6E5E4E3E4E3E3E2E1E0E0E0DFDEDDDBD9D7D7D5D3D1D1CFCECCCDCBCBC9C9C8C8C7C7C6C6C5C5C4C5C3C2C0BFBDBCBABAB8B8B6B5B4B3B3B2B1B0><3434363638383A3A3D3D3F3F41414444464649494B4B4E4E50505252545457575A595B5B5D5D5F5F616062626464666668686A696B6B6D6C6E6D6F6F707072717373757476757776787779787A797B7A7C7B7D7C7D7D7E7E7F7F8080818082818382848384838584868586858686878688878887888889888A888A898A898B8A8B8A8B8A8C8B8C8B8C8B8D8C8E8D8E8D8E8D8F8E8F8E8F8E8F8E908F908F909091909291929192929392949393939493949495949695979697979897989899999A9A9A9A9B9B9C9C9D9C9D9D9E9E9F9FA09FA09FA1A1A3A3A3A3A5A5><000000000000000000000000000000000000000000000000000000000000010101010101020202020303040405060607070809090A0A0B0C0D0E0F0F101112131414161618181A1A1C1D1E1F2021222325252728292A2C2D2E2F31323334363738393B3C3D3E40414344464648494B4C4E4F505153545657595A5C5D5F606263656668696B6C6E6F7172747577787A7C7E7F8182848587888A8B8D8E9091939496979A9B9D9DA0A0A2A3A5A6A8A9ABACAEAFB0B1B3B4B6B6B8B9BABBBDBDBFC0C1C2C3C4C5C5C7C7C9C9CACACBCCCDCDCECECFD0D1D1D2D2D3D4D5D5><EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413><2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A191919191919191818181818181818171717171717171616161616161615151515151515141414141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C><7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B4B5B4B4B4B5B5B4B4B6B6B6B5B7B7B7B7B9B9B9BBBBBBBABCBCBCBCBEBDBDBCBEBEBEBEBFBFBFBFC0C1C0C2C2C1C1C2C2C2C2C3C3C2C2C3C3C3C2C3C3C3C4C4C3C3C4C4C3C3C4C3C3C2C4C3C3C2C3C2C2C1C2C1C0C2C1C0BFC0C0BFBFBFBFBEBDBDBDBCBBBCBBBABABAB9B8B8B8B6B6B6B5B4B3B4B2B1B0B0AFAEADADACAAAAA9A8A6A6A5A3A2A2A09F9D9D9C9A989896><B0B2B1B3B3B5B5B7B8B9B9BCBEBEC0C0C2C2C4C4C6C6C8CACACCCCCECDCFCFD0D0D1D3D3D5D4D6D5D7D7D8D8DADBDBDCDCDDDCDEDDDEDEDFE0DFE1E0E1E1E2E1E2E1E3E4E3E4E3E4E3E4E3E4E4E5E4E5E6E4E5E4E5E4E5E4E5E4E5E5E4E5E4E5E4E4E3E4E3E3E4E3E3E2E3E1E2E1E1E0E0E1DFE0DEDFDEDEDDDDDCDCDDDBDBDADAD9D9D8D8D7D7D7D6D6D4D4D3D3D2D2D1D1><A5A3A3A2A2A0A09E9E9C9C9A9898969594939191908F8E8C8C8A898887868584838281807F7E7D7C7B7B797978777675747373727170706F6D6D6C6B6A6A69686766656463626160605E5E5C5C5B5A595857565554535251504F4E4D4C4A4A48474645444342403F3D3C3B3A383736353331302E2E2C2B292826252321201D1C1A1917151312100E0D0B0A09080605030200><D5D4D3D2D1D0CECDCCCBCAC9C7C6C5C3C2C1BFBEBCBBB9B7B5B3B1AFADABA9A7A5A3A19F9C9A989693918F8D8B888684827F7D7B79777572706E6C6A68666462605E5B59575553514F4D4B4948454442403E3C3A38363533312F2E2C2A292726242221201E1D1B1A181715141312100F0E0D0C0A0A0808070605050403030302020201010101010101000000000000000000><1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E><0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F303030313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F>4 %_Br<96959392908F8D8C8A898786848382807F7D7B7A787775747371706F6D6C6B69686665646261605E5D5C5A59575655545251504F4C4B4A48474645444241403E3D3C3B3A39383735343332302F2D2C2B2928272625242221201F1E1D1C1B1A191817161514131211><D1CFCECCCBC9C8C7C5C5C4C2C1C0BFBDBCBBBAB9B7B6B5B3B2B1B1AFAEACABAAA9A7A6A5A3A2A1A09E9D9C9C9B99989795949391918F8E8D8C8B898887878685848381807F7E7D7C7B7A7977767575747372706F6E6D6C6B6A6968676665646463636261605F5E5D>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6><4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF><9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0>4 %_Br<1112131415161718191A1B1C1D1E1F2021222425262728292B2C2D2F30323334353738393A3B3C3D3E40414244454647484A4B4C4F50515254555657595A5C5D5E60616264656668696B6C6D6F707173747577787A7B7D7F808283848687898A8C8D8F9092939596><5D5E5F6061626363646465666768696A6B6C6D6E6F7072737475757677797A7B7C7D7E7F808183848586878788898B8C8D8E8F91919394959798999B9C9C9D9EA0A1A2A3A5A6A7A9AAABACAEAFB1B1B2B3B5B6B7B9BABBBCBDBFC0C1C2C4C5C5C7C8C9CBCCCECFD1>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E><AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756565554535251504F4E><D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F>4 %_Br<9698989A9C9D9D9FA0A2A2A3A5A6A6A8A9AAAAACADADAEAFB0B0B1B2B4B3B4B5B6B6B6B8B8B8B9BABABABBBCBBBCBDBDBDBEBFBFBFBFC0C0BFC0C1C2C0C1C2C1C2C2C3C2C3C3C4C2C3C3C4C3C3C4C4C3C3C4C4C3C3C3C2C3C3C3C2C2C3C3C2C2C2C2C1C1C2C2C0C1C0BFBFBFBFBEBEBEBEBCBDBDBEBCBCBCBCBABBBBBBB9B9B9B7B7B7B7B5B6B6B6B4B4B5B5B4B4B4B5B4B4><D1D1D2D2D3D3D4D4D6D6D7D7D7D8D8D9D9DADADBDBDDDCDCDDDDDEDEDFDEE0DFE1E0E0E1E1E2E1E3E2E3E3E4E3E3E4E3E4E4E5E4E5E4E5E5E4E5E4E5E4E5E4E5E4E6E5E4E5E4E4E3E4E3E4E3E4E3E4E3E1E2E1E2E1E1E0E1DFE0DFDEDEDDDEDCDDDCDCDBDBDAD8D8D7D7D5D6D4D5D3D3D1D0D0CFCFCDCECCCCCACAC8C6C6C4C4C2C2C0C0BEBEBCB9B9B8B7B5B5B3B3B1B2B0><000203050608090A0B0D0E1012131517191A1C1D202123252628292B2C2E2E303133353637383A3B3C3D3F40424344454647484A4A4C4D4E4F505152535455565758595A5B5C5C5E5E60606162636465666768696A6A6B6C6D6D6F707071727373747576777879797B7B7C7D7E7F808182838485868788898A8C8C8E8F9091919394959698989A9C9C9E9EA0A0A2A2A3A3A5><00000000000000000001010101010101020202030303040505060708080A0A0C0D0E0F101213141517181A1B1D1E202122242627292A2C2E2F31333536383A3C3E4042444548494B4D4F51535557595B5E60626466686A6C6E70727577797B7D7F828486888B8D8F919396989A9C9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBCBEBFC1C2C3C5C6C7C9CACBCCCDCED0D1D2D3D4D5><7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A69696867666665646363626160605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A494847474645444443424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A29282827262525242322222120201F1E1D1D1C1B1A1A191817171615141413><4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A191918181717161616151514141313121211111110100F0F0E0E0D0D0C0C><9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br[0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 Bs0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS%_0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink Radial)(Pink Radial) 1 2 Bd[0<00000102030405060708090B0C0D0E1011121314141617191A1C1D1E202122232426272728292A2C2D2E2F31313234353638393A3A3B3C3E3F414242434546474848494B4C4D4D4E4F51525254555758585A5B5C5D5D5F60616162636565666869696A6B6C6C6E6F6F707273737576767779797A7B7B7D7E7E7F8181828383848585878888898A8A8C8C8D8E8E8F8F91929294939596969898999B9A9C9C9D9D9F9FA0A2A2A3A3A4A4A6A6A7A7A8A8A9A9AAAAACACADADAEAEAFAFB1B1B2B2B3B3B3B4B4B5B5B6B6B6B7B7B9B9BAB9B9BABABBBBBBBCBCBEBDBDBFBFBFC0C0C0C1C1C2C2C2C3C3C3C4C4C4C4C5C5C5C6C6C6C7C7C7C7C8C8C8C9C9C9C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCCCDCDCDCDCDCDCECECECECECECFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1><0000000001010102020303030303040405050606070808090909090A0A0B0C0C0D0E0E0E0F0F10101112121113131415151615161818191A191A1A1C1C1C1C1D1E1F1E1F20212221222324252425262727282829282A2B2C2B2D2D2E2D2F302F3031323132343334363536373837383A393A3C3B3C3E3D3E403F40404142424445454647474847494A4A4B4A4C4D4D4E4D4F4E505150525153525355555756585759585A5A5B5B5D5D5E5E5F5F616162626363646465656767686869696A6A696B6B6D6D6E6E6D6F6F7171707272747473757577777678787A7A797B7B7A7C7C7C7E7D7D7F7F7F8180808282818184838385858587878686888888888A8A8A8A8C8B8B8B8B8D8D8D8D8F8E8E8E8E909090909090919191919191939292929292929294949494949494949494949595959595959595959595959595>01<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A89888887878685858484838382828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F6F6E6E6D6D6C6C6C6B6B6A6A6A69696868686767676666666565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A59595959595858585858585757575757575656565656565656555555555555555555555454545454545454545454545454><FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777776767575747474737372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A6969696868686767676666666665656564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959>4 %_Br[0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 %_BS%_0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 3 Bd[0<A9A9AAAAABABADADAEAEAEAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B8B9B9BABABABBBBBCBCBDBDBDBEBEBFBFC0C0C1C1C1C2C2C3C3C4C4C5C5C5C6C6C7C7C8C8C8C9C9C9C9CACACBCB><080A0B0C0D0F1012131517191B1C1E1F2123242627292B2D2E3032333537383A3C3D3F414244484A4B4E505153545657595B5D5F6062636567696A6C6F70727476787A7C7D7F81838587898B>01<7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A><ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160>4 %_Br0<8282828383838383838585858585858686878787878888888888888A8A8A8A8A8A8C8C8C8C8C8C8D8D8D8D8D8D8F8F8F8F8F8F90909090909192929292929294949494949495959595959797979797979999999999999B9B9B9B9B9B9D9D9D9D9D9D9E9E9E9E9F9FA0A0A0A0A0A0A2A2A2A2A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7A7A7A7A9A9A9><F5F4F4F3F2F1F0EFEEEDECEAE9E8E6E6E5E4E3E2E1E0DFDEDDDBDAD8D7D6D4D3D2D1D0CFCDCCCAC8C6C5C4C2C1C0BFBEBDBCBAB9B7B6B4B3B1AFADACAAA9A7A5A3A2A09F9D9B9998969492908E8C8A88868482817F7D7A78777573716F6D6B69676562605F5D5B59565452504F4D4A484644413F3C3B39373533302E2D2B29272422201E1C1A17151312100E0B0A08>01<9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A89898989898988888888888887878787878686868686868585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B><1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 %_BS%_0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 Bs0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 %_BS%_0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 Bs0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 %_BS%_0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 139)(Unnamed gradient 139) 1 2 Bd[00001114 %_Br[0 0 0 0 1 1 1 2 87 36.6667 %_BS%_0 0 0 0 1 1 1 2 87 36.6667 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F50525354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBBBCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F80818182838384858686878889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACACADADADADADADADAD><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F4041424344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F8081818283848485858687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E80838587898C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Water)(Water) 0 5 Bd[<D5D6D6D7D7D8D9D9D9DADADBDCDCDDDEDEDFDFE0E1E1E1E2E3E3E4E4E5><5253545657595A5A5B5D5E606163646567686A6B6C6C6D6E7071727475><3F3F404141424345454647474848494B4B4C4C4D4D4F4F505151525353><02020203030304040505050606070709090A0A0B0C0C0D0E0F10101112>0<8A89888786858484838281807F7E7D7C7B7A7978777776757473727170><A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C>4 %_Br<B9BABBBBBCBDBDBEBFBFC0C1C1C2C2C3C3C4C4C5C5C6C6C7C8C8C9C9CACBCCCCCDCDCECFD0D0D0D1D2D2D3D4D4D4D5><17181A1A1B1D1E2021212324262829292B2D2E3032313335363838393B3C3E403F414344464747494A4C4D4F4F5052><15161718191A1A1B1B1D1E1E1F1F202223232425252728292B2C2E2E2F30303133343535363738393A3A3B3C3D3E3F><0000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010202>0<B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929191908F8E8D8C8C8B8A><D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9>4 %_Br<7576777879797A7B7C7D7E7E7F808182828384858586878888898A8B8C8C8D8E8E8F9090919293939494959696979899999A9A9B9C9C9D9E9E9E9FA0A1A1A2A2A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAAAABABACACADADADADAEAEAFAFB0B0B0B1B2B2B2B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B8B8B8B8B8B9B9B9B9B9><02020202020102020201020202010202020102020101020201010202010102010101020202010302020203030202030303030404030304040404050404040505040505050506060605070706060707070708080808090909080A0A09090B0B0B0A0C0C0C0C0E0E0E0E10100F0F111111111212121214141414151515151717><10111010121211111111101112121212121211111313121313131212141413141414131315151414141513141516141515151414161614151515141416161414151414161615151515141416161515151615151617161616161515171716161617161618181717171716161717161616161515171716161616151516171515>0<7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B1B1B1B1B0B0><E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9D9D9D9D8D8D8D8>4 %_Br<000001010203040505060708090A0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233343535363738393A3A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F616162636465666768696A6B6B6C6D6E6F70707172737475><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000010100010102010102010102010202010202><000000000000000000010101010102010202010103020202020203030303030403040403040404050405060506050506060606060607060706060707080807080808090808080909090909080A0A09090A0A0B0B0A0B0A0B0C0B0B0C0C0C0C0C0C0B0D0D0C0C0D0D0E0D0D0D0D0E0F0E0E0E0E0F0F0F0F0E101010100F0F111010>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F><FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0><FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8>4 %_Br[0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 %_BS%_0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 Bs0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 %_BS%_0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 Bs0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 %_BS%_0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 Bs0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS%_0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Diamond Cubes)(Diamond Cubes) 6.5605 11.3652 85.3018 79.5596 [%AI3_Tile(0 O 0 R 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 Xa 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR45.9316 56.8281 m39.3691 45.4609 L26.2471 45.4609 L32.8066 56.8281 L45.9316 56.8281 Lf45.9316 34.0957 m39.3691 22.7305 L26.2471 22.7305 L32.8066 34.0957 L45.9316 34.0957 Lf65.6162 22.7305 m59.0537 11.3652 L45.9316 11.3652 L52.4932 22.7305 L65.6162 22.7305 Lf65.6162 45.4609 m59.0537 34.0977 L45.9316 34.0977 L52.4932 45.4609 L65.6162 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L6.5605 11.3652 L13.123 22.7305 L26.2471 22.7305 Lf26.2471 45.4609 m19.6846 34.0977 L6.5605 34.0977 L13.123 45.4609 L26.2471 45.4609 Lf45.9316 79.5586 m39.3691 68.1924 L26.2471 68.1924 L32.8066 79.5586 L45.9316 79.5586 Lf65.6162 68.1934 m59.0537 56.8281 L45.9316 56.8281 L52.4932 68.1924 L65.6162 68.1934 Lf85.3018 56.8281 m78.7402 45.4609 L65.6162 45.4609 L72.1777 56.8281 L85.3018 56.8281 Lf85.3018 34.0957 m78.7402 22.7305 L65.6162 22.7305 L72.1777 34.0957 L85.3018 34.0957 Lf85.3018 79.5586 m78.7402 68.1924 L65.6162 68.1924 L72.1777 79.5586 L85.3018 79.5586 Lf26.2471 68.1924 m19.6846 56.8281 L6.5605 56.8281 L13.123 68.1924 L26.2471 68.1924 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 Xa 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR26.2471 68.1924 m19.6846 56.8281 L26.2471 45.4609 L32.8066 56.8281 L26.2471 68.1924 Lf26.2471 45.4609 m19.6846 34.0957 L26.2471 22.7305 L32.8066 34.0957 L26.2471 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L26.2471 0 L32.8066 11.3652 L26.2471 22.7305 Lf45.9316 34.0957 m39.3691 22.7305 L45.9316 11.3652 L52.4932 22.7305 L45.9316 34.0957 Lf45.9316 56.8281 m39.3691 45.4609 L45.9316 34.0977 L52.4932 45.4609 L45.9316 56.8281 Lf6.5605 34.0957 m0 22.7305 L6.5605 11.3652 L13.123 22.7305 L6.5605 34.0957 Lf6.5605 56.8281 m0 45.4609 L6.5605 34.0977 L13.123 45.4609 L6.5605 56.8281 Lf26.2471 90.9238 m19.6846 79.5586 L26.2471 68.1924 L32.8066 79.5586 L26.2471 90.9238 Lf45.9316 79.5586 m39.3691 68.1924 L45.9316 56.8281 L52.4932 68.1924 L45.9316 79.5586 Lf65.6162 68.1924 m59.0537 56.8281 L65.6162 45.4609 L72.1777 56.8281 L65.6162 68.1924 Lf65.6162 45.4609 m59.0537 34.0957 L65.6162 22.7305 L72.1777 34.0957 L65.6162 45.4609 Lf65.6162 22.7305 m59.0537 11.3652 L65.6162 0 L72.1777 11.3652 L65.6162 22.7305 Lf85.3018 34.0957 m78.7402 22.7305 L85.3018 11.3652 L91.8643 22.7305 L85.3018 34.0957 Lf85.3018 56.8281 m78.7402 45.4609 L85.3018 34.0977 L91.8643 45.4609 L85.3018 56.8281 Lf65.6162 90.9238 m59.0537 79.5586 L65.6162 68.1924 L72.1777 79.5586 L65.6162 90.9238 Lf85.3018 79.5586 m78.7402 68.1924 L85.3018 56.8281 L91.8643 68.1924 L85.3018 79.5586 Lf6.5605 79.5576 m0 68.1924 L6.5605 56.8281 L13.123 68.1924 L6.5605 79.5576 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6091.6558 7111 L-6091.6558 7075.8271 L-6271 7075.8271 L-6271 7111 Lnuu0 O0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa0 R0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA0.5 w-6109.8286 7076.0781 m-6252.8276 7076.0781 L-6252.8276 7078.647 L-6109.8286 7078.647 L-6109.8286 7076.0781 Lb-6252.8276 7101.4829 m-6109.8286 7101.4829 L-6109.8286 7098.7109 L-6252.8276 7098.7109 L-6252.8276 7101.4829 Lb0 0 0 0 1 1 1 Xa-6252.8276 7078.647 m-6252.8276 7098.7109 L-6109.8286 7098.7109 L-6109.8286 7078.647 L-6252.8276 7078.647 LbU0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7110.6191 m-6092.2544 7110.6191 L-6094.4292 7108.3984 L-6125.9976 7108.3984 L-6131.1978 7110.6191 Lb-6092.2544 7086.5854 m-6109.8286 7086.5854 L-6109.8286 7088.6797 L-6094.3237 7088.6797 L-6092.2544 7086.5854 Lb0 0 0 0 1 1 1 Xa-6094.3237 7088.6797 m-6109.8286 7088.6797 L-6109.8286 7101.4829 L-6125.9976 7108.3984 L-6094.4292 7108.3984 L-6104.6465 7099.1279 L-6094.3237 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6270.4019 7110.6191 m-6231.4595 7110.6191 L-6236.6587 7108.3984 L-6268.2285 7108.3984 L-6270.4019 7110.6191 Lb0 0 0 0 1 1 1 Xa-6252.8286 7088.6797 m-6268.3345 7088.6797 L-6258.0112 7099.1279 L-6268.2285 7108.3984 L-6236.6587 7108.3984 L-6252.8286 7101.4829 L-6252.8286 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6252.8286 7086.5854 m-6270.4019 7086.5854 L-6268.3345 7088.6797 L-6252.8286 7088.6797 L-6252.8286 7086.5854 Lb-6231.4595 7110.6191 m-6252.8286 7101.4829 LSu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6131.1978 7101.4829 m-6131.1978 7108.1836 L-6115.5269 7101.4829 L-6131.1978 7101.4829 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7108.1836 m-6131.1978 7110.6191 L-6109.8286 7101.4829 L-6115.5269 7101.4829 L-6131.1978 7108.1836 Lb-6252.8286 7101.4829 m-6231.4595 7110.6191 L-6231.4595 7108.1836 L-6247.1294 7101.4829 L-6252.8286 7101.4829 Lb0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6247.1294 7101.4829 m-6231.4595 7108.1836 L-6231.4595 7101.4829 L-6247.1294 7101.4829 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 44)0 Au1 Ap0 J 0 j 1 w 4 M []0 d1 XR-6266.6665 7111 m-6271 7111 L-6271 7107.3989 L-6266.6665 7107.3989 L-6266.6665 7111 Lnu0 Ap0 XR-6269.9702 7110.3359 m-6267.6963 7110.3359 L-6267.6963 7108.062 L-6269.9702 7108.062 L-6269.9702 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6267.6963 7109.1992 m-6267.6963 7109.8271 -6268.2056 7110.3359 -6268.8335 7110.3359 c-6269.4614 7110.3359 -6269.9702 7109.8271 -6269.9702 7109.1992 c-6269.9702 7108.5718 -6269.4614 7108.062 -6268.8335 7108.062 c-6268.2056 7108.062 -6267.6963 7108.5718 -6267.6963 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 47)0 Au0 Ap0 J 0 j 1 w 4 M []0 d1 XR-6264.6064 7111 m-6271 7111 L-6271 7107.3989 L-6264.6064 7107.3989 L-6264.6064 7111 Lnu0 XR-6268.9404 7110.3359 m-6266.6665 7110.3359 L-6266.6665 7108.062 L-6268.9404 7108.062 L-6268.9404 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6266.6665 7109.1992 m-6266.6665 7109.8271 -6267.1753 7110.3359 -6267.8032 7110.3359 c-6268.4312 7110.3359 -6268.9404 7109.8271 -6268.9404 7109.1992 c-6268.9404 7108.5718 -6268.4312 7108.062 -6267.8032 7108.062 c-6267.1753 7108.062 -6266.6665 7108.5718 -6266.6665 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 48)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6263.1465 7111 L-6263.1465 7102.5957 L-6271 7102.5957 L-6271 7111 Lnu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa3.86371 M-6270.1582 7102.5957 m-6269.6812 7102.5845 -6269.2842 7102.9595 -6269.2725 7103.4375 c-6269.2593 7103.9141 -6269.6357 7104.3101 -6270.1138 7104.3237 c-6270.5903 7104.3359 -6270.9878 7103.96 -6270.9995 7103.4824 c-6271.0122 7103.0054 -6270.6357 7102.6069 -6270.1582 7102.5957 cf-6270.1357 7103.46 mFUu-6270.1558 7104.8188 m-6269.6782 7104.8086 -6269.2813 7105.1846 -6269.2686 7105.6621 c-6269.2563 7106.1382 -6269.6333 7106.5356 -6270.1104 7106.5488 c-6270.5874 7106.5615 -6270.9849 7106.1846 -6270.9971 7105.7075 c-6271.0093 7105.23 -6270.6328 7104.8345 -6270.1558 7104.8188 cf-6270.1333 7105.6846 mFUu-6270.1523 7107.0469 m-6269.6753 7107.0342 -6269.2783 7107.4102 -6269.2661 7107.8877 c-6269.2539 7108.3638 -6269.6304 7108.7612 -6270.1074 7108.7744 c-6270.5845 7108.7871 -6270.9814 7108.4102 -6270.9937 7107.9326 c-6271.0068 7107.4561 -6270.6299 7107.0581 -6270.1523 7107.0469 cf-6270.1299 7107.9102 mFUu-6270.1499 7109.2725 m-6269.6724 7109.2588 -6269.2754 7109.6357 -6269.2627 7110.1133 c-6269.25 7110.5894 -6269.6274 7110.9863 -6270.1045 7111 c-6270.5815 7111.0127 -6270.9785 7110.6357 -6270.9912 7110.1582 c-6271.0029 7109.6816 -6270.6274 7109.2832 -6270.1499 7109.2725 cf-6270.1274 7110.1357 mFUu-6268.1538 7103.6665 m-6267.6763 7103.6533 -6267.2793 7104.0293 -6267.2666 7104.5068 c-6267.2539 7104.9829 -6267.6309 7105.3809 -6268.1084 7105.394 c-6268.5854 7105.4063 -6268.9824 7105.0293 -6268.9946 7104.5527 c-6269.0068 7104.0752 -6268.6304 7103.6768 -6268.1538 7103.6665 cf-6268.1304 7104.5293 mFUu-6268.1499 7105.8901 m-6267.6729 7105.8789 -6267.2764 7106.2549 -6267.2632 7106.7324 c-6267.2515 7107.21 -6267.6274 7107.6069 -6268.1055 7107.6191 c-6268.5825 7107.6318 -6268.9795 7107.2549 -6268.9917 7106.7773 c-6269.0039 7106.3008 -6268.6274 7105.9023 -6268.1499 7105.8901 cf-6268.1274 7106.7549 mFUu-6268.1475 7108.1157 m-6267.6699 7108.1045 -6267.2729 7108.4805 -6267.2607 7108.9595 c-6267.2485 7109.4341 -6267.6255 7109.8325 -6268.1025 7109.8447 c-6268.5791 7109.8574 -6268.9766 7109.4814 -6268.9888 7109.0029 c-6269.0015 7108.5264 -6268.6245 7108.1279 -6268.1475 7108.1157 cf-6268.1245 7108.9805 mFUu-6266.0723 7104.7119 m-6265.5952 7104.6997 -6265.1987 7105.0781 -6265.1865 7105.5532 c-6265.1738 7106.0303 -6265.5508 7106.4287 -6266.0273 7106.4414 c-6266.5054 7106.4541 -6266.9019 7106.0757 -6266.9141 7105.5996 c-6266.9272 7105.1235 -6266.5498 7104.7261 -6266.0723 7104.7119 cf-6266.0503 7105.5781 mFUu-6266.0698 7106.939 m-6265.5928 7106.9253 -6265.1953 7107.3013 -6265.1831 7107.7788 c-6265.1704 7108.2573 -6265.5474 7108.6543 -6266.0249 7108.6685 c-6266.5024 7108.6797 -6266.8994 7108.3013 -6266.9116 7107.8252 c-6266.9233 7107.3486 -6266.5469 7106.9512 -6266.0698 7106.939 cf-6266.0474 7107.8013 mFUu-6264.0332 7105.7822 m-6263.5557 7105.7695 -6263.1592 7106.147 -6263.1465 7106.6255 c-6263.1333 7107.1016 -6263.5103 7107.4985 -6263.9883 7107.5117 c-6264.4653 7107.5229 -6264.8618 7107.147 -6264.8745 7106.6685 c-6264.8862 7106.1909 -6264.5098 7105.7949 -6264.0332 7105.7822 cf-6264.0103 7106.647 mFUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Banner/ Adobe Patte) -(rnOnPath Brush Tool/ Arrow Brush Circles/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Arrow Brush Circles)(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -( 1 0 4 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(Black)Pc0 0.993988 1 0 1 0 0 Xa(RGB Red)Pc0.061982 0 0.965148 0 1 1 0 Xa(RGB Yellow)Pc0.627649 0 1 0 0 1 0 Xa(RGB Green)Pc0.517937 0 0.125399 0 0 1 1 Xa(RGB Cyan)Pc0.883665 0.769161 0 0 0 0 1 Xa(RGB Blue)Pc0.269902 0.816403 0 0 1 0 1 Xa(RGB Magenta)Pc0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0.000366 0.500664 0.985656 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0.000214 0.348486 0.871305 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.045136 0 0.931884 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188968 0.000397 0.98233 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501091 0.001373 0.990387 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.746151 0 0.99704 0.000092 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.761959 0 0.749783 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.6972 0.14847 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.875364 0.526451 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262516 0.245243 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.970001 0.204959 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.22855 0.274266 0.39942 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.362341 0.574029 0.840574 0.226139 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Fade To Edge Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Fade To Edge Black)PcBb0 0 0 0 Bh2 (Neon Rings Vignette) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Neon Rings Vignette)PcBb2 (Water) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Water)PcBb0 0 0 0 Bh2 (Pink Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Pink Radial)Pc(Diamond Cubes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Diamond Cubes)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(R=0 G=0 B=0)Pc0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.306798 0.242466 0.247654 0 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.193668 0.150057 0.155337 0 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.084596 0.061311 0.065766 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.037049 0.025086 0.025086 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.6318 0.219425 0 0 0.247059 0.662745 0.960784 Xa(R=63 G=169 B=245)Pc0.55407 0 0.965515 0 0.478431 0.788235 0.262745 Xa(R=122 G=201 B=67)Pc0 0.508354 0.961639 0 1 0.576471 0.117647 Xa(R=255 G=147 B=30)Pc0 0.965057 0.900572 0 1 0.113725 0.145098 Xa(R=255 G=29 B=37)Pc0 0.661738 0.032776 0 1 0.482353 0.67451 Xa(R=255 G=123 B=172)Pc0.253758 0.127169 0.116762 0 0.741176 0.8 0.831373 Xa(R=189 G=204 B=212)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 2 79 255 79 0 50 Lb(Layer 3) Ln0 Au0 O0.706355 0.476051 0 0 0.247059 0.52549 1 Xa0 J 0 j 1 w 10 M []0 d0 XR193.8818 -230 m191.9419 -230 L187.6074 -230 185.52 -233.5703 185.668 -236.9277 C184.6621 -238.5596 183.7427 -240.2979 182.7935 -242.0059 c182.3838 -242.7437 181.4614 -244.2593 181.1748 -244.2881 c179.1157 -244.4951 176.7329 -243.2979 174.7949 -242.7222 c170.749 -241.5195 166.4785 -241.9111 162.3833 -240.8462 c160.4111 -240.3335 158.4653 -239.7095 156.5088 -239.1426 c153.8428 -238.3696 150.7119 -238.3799 148.187 -237.2993 c144.1572 -235.5742 140.4209 -232.2427 136.6309 -229.9688 c131.6138 -226.959 127.8325 -228.9771 123.8926 -232.5972 c122.5752 -233.8076 121.5186 -235.3784 120.4326 -236.7876 c119.3354 -238.2119 117.4165 -239.1729 116.0596 -240.3589 c114.7554 -241.499 113.6768 -242.9121 112.2783 -243.9468 c110.1924 -245.4897 107.0503 -246.2383 104.7012 -247.3599 c99.8457 -249.6782 94.8179 -251.7065 90.2632 -254.5381 c85.4937 -257.5029 80.3931 -259.9224 75.2954 -262.2593 c65.8804 -266.5757 56.5698 -271.6538 46.4985 -274.2178 c37.3008 -276.5591 27.9077 -277 18.4722 -277 C9 -277 L9 -289.7915 L14.668 -289.8032 20.3398 -289.8462 26.0054 -289.7339 c39.4409 -289.4668 53.0723 -286.9565 65.2266 -281.1162 c71.8271 -277.9443 78.5498 -275.0493 85.1831 -271.9482 c92.4502 -268.5508 99.271 -264.4004 106.5005 -260.9482 c112.373 -258.144 118.5508 -256.0493 123.293 -251.4736 c125.1816 -249.6514 127.5396 -248.3052 129.2788 -246.395 c130.4014 -245.1616 131.3091 -243.8457 132.3643 -242.6631 C137.2837 -245.833 141.9971 -249.4722 147.8115 -250.6069 c154.7881 -251.9683 161.4771 -254.6333 168.6587 -254.8325 c175.5767 -255.0244 181.4009 -259.667 188.2646 -255.3838 c193.4771 -252.1309 194.5781 -245.5005 198.478 -241.1919 c202.2051 -237.0747 199.7627 -230 193.8818 -230 Cf846.6279 -1 m845.4561 -6.83594 841.5508 -10.6113 837.4243 -15.2441 c832.1406 -21.1758 827.1353 -27.3999 821.0923 -32.585 c809.1885 -42.7983 797.1929 -53.0347 783.438 -60.7046 c777.3447 -64.1025 768.4609 -63.2808 761.6909 -63.3257 c760.7832 -63.3315 760.3408 -63.3862 760.1616 -63.4556 C759.9248 -63.3657 759.6069 -63.2544 759.1738 -63.1152 c757.9009 -62.7065 756.6421 -62.3975 755.3335 -62.1255 c752.4229 -61.5195 749.0063 -61.5142 746.251 -60.3369 c740.0537 -57.6904 734.5112 -64.6025 736.7954 -69.0425 C736.5142 -71.7021 737.6245 -74.5425 740.5972 -75.8462 C740.9443 -76.7881 741.1108 -77.769 741.2056 -78.7593 c741.5142 -81.9878 741.2612 -85.2822 741.0137 -88.5049 c740.8115 -91.1411 740.4849 -93.7676 740.3613 -96.4092 c740.2979 -97.7656 738.3867 -100.7227 737.8184 -102.1138 c736.6177 -105.0527 735.3281 -107.9517 733.9951 -110.8325 c729.4761 -120.6035 724.1475 -128.8574 715.9106 -135.8589 c708.4287 -142.2188 698.7085 -145.8569 690.4072 -151.0435 c686.5034 -153.4829 682.6299 -156.2075 678.1807 -157.5049 c673.5439 -158.8569 669.0464 -160.6836 664.457 -162.186 c653.8633 -165.6543 643.4307 -166.0825 632.394 -166.1802 c622.0454 -166.2715 611.8574 -168.2109 601.7256 -165.4326 c592.9023 -163.0132 585.2051 -160.4961 577.4497 -155.4087 c574.0342 -153.1685 568.7891 -155.3149 567.9014 -159.2935 c564.9678 -172.4395 561.6978 -188.9961 549.2852 -196.5942 c531.5806 -207.4316 509.2969 -193.0239 494.0195 -184.5122 c493.7104 -184.3398 493.4033 -184.2046 493.0977 -184.085 C491.2744 -177.9375 480.6016 -178.6763 480.3584 -186.2446 c480.2598 -189.3086 479.605 -192.2104 479.0693 -195.2192 c478.564 -198.0581 478.7422 -201.0024 478.1729 -203.7998 c476.98 -209.6582 473.9731 -215.1836 472.4155 -220.9805 c469.0479 -233.5142 459.1646 -243.2397 449.6641 -251.4707 c440.1831 -259.6846 428.8086 -265.2505 417.0977 -269.4204 c403.5317 -274.25 389.6289 -279.3345 375.3872 -281.6812 c368.2002 -282.8657 360.8506 -282.5225 353.5986 -282.7261 c345.5552 -282.9526 337.521 -283.4766 329.4897 -283.9521 c314.5234 -284.8379 298.3594 -286.6943 283.4756 -284.2466 c268.9189 -281.8521 255.6304 -274.3994 243.7285 -266.0029 c238.1426 -262.0615 233.1206 -257.3965 227.6094 -253.3491 c222.2432 -249.4087 217.5835 -245.4961 215.6714 -238.8433 c213.3604 -230.8013 200.8154 -234.2241 203.1362 -242.2993 c207.0845 -256.0376 218.8013 -262.5264 229.1353 -271.0938 c240.4043 -280.436 253.106 -287.9829 266.8032 -293.1563 c280.9175 -298.4873 295.9341 -298.3325 310.7993 -297.877 c326.2959 -297.4023 341.7471 -295.9854 357.2495 -295.6333 c372.7515 -295.2817 386.9736 -293.271 401.7192 -288.2813 c414.4106 -283.9863 427.8276 -280.3008 439.6816 -273.9541 c450.5225 -268.1494 460.5332 -259.9785 468.9531 -251.0801 c473.2344 -246.5557 477.022 -241.4902 480.0967 -236.0762 c483.5747 -229.9521 484.9634 -223.207 487.3677 -216.6748 c489.0581 -212.0811 490.7231 -207.9014 491.3608 -203.0146 c491.5649 -201.4497 491.8003 -199.8657 492.0366 -198.2744 C511.3867 -208.9072 533.1553 -219.1943 554.7949 -208.4023 c568.7407 -201.4473 574.749 -185.6211 578.5015 -170.9336 C585.2832 -174.2202 592.3262 -176.3389 599.8545 -178.4033 c611.6123 -181.6274 624.1084 -179.168 636.1074 -179.1621 c648.7939 -179.1558 660.6782 -177.3018 672.6665 -173.1099 c677.6035 -171.3838 683.019 -170.166 687.6558 -167.7734 c693.5498 -164.7324 699.02 -160.8872 704.7295 -157.5229 c709.2798 -154.8418 714.1367 -152.9131 718.564 -149.9961 c723.6001 -146.6787 728.1855 -142.6133 732.2588 -138.1821 c740.7197 -128.9785 745.6348 -116.9673 750.354 -105.5693 c752.0923 -101.3721 753.1885 -97.8506 753.5757 -93.3887 c753.9063 -89.5786 754.2827 -85.7852 754.3208 -81.9565 c754.3428 -79.7437 754.1943 -77.4653 753.7813 -75.2827 C755.875 -75.8286 757.9712 -76.3306 760.0688 -76.3296 c768.5732 -76.3262 777.1216 -76.0718 785.4429 -74.1577 c789.0605 -73.3257 792.8799 -70.3286 795.9941 -68.3984 c800.0879 -65.8613 803.9956 -63.0278 807.8467 -60.1411 c815.5835 -54.3423 822.9482 -48.0679 830.2847 -41.7773 c837.2476 -35.8071 842.9414 -28.4893 849.0732 -21.6973 c852.481 -17.9229 855.4878 -15.0464 857.3882 -10.2397 c858.5918 -7.19482 859.2842 -4.18652 859.7002 -1 C846.6279 -1 Lf*u1 D1551.9819 -177.4961 m1552.9258 -175.583 1553.4307 -174.0371 1553.459 -171.8867 c1553.4556 -170.7134 1553.1597 -169.6201 1552.5718 -168.6064 C1552.5908 -169.0449 1552.6104 -169.4839 1552.6299 -169.9224 C1552.6206 -169.0283 1552.4492 -168.1719 1552.1157 -167.353 C1550.0435 -161.1743 1542.6821 -154.4761 1536.709 -152.2324 c1531.2563 -150.1846 1525.3447 -149.3369 1519.4126 -148.9771 C1523.4575 -146.2119 1527.2568 -143 1530.6885 -139.0747 c1539.4058 -129.1035 1542.4834 -113.0625 1536.5391 -101.0513 c1533.2109 -94.3271 1526.3428 -91.5234 1519.5059 -89.835 c1509.8242 -87.4438 1500.0039 -90.1187 1491.5967 -95.0264 c1485.3892 -98.6499 1479.3213 -103.4575 1473.9229 -109.0479 C1473.0757 -106.4858 1471.7695 -104.0215 1469.7373 -101.6968 c1464.4092 -95.6006 1460.2822 -90.0483 1452.396 -87.3311 c1442.645 -83.9707 1432.5161 -82.6855 1423.9092 -89.564 c1420.3682 -92.394 1417.7197 -96.5254 1416.0537 -100.6895 c1414.3384 -104.9756 1414.9629 -109.9087 1413.3413 -114.0039 c1409.9604 -122.543 1407.6812 -131.7173 1411.9009 -140.3584 c1415.3008 -147.3203 1425.1973 -152.127 1431.7085 -155.7036 c1432.5405 -156.1606 1433.3398 -156.6724 1434.1343 -157.1924 C1430.4268 -157.3057 1426.8809 -157.4106 1424.0522 -157.4873 c1414.3262 -157.75 1405.3179 -162.6304 1396.3848 -165.9512 c1388.3501 -168.938 1381.582 -176.8208 1379.0146 -184.9097 c1376.3311 -193.3623 1381.311 -202.4932 1388.2227 -207.0952 c1395.1362 -211.6982 1405.5498 -212.7793 1413.5479 -213.6353 c1423.2578 -214.6743 1433.4253 -214.9131 1442.2124 -210.1831 c1442.5205 -210.0176 1442.814 -209.8369 1443.1123 -209.6611 C1445.375 -223.8516 1456.7637 -239.7935 1471.6885 -239.271 c1488.8228 -238.6709 1489.4922 -219.689 1487.7559 -206.9927 c1487.0884 -202.1128 1486.2393 -197.707 1484.644 -193.5303 C1485.8159 -193.8774 1487.0107 -194.1875 1488.2349 -194.4526 c1493.5884 -195.6133 1500.0142 -194.6851 1505.4844 -194.6851 c1509.8511 -194.6851 1514.2173 -194.8159 1518.5835 -194.7612 c1526.9795 -194.6567 1535.4043 -193.0327 1542.2261 -187.8862 c1545.583 -185.3535 1550.0977 -181.3159 1551.9819 -177.4961 cf0 D1475.1411 -128.8428 m1475.1436 -128.6938 1475.1489 -128.5454 1475.1523 -128.397 C1480.2861 -120.7603 1487.1572 -114.1392 1494.374 -108.7725 c1500.4429 -104.2588 1507.001 -101.5107 1514.6367 -102.0952 c1519.0942 -102.4365 1524.1367 -104.1748 1525.7646 -108.6504 c1529.2222 -118.1543 1523.6587 -128.1187 1517.0781 -134.5801 c1509.6719 -141.853 1499.709 -145.9121 1489.9111 -149.853 C1482.6777 -150.8975 1475.5591 -152.7144 1468.8994 -155.5562 C1468.7358 -154.8115 1468.4658 -154.0933 1468.0693 -153.4497 C1470.6323 -145.1738 1474.9736 -137.9502 1475.1411 -128.8428 cf1450.4824 -180.6216 m1449.7432 -182.3569 1448.9526 -184.061 1448.1694 -185.7593 C1445.2461 -190.0562 1442.0137 -194.4541 1438.1045 -197.376 c1431.8545 -202.0469 1424.5273 -201.2285 1417.1289 -200.8965 c1410.6055 -200.604 1402.8535 -199.5356 1396.7744 -196.9292 c1392.2622 -194.9946 1390.1543 -190.5532 1392.5273 -186.0303 c1395.9019 -179.5977 1402.248 -177.5718 1408.5029 -175.0503 c1416.043 -172.0107 1422.5723 -170.2432 1430.6719 -170.189 c1434.9517 -170.1602 1439.1235 -169 1443.397 -169 C1452.1289 -169 L1452.2905 -170.3408 1452.9805 -171.6255 1454.0005 -172.6543 C1452.562 -175.4033 1451.4561 -178.3359 1450.4824 -180.6216 cf1440.8569 -146.1392 m1435.3882 -142.5273 1429.5142 -139.5522 1424.4189 -135.3774 c1419.8706 -131.6514 1423.7988 -123.0156 1425.3789 -118.7534 c1427.896 -111.9624 1426.3857 -105.5566 1431.9077 -99.8413 c1436.7041 -94.877 1444.7764 -98.4316 1450.1455 -100.2817 c1451.7178 -100.8237 1453.1504 -101.9468 1454.0195 -103.4419 c1455.8931 -106.6636 1459.2061 -108.7148 1461.0674 -111.916 c1462.9468 -115.1494 1463.0264 -119.3213 1462.7344 -123.4443 C1458.8062 -129.8848 1455.9209 -136.7817 1454.5918 -143.7715 c1454.1694 -145.9922 1454.7871 -147.8633 1455.9365 -149.2534 C1455.7803 -149.6519 1455.6309 -150.0503 1455.4893 -150.4492 C1450.3223 -150.0928 1445.2983 -149.0723 1440.8569 -146.1392 cf1471.6885 -226.271 m1466.9316 -226.7949 1462.3428 -221.5698 1460.0615 -218.0723 c1456.9668 -213.3271 1455.5747 -207.7192 1455.7749 -202.1011 c1455.8872 -198.9531 1457.5459 -195.5254 1459.1816 -192.3516 C1459.6133 -191.7578 1460.0469 -191.1655 1460.4863 -190.5796 c1461.9038 -188.689 1463.416 -186.8086 1464.8477 -184.876 C1466.1035 -187.5195 1466.8774 -189.7656 1468.96 -191.9458 c1473.2524 -196.4404 1473.7466 -201.8242 1474.7705 -207.6138 c1475.4834 -211.6416 1478.1147 -225.5635 1471.6885 -226.271 cf1539.6934 -171.9473 m1537.1465 -174.5635 1535.4043 -177.0977 1532.1758 -178.9937 c1526.9717 -182.0498 1520.2417 -181.8145 1514.4302 -181.7686 c1510.8008 -181.7397 1507.1738 -181.6851 1503.5444 -181.6851 c1499.2876 -181.6851 1494.1846 -182.4575 1490.0181 -181.5547 c1483.5127 -180.145 1478.0005 -176.7549 1472.7036 -172.9434 C1472.209 -172.3838 1471.6924 -171.8716 1471.1504 -171.4106 C1471.1797 -171.1812 1471.2183 -170.9556 1471.2393 -170.7227 c1471.3086 -169.9575 1471.2217 -169.2642 1471.0303 -168.6323 C1472.9014 -167.6982 1474.8452 -166.8853 1476.8374 -166.1733 C1478.646 -167.4282 1481.042 -167.8623 1483.5425 -166.6343 c1486.4541 -165.2041 1489.3955 -163.8779 1492.335 -162.585 C1495.8154 -162.1309 1499.2783 -161.8687 1502.6221 -161.7437 c1510.0664 -161.4658 1517.7866 -161.541 1525.1514 -162.7114 c1526.813 -162.9756 1528.4453 -163.3765 1530.0752 -163.7861 c1531.0762 -164.0547 1532.0654 -164.3613 1533.0449 -164.6997 C1535.0078 -166.4575 1536.9761 -168.1738 1538.7773 -170.1035 c1539.1543 -170.5073 1539.7354 -171.9541 1539.7671 -171.2891 C1539.7813 -171.4521 1539.7988 -171.6152 1539.8247 -171.7754 C1539.7808 -171.833 1539.7393 -171.8848 1539.6934 -171.9473 Cf*U2812.6064 -398.5142 m2808.248 -395.2944 2804.1045 -391.6919 2799.2197 -389.2729 c2796.9111 -388.1299 2794.5068 -387.2935 2792.0469 -386.6846 C2792.7969 -385.4707 2793.4707 -384.1489 2794.042 -382.6191 c2795.4922 -378.7412 2799.1543 -375.2695 2799.9385 -371.0688 c2802.4668 -357.5146 2798.251 -343.1914 2796.3037 -329.8486 c2795.4492 -323.9971 2794.8232 -317.9189 2792.3359 -312.5142 c2789.666 -306.71 2786.3223 -301.3838 2784.2852 -295.2871 c2779.6367 -281.3828 2768.8184 -270.665 2760.127 -259.2803 c2752.6094 -249.4326 2744.002 -240.8086 2732.4512 -235.7354 c2729.3965 -234.3931 2726.2578 -233.2646 2723.1084 -232.1694 c2719.5576 -230.9355 2716.4912 -229.1665 2713.125 -227.522 c2706.752 -224.4087 2699.9473 -222.5273 2693.5898 -219.3555 c2681.0889 -213.1182 2665.5293 -216.4707 2652.166 -216.6094 c2646.5 -216.668 2640.043 -219.2529 2634.7051 -220.957 c2629.0488 -222.7632 2623.4678 -225.0239 2618.2246 -227.8413 C2617.582 -225.8071 2616.7979 -223.8018 2615.916 -221.7715 c2613.9736 -217.3013 2610.7344 -213.4644 2608.8945 -209.001 c2604.709 -198.8452 2595.7793 -190.9668 2586.2451 -185.8276 c2576.626 -180.6426 2568.999 -172.7349 2558.6143 -168.6416 c2547.1689 -164.1299 2536.0244 -165.9287 2524.1104 -166.1113 c2511.7842 -166.2998 2499.5938 -168 2487.2461 -168 C2467.8438 -168 L2461.0645 -168 2454.9482 -170.0059 2448.6533 -172.4072 c2427.4121 -180.5093 2404.6299 -189.582 2392.4199 -210.0425 C2390.8789 -206.6587 2388.8691 -203.5591 2385.749 -201.2856 c2383.2754 -199.4834 2380.4756 -198.8071 2377.5371 -198.1069 c2373.7969 -197.2153 2371.5117 -196.1006 2368.291 -194.2139 c2355.7803 -186.8853 2338.2549 -192.228 2325.5645 -195.9819 c2318.9365 -197.9424 2312.1006 -198.9312 2305.4463 -200.8623 c2298.1582 -202.978 2291.0928 -205.8267 2284.1621 -208.8979 c2278.2061 -211.5376 2271.9492 -213.3574 2266.1768 -216.436 c2259.4863 -220.0044 2255.168 -225.3765 2250.1006 -230.7773 c2245.4443 -235.7397 2240.4209 -240.2813 2236.2383 -245.6768 c2232.3145 -250.7402 2226.3369 -254.7358 2221.7432 -259.2065 c2217.3047 -263.5249 2213.3516 -268.3779 2210.2041 -273.7139 c2206.7969 -279.4912 2206.2969 -285.896 2204.9238 -292.2773 C2203.8262 -289.8911 2202.417 -288.0444 2200.4258 -286.0195 c2198.2012 -283.7588 2197.0137 -281.0073 2194.9844 -278.6606 c2193.5898 -277.0464 2193.0176 -274.1343 2192.1211 -272.2153 c2191.1719 -270.1841 2188.2773 -268.7036 2186.873 -266.8364 c2185.2178 -264.6343 2183.498 -262.2676 2181.1016 -260.8018 c2180.2988 -260.311 2179.5615 -259.729 2178.8027 -259.1753 C2178.7227 -259.0093 2178.6426 -258.8403 2178.5391 -258.6333 C2177.9814 -257.7168 2177.2598 -256.9575 2176.374 -256.3555 C2175.9023 -255.9546 2175.4053 -255.5898 2174.8965 -255.2417 C2174.8232 -255.0884 2174.752 -254.9395 2174.6592 -254.7529 C2173.7197 -253.1484 2172.1885 -252.2485 2170.5586 -251.5029 c2167.3223 -250.021 2163.8926 -249.5532 2160.3643 -249.3296 c2153.2979 -248.8823 2145.7246 -250.3516 2139.0898 -252.7354 c2131.2598 -255.5483 2124.6123 -261.5107 2117.9199 -266.2983 c2114.8906 -268.4653 2112.0273 -270.8491 2109.5605 -273.5469 C2109.5586 -273.5498 2109.5566 -273.5498 2109.5547 -273.5537 C2109.541 -273.5688 2109.5273 -273.585 2109.5137 -273.6006 C2109.2227 -266.5601 2106.2783 -258.8735 2101.8535 -253.4375 c2094.0068 -243.7959 2083.0234 -239.874 2070.9209 -239.0752 c2058.7793 -238.2744 2046.3076 -239.835 2034.1328 -239.917 c2019.0957 -240.0186 2004.0635 -240.9683 1989.4785 -244.8423 c1983.2422 -246.4985 1977.2637 -248.8687 1971.4365 -251.6187 c1966.7363 -253.8359 1960.7285 -258.6572 1957.7197 -262.9131 c1956.2402 -265.0054 1955.1787 -267.4595 1954.5078 -269.9434 C1952.3828 -269.0352 1950.3467 -267.6543 1948.3633 -266.5762 c1945.6563 -265.1045 1942.29 -264.5239 1939.2861 -263.792 c1926.1777 -260.5981 1910.835 -259.7788 1897.7588 -263.2109 c1885.2017 -266.5068 1874.5752 -274.4946 1864.8428 -282.7471 c1855.6582 -290.5352 1847.7974 -298.5532 1841.0903 -308.6118 c1838.0239 -313.2104 1835.5908 -318.4351 1832.0947 -322.7119 c1828.7744 -326.7739 1825.1523 -330.4517 1822.9209 -335.2725 c1816.5898 -348.9478 1812.3906 -365.8926 1817.3633 -380.3394 C1813.3335 -380.8315 1809.3208 -381.4404 1805.251 -381.7725 c1797.7627 -382.3833 1790.1616 -385.5166 1783.5166 -388.897 c1776.7163 -392.356 1770.6372 -397.1436 1764.5732 -401.7217 c1758.0771 -406.6265 1751.0713 -410.7207 1744.6782 -415.7617 c1738.1704 -420.8926 1732.6631 -427.1494 1727.9014 -433.9033 c1723.1328 -440.6665 1720.3594 -448.4507 1717.3398 -456.084 c1714.1265 -464.2085 1711.0449 -472.3965 1708.3486 -480.7095 c1705.8608 -488.3809 1705.228 -496.668 1709.418 -503.8447 c1713.6406 -511.0786 1724.8779 -504.5386 1720.6426 -497.2832 c1717.4219 -491.7661 1720.6504 -484.7534 1722.5234 -479.2754 c1724.9746 -472.1064 1727.7021 -465.0352 1730.4883 -457.9907 c1736.1069 -443.7861 1743.8901 -432.1592 1756.3975 -423.0591 c1761.623 -419.2563 1767.1489 -415.9561 1772.3232 -412.0498 c1777.6162 -408.0537 1782.936 -404.1323 1788.7144 -400.8564 c1794.0137 -397.8521 1800.5972 -395.1519 1806.7026 -394.6538 c1813.7075 -394.0825 1820.4893 -392.6011 1827.564 -392.5898 c1833.7466 -392.5801 1835.4824 -385.7344 1832.1602 -381.4937 c1825.6807 -373.2227 1827.9507 -360.1333 1830.7422 -350.9409 c1832.1924 -346.1646 1834.1353 -340.9961 1836.9951 -336.9219 c1838.5093 -334.7651 1840.4912 -332.8779 1842.1602 -330.8369 c1844.6167 -327.8311 1846.4946 -324.4766 1848.5127 -321.1738 c1852.2036 -315.1328 1856.1191 -309.2588 1860.8154 -303.9482 c1865.3916 -298.7734 1871.1372 -294.3457 1876.4312 -289.9229 c1886.0342 -281.8989 1898.0068 -274.2314 1910.9692 -274.2354 c1917.6729 -274.2373 1924.4023 -274.2476 1930.9971 -275.5801 c1934.0928 -276.2061 1937.1084 -276.6221 1940.1572 -277.499 c1940.918 -277.7178 1943.6611 -278.8525 1942.542 -278.2012 C1943.9756 -278.9673 1945.3916 -279.7695 1946.8281 -280.5298 c1951.7402 -283.1304 1957.3965 -285.3252 1962.6719 -282.5161 c1967.7998 -279.7856 1965.8086 -272.7139 1969.666 -268.9463 c1978.8047 -260.0215 1992.7588 -256.8057 2004.9512 -254.7598 c2019.3525 -252.3428 2034.0029 -253.3252 2048.5186 -252.7593 c2059.7158 -252.3228 2072.4873 -249.9355 2083.0869 -254.7402 c2089.3428 -257.5762 2093.4629 -262.853 2095.6074 -269.2866 c2096.8184 -272.9189 2096.377 -276.4902 2098.0459 -279.9951 c2099.3525 -282.7397 2100.3184 -286.0391 2100.459 -289.0776 c2100.7871 -296.168 2110.2139 -297.2588 2112.8086 -292.2876 C2113.8545 -291.5435 2114.7031 -290.4229 2115.166 -288.8657 c2116.6104 -284.0093 2120.5234 -280.4678 2124.4814 -277.5234 c2129.0898 -274.0938 2133.7891 -270.605 2138.5977 -267.4648 c2144.5098 -263.6045 2156.7783 -260.0176 2164.1826 -262.897 C2164.998 -264.0249 2166.0742 -264.9438 2167.3662 -265.8271 C2167.6719 -266.4268 2168.0586 -266.98 2168.5479 -267.4727 C2169.3535 -268.4048 2170.3076 -269.0732 2171.3223 -269.7622 c2173.3477 -271.1357 2174.9707 -272.4961 2176.4424 -274.4546 c2177.2969 -275.5918 2178.1768 -276.7075 2179.0918 -277.7964 c2179.6348 -278.4194 2180.2373 -278.978 2180.8994 -279.4727 C2182.4736 -280.5703 2182.6797 -280.7861 2181.5195 -280.1201 C2183.5 -284.9297 2186.0146 -289.1743 2189.3594 -293.1895 c2191.3672 -295.6006 2193.0107 -297.1123 2194.0313 -300.1616 c2195.0293 -303.1431 2196.2451 -306.2373 2198.1641 -308.7515 c2201.4756 -313.0889 2207.4219 -314.4575 2211.2832 -309.8633 c2215.4756 -304.8745 2217.2334 -297.5303 2218.3379 -291.2715 c2219.5361 -284.4834 2221.3262 -279.3979 2225.7412 -273.9839 c2229.915 -268.8657 2235.0186 -264.5332 2239.8916 -260.1084 c2244.7393 -255.7061 2248.752 -250.6592 2253.3379 -245.998 c2258.3232 -240.9316 2262.8711 -234.5186 2268.5518 -230.2998 c2274.0332 -226.2305 2280.3301 -225.1362 2286.2754 -222.2031 c2293.0156 -218.8784 2300.041 -216.1953 2307.1963 -213.9175 c2313.8252 -211.8076 2320.7129 -210.9663 2327.3477 -209.0132 c2334.7041 -206.8477 2342.0811 -204.4971 2349.7695 -203.9326 c2353.2598 -203.6768 2356.6143 -204.0347 2359.9883 -204.9141 c2362.3555 -205.5308 2364.2598 -207.4653 2366.8516 -208.5215 c2372.375 -210.7729 2378.4063 -209.8662 2380.9561 -216.0342 c2381.3379 -217.019 2381.6953 -218.0132 2382.0264 -219.0166 c2384.3301 -225.6992 2393.7178 -224.2729 2394.8359 -218.833 C2397.6406 -220.4404 2401.4814 -220.2617 2403.6074 -216.689 c2414.002 -199.2231 2434.1836 -192.0288 2452.1094 -184.9429 c2457.1689 -182.9424 2462.3594 -181 2467.8438 -181 C2485.3057 -181 L2496.6621 -181 2507.7969 -179.9214 2519.1162 -179.2549 c2528.9287 -178.6772 2539.4404 -177.312 2549.124 -179.2012 c2558.8291 -181.0947 2567.332 -188.291 2574.9863 -194.126 c2578.5166 -196.8184 2582.7129 -198.3555 2586.1289 -201.252 c2589.8223 -204.3833 2593.2148 -207.1304 2595.7051 -211.3691 c2597.8672 -215.0479 2599.6035 -218.9604 2601.7773 -222.6821 c2604.2568 -226.9253 2606.6504 -231.6987 2606.8613 -236.6904 c2607.1318 -243.0791 2614.7998 -244.5947 2618.2314 -241.2021 C2619.5391 -241.4341 2620.9854 -241.2227 2622.4629 -240.3638 c2631.7441 -234.9668 2642.1641 -231.8931 2652.6074 -229.6411 c2655.085 -229.1069 2658.0752 -229.4326 2660.6162 -229.2852 c2664.1572 -229.0796 2667.6934 -228.8579 2671.2402 -228.7642 c2676.8428 -228.6162 2683.2607 -228.7007 2688.3525 -231.2412 c2693.7725 -233.9453 2699.3096 -235.833 2704.9414 -238.0259 c2707.752 -239.1206 2710.3799 -240.689 2712.9141 -242.3042 c2715.7148 -244.0894 2719.8262 -244.751 2722.9551 -245.8691 c2733.5801 -249.6685 2742.2021 -256.9209 2748.9023 -265.8418 c2752.6309 -270.8057 2757.0361 -275.0952 2760.543 -280.2354 c2764.1768 -285.5615 2768.916 -291.1157 2771.2012 -297.1558 c2773.4082 -302.9888 2775.6602 -308.6011 2778.4521 -314.1895 c2779.3779 -316.0425 2780.6504 -317.77 2781.3652 -319.7212 c2782.3408 -322.3818 2782.5957 -325.7646 2783.0684 -328.5752 c2785.0996 -340.6362 2787.3037 -352.498 2787.3037 -364.7471 c2787.3037 -367.3354 2787.4893 -367.3647 2785.9297 -369.7119 c2784.7803 -371.4399 2783.9365 -373.3477 2783.0332 -375.1553 c2782.0703 -377.0806 2781.7559 -379.1494 2780.4307 -380.8687 c2778.9971 -382.7275 2777.4453 -383.7769 2775.627 -385.374 c2771.9922 -388.5645 2773.5146 -392.9482 2776.6543 -395.0474 C2777.6074 -396.9253 2779.4404 -398.3467 2782.1621 -398.4106 c2792.2031 -398.6475 2800.0313 -404.5347 2807.3164 -410.9053 c2811.1279 -414.2383 2815.5156 -417.752 2818.3555 -421.9697 c2821.1133 -426.0654 2822.6016 -430.8599 2824.5127 -435.3691 c2829.0469 -446.0679 2833.8398 -456.6426 2836.6387 -467.9639 c2839.4531 -479.3506 2838.4209 -490.6685 2834.6836 -501.7114 c2833.1855 -506.1387 2830.2783 -510.1865 2828.041 -514.2617 c2825.1885 -519.458 2822.4648 -524.7813 2819.8076 -530.0908 c2817.3516 -534.9985 2814.6719 -540.0566 2811.1533 -544.2905 c2807.9951 -548.0898 2804.374 -551.4546 2801.3506 -555.373 c2799.7842 -557.4043 2798.0156 -559.2661 2796.4551 -561.311 c2795.3379 -562.7749 2793.5234 -566.3423 2791.7881 -567.0547 c2787.2578 -568.9155 2782.4434 -570.0107 2777.9883 -572.0757 c2774.4658 -573.7085 2769.9004 -573.7446 2766.1689 -574.8955 c2761.5605 -576.3164 2758.1104 -578.8711 2755.208 -582.6538 c2753.0449 -585.4727 2754.7705 -589.9253 2757.5391 -591.5469 c2760.8867 -593.5078 2764.2803 -592.02 2766.4326 -589.2153 c2768.5 -586.522 2774.3008 -586.2031 2777.3232 -585.5898 c2782.0947 -584.6216 2786.5498 -582.5879 2791.1621 -581.0459 c2797.2061 -579.0244 2800.8145 -576.8877 2804.7344 -571.7529 c2808.0635 -567.3911 2811.5313 -563.0869 2815.2598 -559.0591 c2819.0986 -554.9121 2822.915 -550.7964 2825.8555 -545.9395 c2829.252 -540.3325 2831.9453 -534.3599 2835.2676 -528.7148 c2841.4932 -518.1367 2847.2646 -507.0493 2849.9512 -495.0039 c2855.583 -469.7539 2842.7344 -447.3853 2834.1172 -424.6289 c2830 -413.7598 2821.8516 -405.3438 2812.6064 -398.5142 cf3818.918 -372.0225 m3814.1318 -375.3574 3811.8506 -380.3066 3810.0352 -385.6558 c3809.1299 -388.3208 3806.9346 -390.1504 3805.123 -392.2036 c3802.8037 -394.8335 3800.5498 -397.4766 3797.9961 -399.8877 c3795.2979 -402.4346 3792.4541 -402.7822 3788.8701 -402.8672 c3785.4551 -402.9487 3782.2578 -403.8984 3778.9297 -404.6206 c3771.416 -406.2505 3764.0771 -406.8281 3756.4043 -406.6973 c3741.5879 -406.4443 3726.9824 -404.54 3712.7656 -400.3032 c3701.0898 -396.8237 3689.6426 -389.6069 3679.8945 -382.418 c3674.3271 -378.312 3668.7363 -374.7168 3663.748 -369.8525 c3659.5273 -365.7373 3659.9355 -358.4146 3653.1191 -356.5391 c3647.9492 -355.1172 3642.1045 -359.9722 3638.3301 -362.8887 c3633.1016 -366.9287 3627.627 -368.5464 3621.335 -370.3848 c3615.3164 -372.1436 3609.1631 -371.8628 3602.959 -371.9858 c3596.4395 -372.1152 3589.8174 -372.1904 3583.3447 -371.2778 c3574.6934 -370.0581 3567.8457 -366.8154 3561.5615 -360.7764 c3558.75 -358.0757 3555.5137 -356.333 3552.6504 -353.7554 c3549.5088 -350.9272 3546.1328 -348.812 3542.9287 -346.1177 c3537.1094 -341.2241 3532.8926 -333.6592 3529.6299 -326.8838 c3526.667 -320.7295 3525.5771 -312.0928 3528.9463 -305.9404 c3532.3818 -299.6665 3524.7227 -293.9795 3519.8965 -297.0024 C3519.793 -291.7925 3513.3076 -287.2988 3509.0371 -292.2427 c3500.4004 -302.2393 3488.2148 -307.5254 3477.0869 -314.1719 c3464.0742 -321.9443 3450.6875 -324.8472 3435.5918 -325.2295 c3428.8535 -325.4004 3422.0684 -325.291 3415.3486 -324.7676 c3409.4971 -324.3115 3402.1309 -323.416 3397.5977 -319.355 c3387.627 -310.4204 3381.584 -298.208 3378.2637 -285.4097 c3377.1992 -281.3062 3373.4639 -280.1646 3370.3047 -281.0869 C3368.6445 -277.4053 3363.5205 -275.0337 3359.6387 -278.6611 c3356.5723 -281.5264 3353.3789 -282.3433 3349.2715 -282.5317 c3343.8672 -282.7793 3338.5986 -283.6865 3333.1904 -283.9751 c3322.252 -284.5581 3310.8047 -282.0713 3300.2363 -279.4146 c3295.2266 -278.1553 3290.5039 -276.3379 3286.0254 -273.7646 c3282.0039 -271.4536 3278.3203 -270.2188 3274.8477 -266.8955 c3267.4941 -259.8569 3268 -251.4248 3268 -242.0093 C3268 -226.1636 L3268 -220.5645 3269.418 -215.606 3271.2168 -210.3271 c3274.6045 -200.3823 3280.1064 -192.0513 3285.8057 -183.3247 c3291.4648 -174.6582 3297.6484 -166.9639 3304.9648 -159.6484 c3308.9941 -155.6187 3313.0176 -151.5889 3317.0469 -147.5591 c3321.0928 -143.5132 3325.8877 -140.4429 3330.0283 -136.5146 c3332.5996 -134.0767 3332.4824 -129.7769 3330.0273 -127.3223 c3322.6152 -119.9102 3315.5918 -112.1123 3310.4932 -102.8828 c3304.1221 -91.3511 3303.1777 -76.8008 3304.5254 -63.9219 c3305.2402 -57.1055 3310.3369 -50.4941 3313.3027 -44.562 c3316.6289 -37.9102 3319.9551 -31.2573 3323.2813 -24.6055 c3326.1553 -18.8584 3329.7168 -13.6475 3332.1426 -7.62109 c3333.0566 -5.34863 3334.2295 -3.14941 3335.5381 -1 C3320.8359 -1 L3320.7773 -1.15674 3320.7119 -1.31299 3320.6572 -1.47021 c3318.3682 -8.03516 3314.2969 -13.562 3311.2246 -19.707 c3307.6211 -26.9136 3304.0186 -34.1201 3300.415 -41.3267 c3296.7324 -48.6895 3292.6094 -55.5874 3291.5254 -63.9219 c3289.6396 -78.4326 3291.9033 -95.2339 3298.71 -108.2505 c3303.2324 -116.8994 3309.1602 -124.5137 3316.0234 -131.5938 C3313.2656 -133.7656 3310.416 -135.8823 3307.9316 -138.3667 c3303.0068 -143.292 3298.0391 -148.2173 3293.1152 -153.1426 c3284.7852 -161.4712 3278.1826 -171.1523 3271.8174 -181.0146 c3265.0664 -191.4756 3259.8125 -201.9336 3256.4277 -213.9976 c3253.207 -225.4775 3254.9072 -238.731 3254.9072 -250.5791 c3254.9072 -274.7725 3277.7168 -287.1567 3298.4629 -292.373 c3310.9141 -295.5029 3324.2334 -297.7432 3337.0723 -296.7163 c3347.2441 -295.9028 3357.6885 -295.9888 3366.0625 -290.0801 C3370.0449 -304.666 3377.3164 -318.124 3388.4053 -328.5474 c3399.5186 -338.9927 3417.9189 -338.2593 3432.1426 -338.2632 c3448.6914 -338.2676 3467.043 -336.1846 3481.2266 -326.9048 c3492.7803 -319.3452 3505.7266 -314.0557 3515.5762 -304.2539 C3511.0273 -317.5879 3516.9609 -331.1533 3523.8379 -343.0117 c3525.957 -346.666 3528.6201 -350.0488 3531.4805 -353.146 c3534.3643 -356.2671 3538.3848 -357.9497 3541.3076 -360.8667 c3543.9229 -363.4756 3546.6904 -365.8726 3549.8701 -367.77 c3554.0684 -370.2749 3557.2617 -374.6758 3561.4453 -377.4048 c3575.0371 -386.2705 3593.1553 -385.1694 3608.6221 -384.8706 c3617.8154 -384.6934 3625.918 -382.6748 3634.6572 -379.9238 c3640.3613 -378.1284 3644.4375 -373.4297 3649.4629 -370.6406 C3649.6348 -371.0698 3649.7891 -371.479 3649.9238 -371.7817 c3650.9063 -373.9858 3651.9795 -376.1128 3653.5869 -377.9429 c3657.3496 -382.2261 3662.0215 -385.7173 3666.6162 -389.0547 c3674.4092 -394.7163 3682.4824 -400.0229 3690.9307 -404.6543 c3710.0137 -415.1152 3731.1729 -418.7324 3752.7393 -419.5938 c3764 -420.0435 3774.752 -418.9082 3785.7363 -416.4121 c3790.7031 -415.2837 3795.6621 -415.8389 3800.4658 -413.7637 c3805.2754 -411.6865 3809.042 -407.4404 3812.4385 -403.5649 c3815.3496 -400.2422 3818.6699 -397.123 3820.8447 -393.2515 c3822.7266 -389.9028 3822.8594 -385.0732 3826.2363 -382.7192 c3829.1113 -380.7153 3833.4619 -380.1187 3837 -379.4365 C3837 -366.209 L3836.2363 -366.3574 3835.4746 -366.5088 3834.7139 -366.6655 c3829.4766 -367.7432 3823.3955 -368.9009 3818.918 -372.0225 cf3672.7334 -1429 m3672.0869 -1429 3671 -1429 Y3667.3086 -1429 3665.1348 -1431.1875 3664.4707 -1433.7666 C3662.6973 -1434.4688 3660.5049 -1435.1719 3659.375 -1435.5059 c3655.165 -1436.748 3650.8516 -1436.9316 3646.6572 -1438.1221 c3644.3975 -1438.7637 3642.1309 -1439.3174 3639.9082 -1440.084 c3636.8174 -1441.1494 3634.125 -1443.1377 3630.9785 -1443.9668 c3625.292 -1445.4648 3620.2979 -1446.5859 3615.752 -1450.5625 c3606.6182 -1458.5537 3598.4316 -1467.8164 3589.499 -1476.041 c3581.7939 -1483.1357 3576.833 -1492.2432 3571.0176 -1500.7588 c3569.6641 -1502.7402 3568.1006 -1504.5254 3566.4248 -1506.2383 c3566.25 -1506.418 3566.0625 -1506.585 3565.8789 -1506.7549 C3565.7158 -1506.4932 3565.5801 -1506.2734 3565.5293 -1506.1699 c3564.7207 -1504.5059 3564.1943 -1502.6641 3563.5781 -1500.9219 c3562.2061 -1497.043 3560.4473 -1493.3613 3558.752 -1489.6211 c3556.3105 -1484.2344 3551.6729 -1480.1943 3549.2207 -1474.8193 c3544.1738 -1463.7598 3535.9219 -1454.5977 3526.9688 -1446.4551 c3522.4541 -1442.3496 3518.0205 -1438.5 3513.7441 -1434.1289 c3509.8203 -1430.1172 3505.2334 -1427.1875 3499.8398 -1425.6123 c3491.7744 -1423.2568 3488.3545 -1435.8027 3496.3848 -1438.1475 c3501.7021 -1439.7002 3505.0801 -1443.8223 3508.7393 -1447.7393 c3513.0996 -1452.4043 3518.4766 -1456.1064 3523.0156 -1460.6455 c3527.2871 -1464.916 3531.7402 -1469.7207 3534.8613 -1474.9014 c3536.3184 -1477.3203 3537.3652 -1479.999 3538.5342 -1482.5625 c3539.8906 -1485.5352 3542.2598 -1488.1328 3544.1748 -1490.7656 c3549.4375 -1498 3550.9766 -1506.6475 3555.1543 -1514.3906 c3557.0771 -1517.9561 3560.335 -1520.6094 3564.4258 -1520.9834 c3569.3027 -1521.4287 3573.4609 -1517.6367 3576.6152 -1514.4121 c3580.2373 -1510.709 3583.1865 -1506.1797 3585.7871 -1501.7227 c3588.5635 -1496.9639 3591.9277 -1492.5674 3595.582 -1488.4277 c3599.3535 -1484.1533 3603.9785 -1480.7246 3608.0068 -1476.6963 c3613.1953 -1471.5068 3618.3848 -1466.3174 3623.5742 -1461.1289 c3628.0303 -1456.6738 3634.127 -1458.1016 3639.1504 -1454.9541 c3643.5479 -1452.1992 3649.0078 -1450.3984 3654.1563 -1449.8145 c3662.209 -1448.9014 3673.6836 -1446.2715 3678.3457 -1438.9102 c3681.0137 -1434.6992 3677.5264 -1429 3672.7334 -1429 cf*u1 D1692.4302 -2011.8691 m1689.8916 -2011.6318 1687.481 -2011.4951 1685.104 -2011.5078 C1688.7324 -2003.2441 1689.0244 -1993.5684 1683.2783 -1986.1641 c1679.1318 -1980.8213 1670.5781 -1979.5527 1664.3623 -1980.2715 c1657.1084 -1981.1113 1650.7085 -1984.7461 1645.2998 -1989.4873 C1645.4526 -1979.7461 1642.501 -1970.6494 1632.9893 -1964.6602 c1622.1479 -1957.834 1601.8936 -1957.7217 1591.27 -1964.9648 c1577.0708 -1974.6465 1579.1289 -1993.5977 1589.2412 -2005.3105 c1591.9668 -2008.4668 1595.4136 -2011.04 1599.0859 -2013.2852 C1592.5459 -2013.3633 1586.0449 -2013.6875 1579.5254 -2014.8896 c1562.9155 -2017.9521 1540.7158 -2029.4922 1543.5557 -2049.6709 c1544.9849 -2059.8252 1553.1108 -2064.6768 1562.0659 -2067.6523 c1571.2798 -2070.7129 1582.3364 -2072.0381 1591.7598 -2069.5439 c1596.3672 -2068.3242 1600.7925 -2066.1855 1604.9712 -2063.9336 c1606.9238 -2062.8809 1609.0439 -2061.7744 1611.1338 -2060.5879 C1609.5527 -2066.6807 1609.3428 -2072.9609 1610.4409 -2079.5322 c1612.207 -2090.0986 1621.3877 -2095.9736 1629.7939 -2101.2305 c1637.9585 -2106.3359 1646.9146 -2110.3154 1656.5 -2111.7617 c1664.6914 -2112.998 1671.6348 -2110.7627 1674.2842 -2102.4121 c1676.1782 -2096.4414 1676.2188 -2086.332 1674.1533 -2080.4102 c1670.6021 -2070.2314 1664.8115 -2060.9492 1659.2119 -2051.8066 c1658.0967 -2049.9863 1656.9746 -2048.2275 1655.8408 -2046.498 C1659.9531 -2047.1455 1664.3301 -2047.2158 1668.1709 -2047.418 c1677.0625 -2047.8867 1686.0537 -2047.9775 1694.9604 -2048.2109 c1703.2866 -2048.4287 1712.0283 -2047.7158 1719.3848 -2043.4883 c1725.8901 -2039.751 1730.1064 -2032.3809 1726.6572 -2025.167 c1721.3301 -2014.0264 1702.9507 -2012.8506 1692.4302 -2011.8691 cf0 D1596.5679 -1977.5146 m1602.167 -1970.833 1616.4658 -1972.2129 1623.8008 -1974.6143 c1639.0015 -1979.5898 1630.8779 -2001.4453 1627.3765 -2011.917 C1626.1641 -2011.5488 1624.937 -2011.1172 1623.6274 -2010.5947 c1617.5503 -2008.1699 1611.834 -2005.6855 1606.2192 -2002.2813 c1598.373 -1997.5254 1588.8945 -1986.6709 1596.5679 -1977.5146 cf1615.3608 -2041.8779 m1608.5371 -2046.5654 1601.7178 -2051.2295 1594.2344 -2054.8438 c1587.1611 -2058.2588 1580.2734 -2058.1719 1572.7061 -2056.8711 c1566.7598 -2055.8486 1556.6143 -2054.127 1556.2607 -2046.6152 c1555.9678 -2040.376 1562.2642 -2035.4902 1567.0781 -2032.708 c1573.3535 -2029.0811 1581.1392 -2027.4102 1588.2754 -2026.6191 c1597.4248 -2025.6064 1606.8877 -2026.2734 1616.0791 -2026.2734 c1620.2852 -2026.2734 1624.4468 -2026.7246 1628.6074 -2027.1924 C1624.0234 -2032.2441 1621.1646 -2037.8916 1615.3608 -2041.8779 cf1657.8945 -2075.5117 m1659.3647 -2078.3467 1661.9023 -2082.2549 1662.0029 -2085.4824 c1662.0815 -2088.002 1662.2451 -2090.5156 1662.2754 -2093.0371 c1662.3008 -2095.1465 1662.1748 -2097.1475 1661.6421 -2099.1572 C1661.4985 -2099.1523 1661.29 -2099.1563 1660.9526 -2099.1719 c1659.1494 -2099.2549 1657.3789 -2098.7959 1655.6416 -2098.3906 c1648.6138 -2096.75 1642.4927 -2093.7207 1636.3555 -2090.0059 c1632.9951 -2087.9717 1629.7617 -2085.7324 1626.7617 -2083.1963 c1623.6792 -2080.5898 1622.9204 -2076.9043 1622.6577 -2073.041 c1621.8359 -2060.9512 1629.7705 -2051.2881 1635.7217 -2041.2158 C1644.6831 -2051.5117 1651.5723 -2063.3203 1657.8945 -2075.5117 cf1647.5449 -2023.0771 m1648.3267 -2020.3975 1647.6172 -2017.4111 1644.5825 -2016.1006 c1644.1807 -2015.9277 1643.7842 -2015.7637 1643.3901 -2015.6094 C1643.8379 -2014.5586 1644.3271 -2013.5234 1644.8008 -2012.4961 c1646.98 -2007.7637 1648.9414 -2004.0957 1652.666 -2000.3174 c1656.687 -1996.2393 1672.1074 -1987.3652 1674.6982 -1997.2021 c1676.2109 -2002.9463 1671.749 -2010.1221 1667.8398 -2013.8828 c1667.2686 -2014.4326 1666.6582 -2014.9482 1666.0317 -2015.4482 C1659.8032 -2017.7881 1653.7695 -2020.7041 1647.5449 -2023.0771 Cf1714.8438 -2030.9463 m1715.0952 -2030.0625 1713.2109 -2032.0078 1712.8232 -2032.2637 c1711.689 -2033.0137 1710.4922 -2033.4502 1709.2124 -2033.8633 c1702.751 -2035.9531 1695.4531 -2035.3037 1688.7832 -2034.9629 c1681.2988 -2034.582 1673.8101 -2034.7148 1666.3281 -2034.3213 c1663.8877 -2034.1924 1661.4092 -2034.04 1658.9741 -2033.6836 C1663.5322 -2031.9629 1667.9321 -2029.8086 1671.874 -2027.0752 C1677.1436 -2025.334 1682.5273 -2024.2246 1688.1519 -2024.5479 c1696.0615 -2025.002 1709.0137 -2025.5996 1714.6543 -2030.5654 c1714.7583 -2030.6572 1714.8438 -2030.7148 1714.9131 -2030.748 C1714.8901 -2030.8027 1714.8672 -2030.8652 1714.8438 -2030.9463 cf*U552.064 -2153 m577.502 -2153 L575.3486 -2151.3789 573.3564 -2149.8496 571.6968 -2149.1406 c569.8262 -2148.3408 567.9141 -2147.6396 566.0508 -2146.8242 c565.3022 -2146.4883 564.5693 -2146.1191 563.8521 -2145.7197 c563.6851 -2145.6309 563.5479 -2145.5508 563.4224 -2145.4756 C565.0708 -2144.0938 569.9092 -2143.125 571.0674 -2142.7627 c575.3804 -2141.416 579.2285 -2139.0215 583.8706 -2138.8066 c587.2861 -2138.6484 591.9365 -2145.5225 593.9951 -2147.7207 c595.9355 -2149.792 598.4966 -2151.4502 601.145 -2153 C626.96 -2153 L625.7476 -2151.2539 624.4824 -2149.5371 623.2314 -2147.8047 c619.7749 -2143.0176 617.4785 -2138.1855 615.9746 -2132.4883 c615.2314 -2129.6738 614.8682 -2126.8096 613.9487 -2124.0371 c613.7847 -2123.543 613.6553 -2123.1865 613.5527 -2122.9307 C613.6479 -2122.8926 613.751 -2122.709 613.8413 -2122.2285 c613.9507 -2121.6465 614.1514 -2120.9209 614.5557 -2120.4365 c616.9419 -2117.5742 622.2397 -2117.2432 625.6025 -2117.4922 c639.7676 -2118.541 640.2646 -2141.2637 641.168 -2153 C655.481 -2153 L657.3882 -2147.3779 660.002 -2142.1367 663.2119 -2137.043 c665.2319 -2133.8379 667.5234 -2130.8232 669.9351 -2127.9072 c672.0854 -2125.3066 674.6216 -2121.6143 677.4707 -2119.7627 c686.8398 -2113.6748 699.9814 -2111.1953 703.1997 -2125.0059 c705.5093 -2134.916 693.7373 -2144.1709 688.2847 -2150.6211 c687.6221 -2151.4043 686.9731 -2152.2002 686.3301 -2153 C703.6851 -2153 L704.314 -2152.2285 704.9438 -2151.457 705.5688 -2150.6807 c711.6289 -2143.1563 716.9868 -2134.8027 716.1938 -2124.7324 c715.4644 -2115.4688 709.5269 -2106.8135 700.9043 -2103.2598 c692.8013 -2099.9199 684.1772 -2102.082 676.5054 -2105.4766 c667.498 -2109.4639 661.4688 -2117.4766 655.6772 -2125.1523 c654.0615 -2127.2939 652.5454 -2129.5146 651.1367 -2131.8027 C647.9863 -2117.834 641.374 -2105.6602 624.4502 -2104.4072 c618.4692 -2103.9639 611.5034 -2106.208 606.8286 -2109.9502 c601.9697 -2113.8398 598.9863 -2121.9287 601.541 -2127.8262 c602.8076 -2130.751 602.9927 -2134.2539 603.8037 -2137.3262 c604.0078 -2138.0996 604.2451 -2138.876 604.4902 -2139.6514 C604.0225 -2139.2949 603.5757 -2138.9268 603.1875 -2138.5273 c600.5942 -2135.8613 598.1973 -2133.0771 595.3271 -2130.6914 c589.1641 -2125.5664 582.8657 -2125.1523 575.3516 -2127.252 c569.604 -2128.8574 563.1167 -2131.2666 557.7739 -2133.9512 c551.6255 -2137.041 549.2661 -2143.0371 550.4395 -2149.5566 c550.6709 -2150.8438 551.2573 -2151.9795 552.064 -2153 Cf*u1 D404.7695 -1538.8018 m395.7866 -1533.0439 388.2881 -1525.498 380.8433 -1517.9248 c378.8901 -1515.9375 376.8809 -1514.0195 374.8467 -1512.1318 C374.584 -1510.3682 373.6201 -1508.7285 371.7852 -1507.7578 c369.8843 -1506.7529 368.0669 -1505.6123 366.3081 -1504.3789 C363.54 -1501.875 360.7935 -1499.3496 358.1387 -1496.7217 c354.688 -1493.3066 351.2085 -1490.1621 347.1602 -1487.459 C347.1577 -1487.457 347.1548 -1487.4551 347.1523 -1487.4531 C346.1841 -1486.5674 345.2104 -1485.6934 344.2251 -1484.8447 c342.7861 -1483.6064 341.3501 -1482.3652 339.916 -1481.1211 C340.2588 -1478.8506 339.4028 -1476.3955 336.8608 -1474.7734 c334.0957 -1473.0088 330.7681 -1471.6211 327.5703 -1470.082 C327.3398 -1469.9121 327.1108 -1469.7422 326.8818 -1469.5732 C324.3306 -1467.2539 321.8018 -1464.9111 319.3008 -1462.5371 C317.2808 -1460.3438 315.2373 -1458.1836 312.9531 -1456.3867 c312.4263 -1455.9727 311.8818 -1455.6553 311.3306 -1455.4111 C311.0801 -1455.1426 310.8203 -1454.8828 310.5718 -1454.6113 c309.5557 -1453.5029 308.5601 -1452.377 307.5791 -1451.2383 C308.3096 -1449.1396 309.021 -1447.0342 309.6895 -1444.9121 c313.3071 -1433.4287 315.4282 -1421.9033 317.0806 -1409.9971 c318.6006 -1399.0479 321.0435 -1388.3027 322.8887 -1377.4131 c324.519 -1367.7949 331.7002 -1360.2422 332.3193 -1350.3896 c332.5396 -1346.8848 329.1963 -1343.8438 325.8193 -1343.8896 c324.605 -1343.9063 323.4189 -1344.0303 322.3047 -1344.2881 C320.6641 -1344.1143 318.9204 -1344.5244 317.3423 -1345.793 c310.4307 -1351.3496 301.8726 -1354.6953 293.9316 -1358.4678 c285.3818 -1362.5283 278.4063 -1367.7402 271.0708 -1373.6387 c266.1733 -1377.5762 261.1807 -1381.377 256.168 -1385.1465 C253.1377 -1381.6777 250.0635 -1378.249 246.8965 -1374.9033 c242.9272 -1370.7109 240.1123 -1365.8672 236.9307 -1361.0645 c233.4448 -1355.8027 229.9341 -1350.5654 226.6592 -1345.1689 c225.8506 -1343.8359 224.8018 -1342.9795 223.6597 -1342.5127 C223.5005 -1334.252 210.6294 -1334.2842 210.666 -1342.6289 c210.7749 -1367.4922 214.7935 -1392.0918 216.124 -1416.8848 C210.8794 -1421.1543 205.5571 -1425.3281 200.5571 -1429.8828 c193.1431 -1436.6367 186.3975 -1443.999 178.6226 -1450.3662 c170.9839 -1456.6221 162.8618 -1462.2588 155.2393 -1468.5391 c147.0298 -1475.3027 139.3555 -1482.6836 131.0796 -1489.3711 c125.5151 -1493.8682 131.436 -1501.1729 137.3042 -1499.9844 C137.9976 -1502.3838 139.8921 -1504.3486 143 -1504.3486 C166.1475 -1504.3799 177.5679 -1505.498 v189.0308 -1506.6211 200.3105 -1510.0625 211.4482 -1512.8467 c216.3667 -1514.0762 221.2725 -1515.3359 226.1909 -1516.5234 C226.3784 -1517.207 226.5576 -1517.8906 226.7236 -1518.5752 c229.5562 -1530.2393 231.9766 -1541.9189 231.9824 -1553.9658 c231.9878 -1564.8271 232.6694 -1576.5439 236.354 -1586.8555 c237.7734 -1590.8281 238.7012 -1593.4863 239.1572 -1597.6826 c239.6411 -1602.1338 241.1133 -1605.6719 244.9253 -1608.2334 c248.1255 -1610.3848 251.7876 -1608.5742 253.8208 -1605.9014 c256.9028 -1601.8486 255.5161 -1597.3467 256.9985 -1592.9033 c258.7651 -1587.6104 261.0981 -1582.5332 262.8618 -1577.2627 c266.6001 -1566.0918 270.6167 -1555.0146 274.7114 -1543.9697 c276.4419 -1539.3008 278.1641 -1534.6436 279.8311 -1529.9688 C288.5527 -1532.6455 297.2988 -1534.8477 306.2754 -1536.6758 c316.5332 -1538.7637 326.8413 -1538.4512 337.0874 -1540.1113 c342.2534 -1540.9482 347.7549 -1543.0576 352.979 -1543.1533 c358.1841 -1543.248 363.2998 -1544.0039 368.4561 -1544.6553 c372.7217 -1545.1953 376.7661 -1545.0293 380.8945 -1546.3887 c384.5693 -1547.5986 387.8657 -1548.792 391.7871 -1548.9736 c393.2305 -1549.041 394.418 -1548.7041 395.3628 -1548.1104 C396.3008 -1548.7617 397.2432 -1549.4082 398.208 -1550.0264 c405.2891 -1554.5654 411.8018 -1543.3086 404.7695 -1538.8018 cf0 D313.8359 -1363.1699 m313.0825 -1364.7881 312.4395 -1366.4268 311.8843 -1368.0977 C311.1196 -1366.96 309.9951 -1366.1807 308.7324 -1365.7695 C310.4526 -1364.9258 312.1558 -1364.0664 313.8359 -1363.1699 Cf181.4302 -1492.9883 m180.4961 -1492.8574 179.5591 -1492.7432 178.6216 -1492.6318 C179.3799 -1491.8994 180.1157 -1491.1377 180.8345 -1490.3555 C181.2998 -1490.207 181.7671 -1490.0625 182.2412 -1489.9346 C181.7866 -1490.8408 181.4941 -1491.8467 181.4302 -1492.9883 Cf205.063 -1496.9941 m202.9146 -1496.2861 200.8115 -1495.5 198.7695 -1494.5625 C199.1724 -1494.2148 199.5645 -1493.8545 199.9414 -1493.4766 C203.5459 -1492.0732 207.1528 -1491.6152 210.1948 -1494.2949 c212.0078 -1495.8916 213.4585 -1497.877 214.8496 -1499.8887 C211.5635 -1499.0078 208.2959 -1498.0586 205.063 -1496.9941 cf218.4399 -1484.2676 m218.333 -1484.1738 218.2222 -1484.0957 218.1143 -1484.0049 C218.6963 -1482.8867 219.252 -1481.7607 219.792 -1480.6289 C220.5034 -1483.0156 221.2593 -1485.3906 221.7246 -1487.7383 C220.7139 -1486.502 219.6396 -1485.3242 218.4399 -1484.2676 cf245.4795 -1410.6318 m245.02 -1413.0742 244.6533 -1415.5166 244.2998 -1417.9541 C243.812 -1415.793 243.3271 -1413.627 242.8389 -1411.4531 C243.7803 -1410.7021 244.7319 -1409.9639 245.6797 -1409.2207 C245.6309 -1409.6953 245.5674 -1410.166 245.4795 -1410.6318 cf239.1211 -1398.0234 m238.3398 -1395.7012 237.5352 -1393.3926 236.7813 -1391.0742 C236.7539 -1390.709 236.7354 -1390.3428 236.7041 -1389.9766 c236.4863 -1387.4063 236.2314 -1384.8311 235.9189 -1382.2607 C239.3145 -1385.7207 242.603 -1389.2852 245.8057 -1392.9297 C243.5684 -1394.6152 241.3408 -1396.3145 239.1211 -1398.0234 Cf250.8667 -1523.2832 m250.855 -1523.3418 250.8438 -1523.4004 250.832 -1523.46 C250.6494 -1522.6377 250.3198 -1521.9248 249.8848 -1521.3164 C250.3271 -1521.4063 250.77 -1521.4893 251.2114 -1521.584 C251.0972 -1522.1504 250.98 -1522.7168 250.8667 -1523.2832 cf253.8398 -1508.9453 m253.5317 -1508.8799 253.2246 -1508.8115 252.9165 -1508.749 C253.2915 -1508.5537 253.6592 -1508.3389 254.0215 -1508.1104 C253.9614 -1508.3887 253.8994 -1508.666 253.8398 -1508.9453 Cf260.3901 -1439.8281 m257.5854 -1440.5986 255.0767 -1442.0664 252.833 -1443.9902 C252.7051 -1443.2129 252.5522 -1442.4434 252.4058 -1441.6719 C252.4492 -1441.5703 252.498 -1441.4717 252.5371 -1441.3682 c253.2666 -1439.4268 253.8667 -1437.4639 254.3765 -1435.4854 C255.8545 -1437.6934 258.6865 -1438.5313 261.2305 -1438.0078 C260.9478 -1438.6143 260.6675 -1439.2207 260.3901 -1439.8281 Cf266.8218 -1393.1426 m266.3203 -1394.0957 265.8447 -1395.0625 265.3818 -1396.0391 C265.0762 -1395.666 264.7754 -1395.29 264.4692 -1394.918 C265.2549 -1394.3281 266.0366 -1393.7324 266.8218 -1393.1426 Cf267.165 -1459.2559 m266.9536 -1459.9551 266.7324 -1460.6523 266.5166 -1461.3506 C265.8281 -1462.9961 265.1143 -1464.626 264.3711 -1466.2412 C265.481 -1461.9795 266.856 -1457.7764 268.4438 -1453.6738 C268.1045 -1455.5527 267.7192 -1457.4229 267.165 -1459.2559 cf286.4463 -1380.4688 m285.3594 -1382.3682 284.2153 -1384.2539 283.0635 -1386.1387 C282.3286 -1384.8223 281.124 -1383.8115 279.7314 -1383.2432 C279.9077 -1383.1045 280.0874 -1382.9707 280.2632 -1382.8311 c282.9819 -1380.6777 285.667 -1378.6963 288.4004 -1376.8467 C287.7617 -1378.0469 287.1362 -1379.2637 286.4463 -1380.4688 cf292.3013 -1455.4189 m292.2788 -1455.4033 292.2578 -1455.3867 292.2354 -1455.3711 c292.1299 -1455.2988 292.0229 -1455.2373 291.916 -1455.1729 C291.9326 -1454.2461 291.937 -1453.3262 291.9229 -1452.4111 C292.2686 -1452.8496 292.6055 -1453.2949 292.9531 -1453.7314 C292.7412 -1454.2959 292.5171 -1454.8555 292.3013 -1455.4189 Cf297.8843 -1438.9961 m297.5366 -1438.5264 297.1992 -1438.0498 296.854 -1437.5791 C297.2129 -1436.5947 297.5547 -1435.6055 297.873 -1434.6074 C298.729 -1432.7139 299.5986 -1430.8262 300.4751 -1428.9424 C299.6997 -1432.2949 298.8491 -1435.6416 297.8843 -1438.9961 Cf331.2251 -1509.6133 m331.0806 -1510.0127 330.9893 -1510.4141 330.9395 -1510.8164 C330.6201 -1511.1143 330.3403 -1511.4502 330.0898 -1511.8086 C328.1772 -1511.4238 326.2686 -1511.0439 324.377 -1510.6084 C325.1182 -1509.3047 325.519 -1507.9053 325.6338 -1506.4365 C327.6948 -1507.001 329.7373 -1507.6914 331.7681 -1508.4219 C331.5679 -1508.79 331.3823 -1509.1797 331.2251 -1509.6133 cf*UUu0 0.411658 0.493629 0 1 0.658824 0.498039 Xa3796.957 -103.564 m3793.75 -97.1182 3788.7402 -91.7378 3785.4385 -85.2852 c3783.4395 -81.3789 3779.8965 -78.0103 3777.0645 -74.6821 c3773.6758 -70.6978 3770.7832 -66.3965 3767.1914 -62.5693 c3760.7617 -55.7207 3754.2402 -49.29 3745.8633 -44.9888 c3742.4121 -43.2168 3739.4229 -40.4448 3736.2432 -38.2241 c3732.4551 -35.5791 3727.6172 -33.7031 3723.2324 -32.3296 c3704.209 -26.3691 3684.3008 -20.3101 3664.2412 -19.3384 c3654.6533 -18.8745 3645.1211 -17.8115 3635.5273 -18.376 c3625.9063 -18.9419 3616 -19.311 3607 -19.311 c3598 -19.311 3598 -32.311 3607 -32.311 c3613 -32.311 3620.0098 -32.5278 3626.584 -32.1021 c3634.166 -31.6108 3641.4004 -30.9834 3649.0039 -31.5444 c3655.7715 -32.0439 3662.542 -32.0464 3669.2871 -32.71 c3677.124 -33.481 3684.8887 -35.4937 3692.5996 -37.0356 c3699.4609 -38.4082 3706.4688 -40.6782 3713.1162 -42.9204 c3719.9395 -45.2222 3726.2559 -46.8809 3732.1621 -51.2236 c3734.5215 -52.959 3736.7334 -54.7935 3739.3057 -56.2139 c3741.5986 -57.481 3744.1641 -58.3853 3746.1406 -60.1489 c3751.834 -65.2295 3757.8838 -70.8105 3762.4805 -76.9214 c3766.4072 -82.1406 3771.7598 -87.0537 3774.7266 -92.8501 c3777.4512 -98.1729 3781.25 -102.7041 3784.4453 -107.7144 c3788.0977 -113.4424 3787.6641 -121.4795 3787.7012 -127.9995 c3787.7422 -135.0303 3785.3799 -142.8857 3783.8359 -149.7378 c3782.4141 -156.0503 3778.6455 -161.6108 3775.3535 -167.0767 c3771.4443 -173.5693 3767.0459 -179.4155 3762.1465 -185.1616 c3758.3096 -189.6611 3754.6826 -194.0488 3750.2402 -197.9814 c3744.9375 -202.6758 3741.1191 -208.3872 3734.9424 -212.1597 c3732.2529 -213.8027 3729.3848 -214.541 3726.7686 -216.3672 c3724.1953 -218.1636 3721.4209 -219.6792 3718.4785 -220.7627 c3715.251 -221.9517 3711.7227 -222.3887 3708.3984 -223.2598 c3704.2764 -224.3398 3700.4551 -225.2339 3696.1719 -225.1963 c3688.9658 -225.1328 3681.7979 -224.1733 3674.6777 -223.1582 c3666.3105 -221.9648 3657.9131 -221.2471 3649.583 -219.7563 c3642.2871 -218.4507 3635.9248 -217.4521 3629.2451 -214.0742 c3626.3906 -212.6309 3623.375 -211.5776 3620.6172 -209.9849 c3617.4707 -208.167 3615.2666 -204.9595 3612.1719 -203.2227 c3606.8711 -200.249 3602.8223 -194.8408 3598.8955 -190.2954 c3594.7285 -185.4727 3591.4297 -180.7319 3590.2109 -174.3789 c3588.8066 -167.062 3589.1543 -159.4648 3589.0566 -152.0571 c3588.9531 -144.3296 3588.7188 -137.6792 3591.9209 -130.4331 c3594.4082 -124.8032 3598.3574 -119.8525 3601.9199 -114.8848 c3603.5977 -112.5459 3604.6094 -109.6914 3605.9873 -107.1738 c3607.7803 -103.8975 3611.084 -102.4287 3614.1621 -100.6084 c3616.8574 -99.0156 3619.0947 -96.8809 3621.8643 -95.3833 c3624.5801 -93.9136 3627.6143 -93.0845 3630.582 -92.3003 c3637.292 -90.5273 3644.2803 -89.9565 3651.1396 -89.0542 c3665.5293 -87.1611 3680.5391 -85.4443 3694.6543 -89.7983 c3701.1934 -91.8149 3707.0811 -95.8198 3713.1367 -98.9141 c3715.9141 -100.332 3717.8828 -102.5068 3719.9609 -104.7734 c3722.4111 -107.4463 3725.1318 -109.6675 3727.9355 -111.9512 c3732.417 -115.6006 3736.6885 -119.6108 3739.626 -124.625 c3743.2832 -130.8682 3743.3262 -139.0454 3742.25 -145.9531 c3741.1875 -152.7637 3740 -158.6846 3736.4521 -164.6685 c3732.8037 -170.8223 3727.6162 -176.0093 3722.2783 -180.7017 c3712.0293 -189.7114 3696.0654 -191.4683 3683.0527 -190.1992 c3677.3955 -189.6475 3671.3408 -188.0664 3666.2031 -185.6533 c3660.0313 -182.7549 3656.3535 -177.0811 3653.4053 -171.166 c3647.9883 -160.2983 3652.9463 -147.6704 3662.4648 -140.8159 c3667.3799 -137.2764 3674.0967 -136.3281 3679.9375 -135.3223 c3685.2158 -134.4126 3690.6006 -135.4497 3695.8203 -136.293 c3697.6309 -136.5854 3699.5059 -136.9443 3701.1484 -137.7773 C3701.1885 -137.9028 3701.2363 -138.0479 3701.2998 -138.2344 c3701.5742 -139.0347 3701.2012 -140.6147 3701.1426 -141.4395 c3700.9766 -143.8042 3700.9229 -146.3481 3700.2832 -148.6255 c3699.9648 -149.7627 3699.2559 -150.855 3698.709 -151.8877 c3698.6875 -151.9277 3698.6768 -151.9629 3698.6738 -151.9941 C3698.5498 -151.9937 3698.4102 -151.9946 3698.2451 -151.9995 C3697.6963 -151.7314 3697.252 -151.75 3696.9102 -152.0542 C3696.6689 -152.019 3696.4805 -151.9839 3696.3184 -151.9497 C3695.623 -148.6055 3691.4082 -146.8271 3688.3789 -147.6606 c3684.6631 -148.6826 3683.3115 -152.1558 3683.8398 -155.6563 c3685.3896 -165.9253 3702.4219 -168.3145 3708.3027 -160.7573 c3711.8682 -156.1753 3713.5586 -150.7886 3713.8047 -145.0405 c3714.0439 -139.4399 3714.9609 -134.2188 3711.2266 -129.4785 c3708.3945 -125.8833 3703.5811 -124.5488 3699.2754 -123.7573 c3694.0273 -122.7925 3688.3809 -121.8286 3683.0508 -122.0142 c3670.2578 -122.4595 3657.127 -126.5693 3648.3789 -136.1729 c3640.0059 -145.3657 3635.9111 -158.3843 3639.2285 -170.5269 c3642.6309 -182.9834 3651.8818 -194.1255 3663.9307 -198.7559 c3676.4707 -203.5742 3690.0664 -204.5283 3703.2754 -202.52 c3709.9258 -201.5093 3716.0977 -198.9053 3722.1387 -196.0415 c3728.5791 -192.9883 3733.6777 -188.2241 3738.5527 -183.0713 c3757.0723 -163.4941 3763.6221 -129.5938 3743.6846 -108.7148 c3739.5166 -104.3501 3734.3926 -101.0405 3730.2031 -96.7144 c3725.0908 -91.4355 3720.2363 -88.0679 3713.7891 -84.5474 c3707.5654 -81.1484 3701.335 -78.2354 3694.54 -76.1694 c3686.9834 -73.8726 3678.6758 -74.1963 3670.873 -74.2251 c3657.4707 -74.2744 3643.3896 -76.4619 3630.2432 -79.0542 c3624.0605 -80.2734 3618.0293 -82.4434 3612.6191 -85.6875 c3609.9453 -87.291 3607.6738 -89.3662 3604.9434 -90.9307 c3601.6865 -92.7964 3598.7373 -95.0308 3596.4941 -98.0669 c3592.8721 -102.9712 3590.4297 -108.6563 3586.8623 -113.6699 c3583.001 -119.0981 3579.875 -124.7954 3577.8838 -131.1733 c3575.6982 -138.1758 3575.8184 -144.7979 3576.0566 -152.0571 c3576.3223 -160.2021 3576.2275 -168.1567 3577.457 -176.2466 c3579.4141 -189.1323 3588.4619 -198.4321 3597.0469 -207.584 c3601.2188 -212.0317 3606.5391 -215.7178 3611.3848 -219.4067 c3613.9199 -221.3369 3616.6895 -222.6523 3619.6152 -223.8608 c3623.3535 -225.4053 3626.8262 -227.5166 3630.6123 -228.9731 c3637.2852 -231.5405 3644.8779 -232.1504 3651.918 -233.2695 c3660.041 -234.561 3668.2363 -235.2969 3676.3809 -236.418 c3683.6045 -237.4116 3690.8174 -238.1494 3698.1152 -238.2134 c3705.4834 -238.2783 3713.2559 -235.605 3720.3379 -233.7979 c3726.6475 -232.1875 3731.2676 -227.8062 3737.1094 -225.479 c3743.8496 -222.7939 3749.3789 -217.9224 3754.2813 -212.6865 c3763.0371 -203.3345 3772.1318 -194.4824 3779.7158 -184.0557 c3788.0322 -172.6201 3794.8906 -160.7314 3797.6631 -146.8101 c3800.3945 -133.0986 3803.5293 -116.7725 3796.957 -103.564 cf*u1 D3680.3516 -619.3833 m3674.8418 -616.6265 3669.1406 -615.8481 3663.9102 -612.4648 c3655.8125 -607.2266 3646.998 -605.2642 3638.2129 -601.4946 c3630.4463 -598.1621 3623.3096 -593.4834 3615.3574 -590.5981 c3611.4668 -589.1865 3607.4277 -587.6211 3603.6738 -585.8506 c3601.8057 -584.9697 3600.1543 -583.877 3598.2227 -583.1055 c3596.7432 -582.5146 3594.1318 -582.7065 3592.8965 -581.7275 c3590.9785 -580.2085 3588.8223 -579.9404 3586.9004 -580.4414 C3585.957 -576.5195 3584.4775 -572.7905 3582.1357 -569.3633 c3580.2188 -566.5576 3578.2676 -564.2051 3576.9805 -561.0029 c3575.6475 -557.6885 3574.4551 -554.3413 3572.8809 -551.1284 c3569.4854 -544.2002 3564.709 -538.0562 3561.4756 -530.9619 c3560.0684 -527.8745 3559.2832 -524.3198 3558.3916 -521.0576 c3558.042 -519.7773 3558.4775 -518.252 3558.624 -516.9746 c3558.8857 -514.6992 3558.4746 -512.4478 3557.9629 -510.2422 c3556.9492 -505.8735 3552.0342 -504.6343 3548.4141 -506.3574 c3541.9355 -509.4424 3540.7705 -517.6533 3538.0752 -523.5181 c3535.9697 -528.0996 3533.0381 -532.3091 3530.6748 -536.7671 c3528.1572 -541.5171 3525.7197 -546.3032 3523.2402 -551.0811 c3520.7734 -555.834 3518.6426 -560.7607 3516.3877 -565.6152 c3514.0166 -570.7192 3511.0078 -575.2173 3507.7881 -579.8193 c3504.0547 -585.1538 3499.9346 -590.7876 3497.6758 -597 C3472.3955 -597 L3463.2793 -597 3454.4004 -599.1133 3445.3125 -599.2788 c3436 -599.4482 3427.21 -602.7065 3417.8584 -602.7065 c3413.1006 -602.7065 3408.8086 -603.3604 3404.1318 -603.8477 c3400.3076 -604.2461 3397.749 -602.7344 3393.9863 -604.7344 c3392.1729 -605.6982 3390.5059 -608.2188 3390.7676 -610.3462 c3392.2783 -622.6279 3406.251 -631.4873 3414.7754 -639.0625 c3419.6113 -643.3604 3424.8496 -647.1182 3429.4336 -651.7036 c3434.6504 -656.9209 3439.8613 -662.1431 3445.0859 -667.3525 c3449.2246 -671.48 3453.6094 -674.2749 3458.748 -676.9512 c3460.6016 -677.9165 3462.4727 -679.0464 3464.0869 -680.375 c3464.4414 -680.667 3464.6289 -680.7549 3464.7188 -680.7749 C3464.624 -680.8354 3464.4678 -681.0986 3464.4805 -682.0586 c3464.5078 -684.0112 3464.1807 -685.9951 3464.0244 -687.939 c3463.5215 -694.1875 3461.8047 -700.2061 3460.6416 -706.3774 c3459.1523 -714.2793 3458.585 -721.8872 3458.1152 -729.8838 c3457.9336 -732.9805 3456.5166 -736.0537 3456.1133 -739.1777 c3455.6836 -742.5142 3455.5586 -745.7539 3454.9551 -749.0928 c3453.5664 -756.7769 3452.4355 -764.4653 3451.4795 -772.208 c3450.958 -776.4258 3450.1211 -781.3496 3452.2822 -785.2119 c3454.7305 -789.5864 3460.0664 -789.1982 3463.9727 -787.5278 c3471.123 -784.4717 3477.2988 -778.0508 3482.8945 -772.8101 c3490.4219 -765.7617 3498.709 -759.7285 3506.335 -752.7646 c3511.4316 -748.1104 3515.7578 -742.7559 3521.0039 -738.2588 c3526.0596 -733.9243 3532.1895 -731.4688 3537.0049 -726.8774 c3538.9814 -724.9932 3540.3574 -726.4932 3542.208 -727.604 c3545.5625 -729.6167 3549.1973 -731.1587 3552.7949 -732.6714 c3556.0391 -734.0356 3559.2852 -735.4126 3562.5508 -736.7236 c3565.5391 -737.9233 3568.0918 -740.1309 3571.0957 -741.3916 c3576.8574 -743.811 3583.2998 -743.2749 3588.9736 -746.0283 c3595.0137 -748.9595 3601.9707 -750.6953 3607.5791 -754.2959 c3613.002 -757.7773 3617.8691 -760.8208 3623.8311 -763.4199 c3626.8018 -764.7144 3629.3965 -766.5703 3632.4707 -767.6089 c3635.79 -768.729 3637.9443 -771.4878 3641.4785 -772.1846 c3644.6367 -772.8066 3646.9355 -771.7046 3648.8193 -769.1973 c3653.1357 -763.4551 3651.1289 -752.1582 3649.1895 -745.8862 c3645.998 -735.5659 3640.8516 -725.2754 3635.8428 -715.7358 c3633.7178 -711.689 3630.8496 -707.4561 3629.541 -703.0747 c3628.2012 -698.5869 3628.0137 -693.8218 3626.4541 -689.4058 c3626.1445 -688.5303 3624.5313 -686.0068 3624.5703 -685.373 c3624.5723 -685.3364 3624.5762 -685.3008 3624.5781 -685.2642 C3631.6104 -679.8867 3639.4111 -675.7012 3646.083 -669.8398 c3653.4668 -663.353 3659.7588 -656.1475 3668.0352 -650.7749 c3674.8682 -646.3384 3682.4268 -641.4922 3687.0645 -634.6279 c3691.2305 -628.4604 3685.6797 -622.0493 3680.3516 -619.3833 cf0 D3654.9258 -643.8755 m3647.8145 -648.7251 3642.0684 -656.0986 3635.5811 -661.7979 c3630.7285 -666.0615 3625.002 -669.3965 3619.585 -673.0645 C3619.2725 -672.9375 3618.9648 -672.8052 3618.625 -672.7119 c3612.0527 -670.9097 3608.5547 -678.8311 3611.7861 -683.064 C3611.7461 -683.9927 3611.5996 -684.916 3611.541 -685.8433 c3611.2969 -689.708 3614.7344 -693.3389 3614.9727 -697.2822 c3615.4297 -704.8555 3619.082 -712.3799 3622.7236 -718.8657 c3627.3818 -727.1621 3631.2432 -735.8555 3634.8623 -744.6475 c3636.3262 -748.2061 3637.6992 -751.7422 3637.8516 -755.6216 c3637.8525 -755.6382 3637.8545 -755.6572 3637.8555 -755.6738 C3637.7422 -755.6284 3637.6328 -755.5835 3637.5176 -755.5376 c3634.5723 -754.3589 3631.7988 -752.8076 3628.8643 -751.5283 c3623.0391 -748.9893 3618.3457 -745.771 3613.0479 -742.3691 c3607.8311 -739.02 3601.1816 -737.3955 3595.5352 -734.8032 c3589.0781 -731.8384 3582.6221 -731.5112 3575.9609 -729.4478 c3573.4199 -728.6606 3571.0762 -726.5176 3568.7041 -725.3027 c3565.748 -723.7881 3562.4688 -722.7056 3559.3965 -721.4463 c3553.1396 -718.8833 3547.0322 -713.8618 3540.3096 -713.0352 c3534.4063 -712.3091 3529.8857 -715.9395 3525.7646 -719.5596 c3523.6475 -721.4194 3520.4688 -722.4976 3518.1143 -724.1748 c3515.0869 -726.3315 3512.1914 -728.6807 3509.4238 -731.1582 c3504.1475 -735.8794 3499.6377 -741.3633 3494.3438 -746.1035 c3489.4463 -750.4878 3483.5254 -753.9946 3478.8965 -758.5986 c3474.2959 -763.1743 3469.5693 -767.7817 3464.4434 -771.7939 C3464.9023 -767.7505 3465.5811 -763.7012 3466.2422 -759.7646 c3467.4043 -752.8501 3468.6787 -746.1646 3469.1133 -739.1777 c3469.3008 -736.1738 3470.7617 -732.9824 3471.1152 -729.8838 c3471.5967 -725.6729 3471.2295 -721.4463 3471.8467 -717.2246 c3473.6436 -704.9316 3477.6318 -693.1226 3477.4609 -680.5884 c3477.3008 -668.9155 3464.3867 -667.0195 3457.1934 -660.9136 c3447.7686 -652.9121 3440.0703 -643.0615 3430.4521 -635.2373 c3425.083 -630.8696 3419.8125 -626.3594 3414.6436 -621.7642 c3412.6445 -619.9863 3410.752 -618.084 3408.8652 -616.1846 C3412.9648 -615.4648 3417.1074 -615.7021 3421.29 -615.7021 c3429.9775 -615.7021 3438.2305 -612.4077 3446.9141 -612.2495 c3455.46 -612.0942 3463.8076 -610 3472.3955 -610 C3498.6553 -610 L3502.3555 -612.1675 3508.6396 -610.3599 3509.0068 -604.6265 c3509.4473 -597.7524 3516.3594 -590.1733 3520.1045 -584.8208 c3525.7324 -576.7793 3529.3633 -568.0356 3533.6533 -559.2573 c3537.834 -550.7021 3542.3418 -542.1548 3547.2217 -533.9692 c3547.5664 -533.3906 3547.8809 -532.8032 3548.1826 -532.2124 C3548.2676 -532.4741 3548.3438 -532.7383 3548.4297 -532.9995 c3550.6563 -539.7563 3554.3984 -546.1396 3558.1582 -552.1426 c3561.7998 -557.9575 3563.9434 -563.9502 3566.8896 -570.105 c3569.7227 -576.0229 3574.1289 -579.375 3574.9365 -586.3237 c3575.5664 -591.7383 3581.4189 -593.6274 3585.0703 -591.9141 C3587.3252 -593.4414 3589.6328 -594.3789 3592.4258 -595.0381 c3596.1162 -595.9092 3599.4736 -598.2354 3603.0762 -599.5918 c3610.2627 -602.2964 3617.126 -605.5078 3623.9121 -609.0947 c3631.6309 -613.1758 3639.9805 -616.4282 3648.3418 -618.9014 c3655.084 -620.896 3659.9912 -626.6421 3666.8848 -628.4028 c3669.1035 -628.9697 3671.2861 -629.6445 3673.4316 -630.4463 c3673.459 -630.4565 3673.4932 -630.4707 3673.5215 -630.4814 C3668.1084 -635.8721 3661.1914 -639.6035 3654.9258 -643.8755 cf*U*u1 D3424.083 -1830.4131 m3416.0635 -1824.8389 3404.7617 -1826.5107 3395.5518 -1826.7393 c3392.666 -1826.8105 3389.8047 -1827.207 3386.9609 -1827.6777 c3383.7627 -1828.207 3381.1494 -1829.9355 3377.8213 -1830.1104 c3374.6406 -1830.2773 3371.709 -1830.6836 3368.8203 -1832.1426 c3366.2012 -1833.4658 3363.8281 -1835.5195 3361.1152 -1836.5273 c3355.7676 -1838.5146 3352.1641 -1842.8965 3348.498 -1847.0117 c3343.8594 -1852.2188 3340.6055 -1857.2412 3337.8027 -1863.6436 c3337.6797 -1863.9258 3337.5576 -1864.2129 3337.4346 -1864.4961 C3335.3867 -1853.6885 3331.5068 -1843.3828 3324.1602 -1834.1055 c3320.3242 -1829.2598 3315.7783 -1825.0557 3311.9346 -1820.1914 c3307.7871 -1814.9424 3301.3242 -1815.1738 3295.4902 -1813.3994 c3284.3223 -1810.002 3270.1572 -1809.9902 3258.9414 -1813.0459 c3229.8887 -1820.9629 3250.6377 -1856.8535 3263.3311 -1870.1729 c3267.6768 -1874.7324 3272.8369 -1878.8535 3277.7607 -1882.7793 c3280.5615 -1885.0127 3283.1504 -1886.9951 3286.46 -1888.4082 c3288.1367 -1889.125 3289.6377 -1889.6055 3291.457 -1889.8145 c3290.7227 -1889.7305 3293.5791 -1892.0527 3293.5527 -1892.0293 c3297.8145 -1895.8145 3301.8672 -1899.0674 3307.0742 -1901.5381 c3307.6787 -1901.8252 3308.3135 -1902.0791 3308.9688 -1902.3105 C3307.9863 -1902.4014 3307.0703 -1902.5146 3306.2617 -1902.6563 c3298.8975 -1903.9453 3292.0625 -1906.6152 3285.0664 -1909.1289 c3278.6152 -1911.4473 3272.1699 -1913.1348 3265.8086 -1915.791 c3259.084 -1918.5977 3252.502 -1921.959 3246.0732 -1925.3906 c3234.5938 -1931.5176 3220.9316 -1935.9609 3213.1182 -1946.9727 c3205.9287 -1957.1045 3209.7266 -1970.3145 3217.582 -1978.6582 c3226.7813 -1988.4277 3242.5566 -1990.0859 3255.1631 -1989.6045 c3261.8359 -1989.3506 3268.8164 -1988.6162 3275.1133 -1986.332 c3281.9082 -1983.8682 3287.6152 -1979.6133 3293.835 -1976.0918 c3296.8154 -1974.4043 3299.9063 -1972.9121 3302.9004 -1971.249 c3305.9102 -1969.5781 3308.3594 -1967.0547 3310.873 -1964.7324 c3316.1719 -1959.8379 3320.9258 -1954.4922 3325.2109 -1948.6943 c3327.0762 -1946.1699 3328.7656 -1943.5908 3330.2793 -1940.9531 C3330.543 -1942.7842 3330.8281 -1944.5 3331.1387 -1946.0117 c3333.4932 -1957.4668 3334.6113 -1970.1895 3341.2266 -1980.1895 c3346.9141 -1988.7881 3359.5898 -1993.6377 3369.2813 -1995.4941 c3379.0645 -1997.3691 3391.7988 -1995.7158 3400.0859 -1989.8555 c3407.4258 -1984.666 3408.8545 -1973.1172 3407.5439 -1964.8809 c3405.6914 -1953.2383 3397.2637 -1943.9873 3390.5264 -1934.7969 c3383.4844 -1925.1895 3376.2705 -1916.4219 3365.0879 -1911.4512 c3361.7715 -1909.9785 3358.4238 -1908.3213 3355.0449 -1906.8193 C3359.2871 -1905.8223 3363.4258 -1904.4482 3367.5381 -1902.9561 c3380.7119 -1898.1777 3393.2012 -1891.917 3405.3184 -1884.918 c3415.6777 -1878.9355 3426.9951 -1874.1035 3431.8535 -1862.209 c3436.0801 -1851.8662 3433.7354 -1837.1221 3424.083 -1830.4131 cf0 D3323.4629 -1925.332 m3321.9492 -1930.4785 3318.7129 -1934.9453 3315.8574 -1939.416 c3309.5625 -1949.2744 3300.5225 -1957.9258 3290.207 -1963.3008 c3285.3555 -1965.8291 3280.9004 -1968.9561 3276.123 -1971.6133 c3271.0645 -1974.4277 3265.9102 -1975.6289 3260.1973 -1976.2344 c3250.0186 -1977.3125 3236.2627 -1977.5996 3227.9102 -1970.5352 c3220.9219 -1964.625 3220.5469 -1955.5811 3227.9346 -1949.9307 c3232.4063 -1946.5107 3237.6924 -1944.1172 3242.7295 -1941.6729 c3248.0898 -1939.0713 3253.29 -1936.1777 3258.624 -1933.5283 c3263.6777 -1931.0186 3268.752 -1928.4863 3274.0137 -1926.4258 c3279.9414 -1924.1045 3286.0771 -1922.6426 3292.041 -1920.4043 c3297.3574 -1918.4092 3302.5752 -1916.7285 3308.1299 -1915.4697 c3313.4824 -1914.2578 3320.376 -1915.0918 3325.3438 -1915.1641 C3325.0576 -1918.5762 3324.4746 -1921.8926 3323.4629 -1925.332 cf3326.7549 -1894.958 m3320.7461 -1892.0195 3313.9199 -1890.8867 3308.1074 -1887.2998 c3304.3711 -1884.9941 3301.3574 -1881.5508 3297.8574 -1878.8789 c3295.373 -1876.9814 3292.3604 -1876.9668 3289.5898 -1875.6104 c3287.1563 -1874.418 3284.8428 -1871.9043 3282.7676 -1870.1758 c3278.8828 -1866.9385 3274.9297 -1863.5059 3271.4424 -1859.8457 c3267.7275 -1855.9492 3264.8438 -1850.8379 3261.9785 -1846.2969 c3259.5098 -1842.3848 3258.1611 -1838.4727 3257.3232 -1833.9492 c3256.2871 -1828.3535 3258.8242 -1826.5557 3263.7217 -1825.2207 c3272.8613 -1822.7305 3284.5029 -1823.6436 3293.4785 -1826.374 c3295.6211 -1827.0264 3297.8301 -1827.3262 3300.0234 -1827.8291 c3302.4902 -1828.3945 3302.7793 -1829.7686 3304.5918 -1832.0566 c3308.1172 -1836.5088 3312.6543 -1840.0732 3315.9912 -1844.6699 c3326.4805 -1859.1172 3326.8574 -1877.5752 3326.7549 -1894.958 Cf3358.5537 -1922.7402 m3366.9209 -1925.5283 3373.4834 -1933.0322 3378.3496 -1940.0313 c3383.4072 -1947.3066 3389.1992 -1953.9541 3393.2314 -1961.9053 c3395.3789 -1966.1387 3396.6738 -1976.8975 3391.7432 -1979.7813 c3385.0771 -1983.6797 3375.5381 -1984.1367 3368.332 -1981.8672 c3360.7012 -1979.4648 3353.0117 -1976.5059 3349.7715 -1968.7197 c3346.1289 -1959.9629 3345.1963 -1949.9648 3343.3008 -1940.7402 c3341.5313 -1932.127 3340.9707 -1923.8926 3340.873 -1915.0762 C3342.4521 -1916.1465 3344.3838 -1916.3867 3346.1533 -1917.1426 c3350.3926 -1918.9531 3354.1563 -1921.2734 3358.5537 -1922.7402 cf3417.7441 -1860.9902 m3411.9746 -1868.3018 3402.3135 -1871.6855 3394.4688 -1876.1826 c3384.7383 -1881.7598 3374.5752 -1886.4766 3364.082 -1890.4209 c3359.4902 -1892.1465 3354.7725 -1893.6514 3349.9736 -1894.6826 c3347.0645 -1895.3076 3344.6953 -1894.8301 3342.2891 -1894.0088 C3342.0254 -1891.1348 3342.9639 -1888.2578 3343.7168 -1885.3965 c3345.0615 -1880.29 3347.0137 -1875.2695 3348.9668 -1870.3682 c3350.8945 -1865.5322 3353.1709 -1861.2188 3356.6514 -1857.3486 c3359.2891 -1854.415 3361.9492 -1850.0371 3365.8223 -1848.5977 c3369.9326 -1847.0713 3373.2676 -1843.1875 3377.8213 -1843.1104 c3382.9463 -1843.0234 3387.1836 -1840.543 3392.1211 -1839.958 c3396.5752 -1839.4297 3401.1387 -1839.7061 3405.6172 -1839.5732 c3408.8916 -1839.4766 3412.0977 -1839.3779 3415.2637 -1840.3076 c3423.1299 -1842.6201 3421.5176 -1856.2109 3417.7441 -1860.9902 cf*U*u1 D215.3716 -790.9463 m214.4854 -777.7314 211.5923 -764.6201 206.4961 -752.3906 c201.2314 -739.7578 193.4873 -729.6567 184.1763 -719.7588 c179.1567 -714.4229 172.6089 -711.7676 166.1646 -708.5454 c160.2329 -705.5801 154.2046 -702.7236 147.4409 -702.2246 c143.9131 -701.9644 140.0415 -701.3457 136.9951 -699.6807 c129.6362 -695.6582 123.0767 -706.8843 130.4336 -710.9053 c135.9512 -713.9209 141.3516 -714.0996 147.3945 -715.3369 c154.4009 -716.7715 160.1152 -720.0269 166.4668 -723.2026 c178.2759 -729.1074 186.8789 -741.4575 192.6567 -753.0981 c198.4497 -764.7686 201.3457 -778.0249 202.3716 -790.9463 c202.9111 -797.7402 202.7456 -804.5884 203.0137 -811.3965 c203.1523 -814.916 203.2441 -818.4307 203.1943 -821.9531 c203.1333 -826.314 202.0244 -829.8652 200.6563 -833.9697 c198.3193 -840.9805 196.5093 -847.4092 191.8262 -853.2568 c187.2393 -858.9854 181.8242 -865.4546 175.6636 -869.4854 c163.5522 -877.4092 149.4697 -883.8647 134.8584 -883.8584 c119.9839 -883.8521 104.5786 -880.9209 92.0562 -872.5732 c80.8848 -865.1265 70.2139 -854.6494 67.916 -840.8335 c66.8633 -834.501 63.5049 -828.9619 63.5996 -822.4146 c63.7036 -815.2051 64.4375 -807.6738 65.7324 -800.5957 c66.3223 -797.3716 66.9639 -794.1567 67.604 -790.9424 c68.2139 -787.8818 70.0508 -784.853 71.2593 -781.9761 c73.9419 -775.5918 75.7686 -768.3672 79.1753 -762.3896 c82.1919 -757.0962 85.7944 -751.7456 90.1611 -747.4854 c95.248 -742.5225 101.9648 -741.1177 108.8286 -741.3008 c114.6523 -741.4556 119.8438 -741.9351 124.9902 -744.8677 c130.5215 -748.02 135.064 -753.3975 139.2666 -758.0796 c143.9414 -763.2876 146.0459 -769.0024 148.3882 -775.4463 C148.3589 -775.4136 148.334 -775.3799 148.3042 -775.3472 c144.0674 -770.7197 138.8823 -766.4834 133.1592 -763.8589 c122.7456 -759.083 109.3125 -755.9404 98.3032 -760.7246 c86.8765 -765.6899 81.5249 -778.355 78.8662 -789.7227 c75.7329 -803.1191 77.9795 -815.2544 87.0996 -825.6245 c95.1484 -834.7764 107.377 -839.9321 119.2427 -841.5381 c131.2739 -843.166 141.6953 -840.8291 150.3535 -831.9336 c168.6157 -813.1719 167.2993 -781.4175 156.1396 -759.5527 c153.1836 -753.7603 148.5313 -748.7803 144.0244 -744.1704 c139.5981 -739.6436 134.9355 -735.3169 129.2622 -732.4033 c118.1631 -726.7026 102.2139 -726.4883 90.9312 -731.5801 c85.3633 -734.0928 80.7676 -738.0303 76.9126 -742.7275 c72.7412 -747.811 68.4814 -753.8525 65.9316 -759.9297 c63.3716 -766.0317 61.2446 -772.3721 58.7236 -778.52 c57.5 -781.5054 55.7036 -784.3101 55.0688 -787.4868 c54.313 -791.2676 53.5786 -795.0522 52.8848 -798.8447 c51.6733 -805.4663 51.3125 -812.1655 50.7817 -818.8755 c50.1875 -826.3809 51.9111 -832.7485 54.1831 -839.8208 c56.1577 -845.9688 56.9663 -851.937 60.0244 -857.7544 c63.2837 -863.9541 68.4404 -869.0562 72.9595 -874.3252 c77.4189 -879.5254 84.4116 -883.4395 90.397 -886.666 c97.313 -890.3945 104.7705 -893.3184 112.54 -894.585 c126.79 -896.9082 141.4761 -898.3364 155.4609 -893.8828 c162.168 -891.7471 168.4946 -887.9873 174.7773 -884.8521 c181.6343 -881.4302 187.1274 -877.335 192.4736 -871.8789 c197.4668 -866.7832 202.167 -861.416 206.2114 -855.5298 c210.4258 -849.3965 211.9985 -841.0049 214.3359 -833.9941 c216.5762 -827.2725 216.3164 -820.208 216.0815 -813.1885 c215.8335 -805.7803 215.8677 -798.3418 215.3716 -790.9463 cf0 D137.7271 -825.8667 m128.9604 -832.2715 115.394 -828.7354 106.5205 -824.249 c101.3296 -821.6245 96.8848 -817.7412 93.5708 -812.9707 c89.8784 -807.6563 90.0132 -800.8809 91.0815 -794.7441 c92.4697 -786.771 95.9385 -775.0742 104.5571 -772.1875 c112.8535 -769.4087 123.4214 -773.0591 130.603 -777.1245 c132.8003 -778.3682 134.1328 -780.3999 136.1528 -781.8271 c137.7417 -782.9502 139.6245 -784.417 139.7974 -786.5098 c140.1763 -791.0991 140.7246 -797.0347 137.7197 -800.8252 c135.1812 -804.0278 131.7598 -805.2119 127.8032 -805.1665 c126.5757 -805.1523 125.4048 -805.0601 124.207 -804.8057 c123.0859 -804.5669 123.0073 -804.1748 123.0557 -804.8125 c122.4248 -796.5078 109.4199 -796.4468 110.0557 -804.8125 c110.8906 -815.7993 121.0898 -818.5132 130.5391 -818.1172 c136.4482 -817.8696 141.7524 -815.0088 145.9795 -811.0332 c147.498 -809.6055 148.7036 -808.0576 149.6606 -806.416 C147.7671 -814.0093 143.9302 -821.3345 137.7271 -825.8667 cf*UU*u1 D0.300267 0.756374 0 0 0.941176 0.247059 1 Xa3480.3623 -920.5703 m3477.3457 -914.8359 3473.7969 -911.231 3467.2949 -909.8633 c3460.5771 -908.4502 3453.0479 -909.3687 3446.2246 -909.3687 c3443.0332 -909.3687 3438.5313 -908.5469 3435.5 -909.6006 c3432.6475 -910.5928 3429.8691 -911.7573 3427.1064 -912.9771 c3420.5322 -915.8799 3414.4814 -919.5767 3408.7695 -923.9102 c3398.6768 -931.5654 3388.8359 -940.2246 3382.1982 -951.1636 c3379.8545 -955.0264 3378.1348 -959.1602 3376.7246 -963.4199 C3376.084 -964.1943 3375.4551 -964.9653 3374.8438 -965.7349 c3372.1611 -969.1133 3369.4443 -972.4648 3366.7383 -975.8252 C3361.0547 -970.729 3354.4883 -966.5957 3348.1416 -962.1885 c3344.1025 -959.3838 3339.5967 -956.6001 3336.8379 -952.4907 c3332.6357 -946.231 3327.4199 -943.1221 3320.3594 -940.5723 c3317.2988 -939.4673 3313.9824 -939.0732 3310.7598 -938.8047 c3308.0664 -938.5801 3305.2949 -937.4048 3302.6104 -936.9321 c3296.4131 -935.8408 3290.2002 -935.9146 3284.0752 -937.3945 c3271.5918 -940.4116 3264.2676 -951.8843 3259.4805 -962.9546 c3256.4326 -970.001 3256.5059 -976.3188 3256.5059 -983.8794 c3256.5059 -991.8506 3256.3975 -999.8296 3256.8174 -1007.793 c3257.5488 -1021.6807 3261.915 -1032.8989 3270.4795 -1043.7856 c3278.2324 -1053.6406 3287.9648 -1061.8999 3295.4707 -1071.8984 c3299.4229 -1077.1631 3302.8564 -1082.7627 3306.9463 -1087.9414 c3311.9551 -1094.2842 3318.0771 -1099.7793 3323.7813 -1105.4834 c3328.6807 -1110.3828 3334.3389 -1114.6543 3338.7188 -1119.9551 c3342.043 -1123.9775 3346.165 -1130.7852 3351.5371 -1132.0439 c3353.1445 -1132.4209 3354.9766 -1132.1807 3356.4902 -1131.4004 C3358.9092 -1132.7988 3362.0537 -1132.8301 3364.1289 -1130.373 c3373.8984 -1118.8008 3385.3271 -1108.7813 3395.3643 -1097.4541 c3399.9141 -1092.3193 3404.1396 -1087.084 3408.1348 -1081.501 c3412.2549 -1075.7427 3417.8125 -1071.645 3421.9941 -1065.9927 c3425.9229 -1060.6826 3429.9746 -1056.0576 3434.8721 -1051.6123 c3440.3184 -1046.6689 3445.7041 -1041.75 3450.2197 -1035.9141 c3454.29 -1030.6548 3459.5117 -1026.314 3463.543 -1020.9282 c3467.7793 -1015.2705 3470.7041 -1008.5225 3474.1133 -1002.3472 c3477.3633 -996.4614 3480.3467 -990.4722 3482.7139 -984.1724 c3485.2725 -977.3608 3485.6035 -970.4985 3485.7988 -963.3193 c3486.2012 -948.6143 3487.4248 -933.9956 3480.3623 -920.5703 cf0 D3338.2969 -981.7866 m3338.8213 -982.3936 3339.3398 -983.0054 3339.8447 -983.6274 C3337.7432 -984.6875 3336.1553 -986.7485 3336.2705 -989.3364 c3336.3506 -991.1353 3336.6563 -992.9121 3337.1357 -994.6333 C3335.4219 -995.8022 3334.1709 -997.6416 3334.1719 -999.8315 c3334.1719 -1000.126 3334.1729 -1000.4224 3334.1738 -1000.7173 C3332.9268 -1001.873 3331.7422 -1003.1299 3330.6406 -1004.4297 C3327.793 -1003.2256 3324.2334 -1004.0518 3322.4648 -1007.0464 c3321.6777 -1008.3794 3321.0664 -1009.7808 3320.5879 -1011.2246 C3319.0117 -1010.8149 3317.4326 -1010.4033 3315.8262 -1010.064 c3314.957 -1009.8804 3314.1035 -1009.665 3313.2559 -1009.4355 C3312.3164 -1007.1187 3310.9824 -1004.9775 3309.3154 -1003.1265 C3310.2148 -1003.2407 3311.0898 -1003.2729 3311.9121 -1003.1846 c3316.3359 -1002.708 3318.7715 -1000.3174 3319.9121 -997.1587 C3322.2813 -994.8198 3324.0527 -991.9087 3324.9072 -988.4912 C3330.7559 -989.6338 3336.8066 -987.3691 3338.2969 -981.7866 Cf3355.3496 -1108.2061 m3355.2793 -1108.3154 3355.1953 -1108.4229 3355.1152 -1108.5303 C3354.2773 -1106.4492 3353.8633 -1104.0195 3353.668 -1101.624 C3354.8242 -1102.5703 3356.3193 -1103.0762 3358.0527 -1102.875 C3357.3193 -1104.7227 3356.4463 -1106.4971 3355.3496 -1108.2061 cf3382.0938 -1013.7012 m3379.6973 -1017.8945 3377.21 -1022.5107 3374.5283 -1027.0649 C3374.7295 -1025.6084 3374.9023 -1024.1445 3375.0156 -1022.6909 C3377.2617 -1019.5962 3379.6172 -1016.5908 3382.0938 -1013.7012 Cf3444.3408 -980.7168 m3442.0537 -985.1875 3439.1006 -991.3809 3438.668 -996.6465 C3438.498 -996.9136 3438.3262 -997.1816 3438.1582 -997.4487 c3434.877 -1002.6709 3431.1816 -1007.6069 3427.2246 -1012.3271 C3427.001 -1012.0952 3426.7598 -1011.8794 3426.5078 -1011.6758 C3428.0342 -1008.6353 3429.5332 -1005.5815 3431.0742 -1002.5601 c3435.5371 -993.8101 3440.377 -985.2207 3445.3223 -976.6875 C3445.0176 -978.0347 3444.6865 -979.377 3444.3408 -980.7168 Cf3397.7441 -1029.6167 m3398.4102 -1028.8115 3399.0566 -1027.9814 3399.6924 -1027.1396 C3396.8398 -1033.9268 3392.8945 -1040.4238 3389.6797 -1046.8423 C3388.7734 -1047.4785 3387.9502 -1048.2114 3387.2334 -1049.0615 C3386.4072 -1049.9072 3385.6113 -1050.7832 3384.8271 -1051.6694 C3384.6133 -1050.3208 3383.9561 -1049.0542 3383.0332 -1048.0293 C3388.0342 -1041.959 3392.7637 -1035.6372 3397.7441 -1029.6167 cf3402.9043 -967.6963 m3402.7617 -968.0234 3402.6016 -968.3433 3402.4531 -968.668 C3402.1074 -968.2173 3401.7139 -967.8135 3401.2832 -967.4614 C3403.1621 -964.3975 3404.9756 -961.2876 3406.6738 -958.0869 c3408.5723 -954.5088 3410.668 -951.0488 3412.9746 -947.7236 C3409.1514 -954.083 3405.9063 -960.8125 3402.9043 -967.6963 cf3314.8672 -1044.0449 m3313.4492 -1041.8604 3312.3623 -1039.4248 3311.5469 -1036.877 C3311.7197 -1035.8438 3312.0371 -1034.6587 3312.3506 -1033.5801 C3313.4668 -1036.6416 3314.2441 -1039.9336 3315.0488 -1043.144 C3314.9883 -1043.4443 3314.9248 -1043.7441 3314.8672 -1044.0449 Cf3306.8145 -988.6719 m3306.8252 -988.2388 3306.8232 -987.8081 3306.8125 -987.3789 C3306.9395 -987.79 3307.0732 -988.1992 3307.1914 -988.6123 c3307.2148 -988.6919 3307.2344 -988.769 3307.2568 -988.8477 C3307.1104 -988.7871 3306.96 -988.7344 3306.8145 -988.6719 Cf3297.6895 -1016.9683 m3298.1191 -1017.2227 3298.5557 -1017.4707 3298.999 -1017.7119 C3298.5088 -1018.0361 3298.0635 -1018.4287 3297.6875 -1018.8926 C3297.6104 -1018.3975 3297.5342 -1017.9019 3297.4473 -1017.4092 C3297.5303 -1017.2637 3297.6074 -1017.1147 3297.6895 -1016.9683 Cf3447.4707 -940.0537 m3447.9717 -939.3521 3448.8633 -937.7773 3449.8984 -936.5947 C3449.8994 -937.6729 3449.8867 -938.7554 3449.8447 -939.8486 c3449.8027 -940.9492 3449.7031 -942.0493 3449.585 -943.1494 C3445.749 -948.0864 3442.0518 -953.1235 3438.4609 -958.2441 c3434.7793 -963.4946 3431.4766 -969.3384 3427.5332 -974.5112 C3428.457 -972.4004 3429.1426 -970.2729 3429.3916 -968.1685 C3431.0566 -964.2651 3432.7373 -960.3696 3434.4375 -956.4824 C3440.1855 -953.0923 3444.0469 -944.8481 3447.4707 -940.0537 cf3325.4277 -978.3398 m3326.3584 -980.1367 3325.1113 -979.5327 3325.4277 -978.3398 C3325.4277 -978.3398 Lf3328.2549 -1086.6006 m3329.8682 -1086.5264 3331.5146 -1086.1719 3333.1865 -1085.46 c3339.3105 -1082.8506 3339.7803 -1075.4473 3337.0674 -1070.1743 c3336.502 -1069.0757 3335.8203 -1068.0044 3335.0762 -1066.9541 C3335.1123 -1066.9688 3335.1426 -1066.9883 3335.1787 -1067.0029 c3336.3164 -1067.459 3337.4229 -1067.5967 3338.4873 -1067.4941 C3338.4063 -1071.9795 3340.1074 -1075.1338 3344.3701 -1076.146 c3348.3789 -1077.0977 3351.9766 -1076.103 3355.2822 -1074.2241 C3353.959 -1080.0498 3352.6563 -1085.8721 3351.6611 -1091.7656 C3348.627 -1088.8398 3342.6465 -1089.875 3340.7012 -1094.6611 c3340.4199 -1095.3516 3340.249 -1096.1396 3340.1309 -1096.9766 C3339.2656 -1097.4287 3338.4775 -1098.0469 3337.8486 -1098.8008 C3337.123 -1097.8936 3336.4414 -1097.0195 3335.8145 -1096.2793 c3333.2061 -1093.2041 3330.2764 -1090.1162 3328.1328 -1086.7021 C3328.1738 -1086.668 3328.2148 -1086.6348 3328.2549 -1086.6006 Cf3371.9873 -1102.4668 m3372.1494 -1102.5332 3372.3145 -1102.5918 3372.4824 -1102.6436 C3372.2197 -1102.9072 3371.957 -1103.1719 3371.6934 -1103.4365 C3371.792 -1103.1133 3371.8926 -1102.791 3371.9873 -1102.4668 Cf3470.7119 -930.1733 m3472.2539 -933.2026 3472.6064 -937.0977 3472.9316 -940.4272 c3473.0078 -941.2119 3473.0625 -941.998 3473.1113 -942.7852 C3472.6855 -942.3848 3472.2119 -942.0454 3471.6992 -941.7778 C3469.8379 -935.8535 3466.7412 -930.0117 3462.1719 -926.2202 C3462.0156 -924.8677 3461.8242 -923.5137 3461.5879 -922.1582 C3463.208 -922.3081 3464.7813 -922.5742 3466.2656 -923.022 c3468.1895 -923.6016 3469.8457 -928.4722 3470.7119 -930.1733 cf3427.8145 -927.0732 m3430.5742 -925.5869 3433.4238 -924.2432 3436.3359 -923.083 c3436.8145 -922.8921 3437.3096 -922.7554 3437.8096 -922.6401 C3436.2275 -924.5957 3434.7842 -926.6855 3433.4531 -928.8506 C3431.2344 -927.9824 3428.5566 -928.2124 3426.6641 -929.8813 C3426.1436 -929.4434 3425.5762 -929.041 3424.9316 -928.6963 C3425.8857 -928.1406 3426.8447 -927.5957 3427.8145 -927.0732 cf3359.6592 -986.7285 m3359.6494 -986.9609 3359.6504 -987.1919 3359.6641 -987.4209 C3359.2461 -987.7031 3358.8281 -987.9844 3358.4092 -988.2637 C3357.5098 -986.4507 3356.4805 -984.6851 3355.3633 -982.9639 C3355.8135 -983.3159 3356.2617 -983.6689 3356.7031 -984.0337 c3357.7109 -984.8672 3358.7021 -985.7793 3359.6592 -986.7285 Cf3304.7295 -950.6904 m3308.2598 -951.6201 3311.79 -951.7324 3315.3291 -952.6167 c3317.7813 -953.23 3322.4355 -954.7695 3324.0391 -956.8574 c3325.2734 -958.4639 3326.3057 -960 3327.4863 -962 C3327.4814 -962 3327.4775 -962 3327.4736 -962 C3323.9482 -959 3320.0342 -957.7017 3316.3994 -956.4463 c3312.8135 -955.208 3309.2188 -954.5205 3305.7295 -954.5532 C3304.5146 -952.7896 3303.1406 -951.1753 3301.5352 -949.9492 C3302.6064 -950.1821 3303.6719 -950.4121 3304.7295 -950.6904 cf3271.0059 -968.896 m3270.8389 -971.7173 3270.9453 -974.6509 3271.3242 -977.5444 C3270.5879 -978.9951 3269.9521 -980.5059 3269.335 -982.0044 C3269.2539 -977.52 3269.4336 -973.0356 3271.0059 -968.896 Cf3273.8115 -1025.2832 m3275.9219 -1022.8203 3277.8242 -1020.1855 3279.5801 -1017.4424 C3279.1943 -1018.2285 3278.7988 -1018.9712 3278.3838 -1019.6406 c3276.167 -1023.2148 3278.0469 -1027.0137 3281.127 -1028.5903 C3281.8184 -1033.2012 3282.9893 -1037.792 3285.1953 -1041.2578 C3282.0439 -1037.6973 3279.0547 -1034.0078 3276.4385 -1030.0376 c3275.4219 -1028.4941 3274.5557 -1026.9058 3273.8115 -1025.2832 Cf3434.1875 -1034.4961 m3430.6475 -1038.0967 3426.8105 -1041.3887 3423.1016 -1044.8145 C3423.6025 -1043.7412 3424.0215 -1042.6489 3424.3369 -1041.541 C3427.2695 -1039.4971 3429.5898 -1036.8657 3431.9316 -1033.8228 c3432.0078 -1033.7236 3432.0898 -1033.6304 3432.166 -1033.5322 C3433.2188 -1033.7373 3434.2949 -1033.7002 3435.2861 -1033.3594 C3434.9189 -1033.7363 3434.5547 -1034.1221 3434.1875 -1034.4961 cf3459.7188 -1001.5264 m3456.4707 -1007.4346 3453.5586 -1013.1372 3449.1182 -1018.2808 c3446.4395 -1021.3828 3443.6621 -1024.4746 3440.8408 -1027.5156 C3445.668 -1020.8389 3449.5615 -1013.665 3453.0547 -1006.252 C3457.5547 -999.7505 3461.9609 -993.1914 3465.9307 -986.3198 c3468.7393 -981.458 3470.8613 -976.4199 3472.2373 -971.2354 C3471.791 -974.9116 3471.0205 -978.4727 3469.5957 -982.2651 c3467.0693 -988.9902 3463.168 -995.251 3459.7188 -1001.5264 cf*U0.274296 0.754208 0 0 0.964706 0.247059 1 Xa159.1074 -1820.3662 m164.8359 -1817.7676 163.8032 -1808 156 -1808 C154.9731 -1808 154.2734 -1808 v151.2456 -1808 148.9521 -1809.8984 148.0059 -1812.6592 c145.251 -1820.6934 143.6763 -1828.0322 142.8213 -1836.4951 c142.0845 -1843.791 143.4741 -1851.0889 143.5752 -1858.3828 c143.6709 -1865.2871 151.8149 -1866.416 155.1748 -1862.1299 C159.667 -1860.2402 159.3809 -1854.3223 156.2378 -1851.3662 C155.9336 -1847.0156 155.5605 -1842.3926 155.7085 -1837.9766 c155.9189 -1831.7158 157.2847 -1826.1133 159.1074 -1820.3662 Cf257.8467 -1817.9492 m255.4282 -1806.8896 251.2344 -1796.335 251.0337 -1784.8867 c250.8867 -1776.5137 237.8867 -1776.499 238.0337 -1784.8867 c238.2227 -1795.665 241.2466 -1805.8438 244.0142 -1816.1709 c245.3877 -1821.2959 246.0669 -1826.5811 247.623 -1831.6367 c249.2441 -1836.9023 250.4932 -1842.3389 250.6279 -1847.8594 c250.832 -1856.2275 263.8325 -1856.248 263.6279 -1847.8594 c263.3794 -1837.6719 260.0044 -1827.8154 257.8467 -1817.9492 cf0.300267 0.756374 0 0 0.941176 0.247059 1 Xa387.7529 -1887.7305 m387.5439 -1879.7129 386.9526 -1867.5908 376.7754 -1866.5479 c369.7388 -1865.8262 368.6997 -1874.9795 373.5093 -1878.3623 C373.6465 -1878.7383 373.856 -1879.2471 373.8677 -1879.29 c374.2632 -1880.7354 374.4106 -1882.2109 374.5396 -1883.6973 c374.9141 -1888.0205 374.8438 -1892.3867 374.7358 -1896.7197 c374.4824 -1906.8945 374.082 -1916.9863 372.3896 -1927.0479 c370.2383 -1939.8369 367.8115 -1954.4072 361.0796 -1965.6328 c357.8799 -1970.9678 354.6904 -1976.3398 351.0215 -1981.3496 c346.6948 -1987.2578 342.8335 -1994.4941 337.5654 -1999.5889 c332.8208 -2004.1768 327.0723 -2007.7529 321.6704 -2011.498 c315.3652 -2015.8701 309.4316 -2020.7275 303.0952 -2025.0547 c291.1045 -2033.2432 277.9229 -2038.5752 263.791 -2041.75 c250.2715 -2044.7881 237.3306 -2044.4492 224.2212 -2040.0322 c217.5283 -2037.7764 211.4888 -2033.2119 205.3081 -2029.874 c198.3682 -2026.127 192.2285 -2021.5098 184.8633 -2018.4805 c180.4863 -2016.6816 176.2705 -2012.0449 172.7393 -2008.9717 c168.4268 -2005.2197 164.3252 -2001.2285 160.2891 -1997.1836 c152.3877 -1989.2656 144.9067 -1980.9385 137.1846 -1972.8477 c130.3237 -1965.6582 122.5 -1959.7139 115.4106 -1952.8037 c108.3071 -1945.8799 102.2515 -1935.4404 99.6675 -1925.8965 c97.4795 -1917.8125 84.938 -1921.248 87.1323 -1929.3516 c90.4673 -1941.6729 98.1714 -1954.1523 107.2939 -1963.0449 c111.6885 -1967.3281 116.7085 -1970.9326 121.1899 -1975.1289 c126.3438 -1979.9561 131.083 -1985.2773 135.9028 -1990.4316 c145.6045 -2000.8076 155.3276 -2011.167 166.144 -2020.4033 c171.4756 -2024.9561 176.6636 -2028.8281 183.0034 -2031.7285 c190.1392 -2034.9941 196.6675 -2039.834 203.4697 -2043.7334 c215.9214 -2050.8711 227.8984 -2056.1768 242.4395 -2056.8438 c255.9814 -2057.4648 269.9336 -2054.3438 282.6313 -2049.8613 c296.916 -2044.8164 309.3101 -2037.0439 321.2163 -2027.7734 c326.6665 -2023.5293 332.5376 -2019.834 338.1157 -2015.7637 c344.2476 -2011.2891 348.7432 -2006.6309 353.1978 -2000.502 c361.874 -1988.5635 371.2534 -1976.457 377.0195 -1962.7695 c379.8945 -1955.9453 381.2598 -1947.9873 382.8877 -1940.7803 c384.6919 -1932.793 385.9844 -1924.6943 386.8413 -1916.5518 c387.8325 -1907.1318 388 -1897.21 387.7529 -1887.7305 cfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF