%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.1.0%%For: (Evgeny Bakal) ()%%Title: (BKG 1.eps)%%CreationDate: 26.09.18 3:04%%Canvassize: 16383%%BoundingBox: 9 -2153 3837 -1%%HiResBoundingBox: 9 -2153 3837 -1%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1920.5 -1080.5 1920.5 -1080.5%AI3_TileBox: 1524 -1386 2316 -774%AI3_DocumentPreview: Header%AI5_ArtSize: 3840 2160%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1127 839 0.25 1831 940 18 0 0 6 130 0 0%AI5_OpenViewLayers: 7%%PageOrigin:1520 -1380%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 72 8%%BeginData: 3728 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1BFF85AFFD51FF85A9FD09FFCACFCAFD1EFF7F85FD52FF85FD0B%FFCACAC9FD1BFF857FAFFD14FFA9FD3DFF85A9FD0AFFCACFCAFFC9FD1AFF%5BFD15FFA9855B857EFD3AFFAF7EFD08FFCFC9FFCACFC9CAC9FD18FF85A9%FD15FFAF85855B85FD3BFF85AFFD07FFCAFFCACACACFCACFFD13FF7F8585%857FAFFD16FF7F85375B5B85FD1DFFAF85AFA9A9FD17FF8585FD08FFCAFF%CACACAC9C9CAFD10FFA9858585FD1AFFA9857F615B8585FD17FFA9FD0685%AFA9AF8585FD15FFAF85FD09FFFD06CAC9FD05FFA985FF85FD08FFA95AFD%1DFFA9AF5A85FD0EFFAFFFA9AFA9FD05FFA97FA9FFA98585FD05FF7F7F7E%857FFD11FF84AFFD0AFFCACAC9C9C9FD05FFA97FA9858585FD06FFA97FFD%2EFFAFFD0785FF85A9A985FD0CFFA9FFFFAF5BFD10FFAF85FFAFFD10FF7F%8585FD04FF855BA985857F8585FD2EFFA97FAFA9A9FFFFFFA95BAFA95B85%FD10FFA97FFD10FFA985855BFFFFFFA9A9FD13FFA9FFA9FD31FF5BFD0BFF%A9FD12FF85A9FD12FFA97FAF85855BFD46FF85A9FD1EFF85A9FD13FFA984%FFFFA97EFFFFAFA9FD40FFAF85FD1FFF85A9FD18FFA9FD0585FFFFFF85FD%3AFF8585A9FD1FFF8585A9FD19FFAFFFFF857F855BAFFD39FF8585FD22FF%A985FD1EFFA9FD3AFFA985FD24FF7FA9FD59FFA9FD24FFA9A9FD7DFFAF5B%FD17FFC3FD65FFA95BFD17FFC9CACAFD64FFA9FD15FFCAFFCACAFFCACAFD%78FFC9CACACAFFFFFFCFCACFFD76FFCFC3FD06FFCAC3FD78FFC9FD04FFCF%CAFD0AFFC9FD6EFFCACAFFCAFFC9FD09FFCAC9FFC9FD6DFFCAFFC9FD04CA%FD07FFCAC9C9C3CFC9FD6BFFCAC9C9FFFFFFC9FD08FFCACACAC9CACFFD6C%FFCAFD0CFFCFCAC9CAC3FFC9FD7AFFCAFFCFFFCACAFD7BFFC9CFC9CACFFD%7CFFCAFD6DFFCBC5C5FD78FFCBC59DCBA9BF97B9A2FD77FFC5B9BFBFBFB9%BF97CBFD77FF9DBF97B997BF97BFCBFD78FF9DBFB9BF97BFC5FD79FFCB96%B997B99CFD7BFFCBB9B9C5FD7DFFCBC5FDFCFFFDFCFFFDFCFFFD22FFAFFD%7EFF855BFFA95BFD7BFFAF315B3185FD7BFF85373037A9FD69FFA9FD04FF%AFA9FD0AFF8537315B3785FD6AFF5BFFFFA985FD0AFF5B3131373137315B%FD69FFA9858585FD0BFFAF7F855B37375B3185FD69FF8585FD0FFF8531AF%A9A95BA9FD79FF8585FD7EFFA985FDFCFFFDFCFFFDFCFFFD0BFFCBFD7EFF%CBCBFD64FFCAFFFFFFCAFD12FFC5FFFFFFCBFD63FFC3CAC9CFC9CAC9FD18%FFCBCBFD5FFFCFCACFC3FFCACAFD19FFA2FD5FFFCACAC2C3C3CFFD10FFCB%FD08FFCBC5FD5EFFCACFCFCAC9CFCFFD10FFC5C5FD07FFC5CBFD27FFA985%85AFFD33FFC9FD06CAFD11FFC5C5CBFD04FFCBC5FD28FFAF5B855BFD33FF%CACACAFFCFCACAFD12FFCBC5A3CBCBC59CFD29FF7F5B305B37A9FD4CFFCB%C5CBCBFD29FF85855B855BA9FD7BFFA9A95BA9FD5BFFA9858585A9FD1EFF%A9A9FD5AFF857F305B7FAFFD67FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Fade To Edge Black)(Fade To Edge Black) 0 3 Bd[0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br0.6976270.6752270.6385750.7395590.1372550.1215690.125494 %_Br[0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 100 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 50 Bs0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 %_BS%_0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Neon Rings Vignette)(Neon Rings Vignette) 1 17 Bd[0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B5B6B8B9BABDBEC0C1C3C4C5C7C8CACBCDCFD0D2D3D4D5D7D7D8DADBDBDDDEDFE0E2E3E4E5E6E7E7E8EAEAEBECECEDEDEEEEEEEFEFF0F0F1F1F1F2F2F2F2F3F3F2F3F4F3F3F4F4F4F4F5F4F4F5F5F4F4F4F4F4F4F4F3F3F4F4F3F3F3F3F2F3F2F2F2F2F2F2F2F1F1F0F1F0EFF0EFEEEEEEEEEDEDEDECECECECEBEAEBEAEAEAE9E8E8E8E7E7E7E6E6E5E5E5E4E3E3E3E2E2E1E1E0E0DFDFDFDEDDDDDCDCDBDBDAD9D8D8D7D7D6D6D5D4D4D3D3D2D2D1D0D0D0CFCECECDCDCCCCCBCACAC9C8C7C7C6C5C5C4C4C3C3C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B8B7B7B6B5B5B4B3B2B2B1><B0B0B1B1B1B0B1B1B1B2B2B2B1B3B3B2B2B4B3B2B4B4B3B3B5B4B4B6B5B4B3B5B5B4B6B6B5B4B6B5B5B4B6B5B4B6B5B4B4B5B5B4B6B5B4B3B4B4B3B4B3B2B1B3B1B0AFB1B0AFB0AFAEADAFADACAEADABAAACAAA9AAA9A8A7A8A7A5A4A5A4A3A4A3A1A0A1A09E9F9E9D9B9C9B999A9997969795949293929091908E8D8E8C8A8B8A888787868485838280817F7D7B7C7A797977767475737172706F6D6D6C6A6A69676565646260615F5D5D5C5A5858565555535250504E4D4D4B4A4848474544444241413F3E3C3C3B393A3837353634323331302E2F2D2C2A2B2928292726242524><A5A5A3A3A3A3A2A1A19F9F9E9E9C9C9C9B999998979796969594949292929290908F8D8D8C8C8A8A8A8A88888886868686848483828281817F7F7F7D7C7C7C7A797979777776757474737271716F6F6E6E6C6C6C6A6A696967676665646363616160605E5D5D5C5B5B5A58585756555554535251514F4E4E4C4B4B4A484847454544444241413F3E3E3D3B3B3A3A3837373534333331302F2E2D2D2C2A2A292727262624232222201F1F1D1C1B1B191817151514131211110F0E0E0D0B0B0A0908070705050404030202000000000000000000000000000000000000000000000000><D5D4D3D2D1D0CFCECDCCCBC9C8C7C5C4C3C2C0BFBDBCBAB8B7B5B3B1AFADABA9A8A6A4A29F9D9B99979593918F8D8B89878583817E7C7A79777573716F6D6B6968666462605E5C5B5957555352504E4C4B494846444342403F3D3C3A383736343332302F2E2C2B2A29272625242221201F1E1D1C1B1A191716151514131211100F0E0E0D0C0B0B0A090908080706060505040404030303030202020202010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><1313131313131212121212121212121212121111111111111111111111111010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0909090909090909090909090808080808080808080808080707070707070707070707070606060606060606060606050505050505050505050505040404040404040404040404030303030303030303030303020202020202020202020202010101010101010101010101000000000000><0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F40414142434344454646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF>4 %_Br<B1B1B0B0B0B0B0B0AFAFAFAFAEAEAEAEADADADADADACACACABABAAAAAAA9A9A8A8A7A7A7A6A6A6A6A5A4A4A4A3A3A3A3A2A2A2A1A1A1A09F9F9E9E9E9D9D9D9C9B9B9A9A99989897969695959494939292919190908F8E8E8D8C8C8B8B8A898988888786868584848382828180807F7E7D7C7C7B7A797878777675747373727170706F6E6D6C6B6B6A69696867666564636261605F5E5D5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484747464544434241403F3F3E3D3C><2424222222222020211F1F201E1E1E1E1C1C1C1B1B1B1919191A17171816161614141414121213111212101010100E0E0F0D0D0D0D0B0B0C0A0A0B0909090A080909080808070708080607070506060505050504040403040403040404030304020303030202030202020101010201010100010100010101010101000101000001010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000001000001010001>00<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC><AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6><EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB>4 %_Br<3C3D3E3F3F40414243444546474748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5D5E5F60616263646566676869696A6B6B6C6D6E6F707071727373747576777878797A7B7C7C7D7E7F808081828283848485868687888889898A8B8B8C8C8D8E8E8F90909191929293949495959696979898999A9A9B9B9C9D9D9D9E9E9E9F9FA0A1A1A1A2A2A2A3A3A3A3A4A4A4A5A6A6A6A6A7A7A7A8A8A9A9AAAAAAABABACACACADADADADADAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1><0100010100000100000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010100000101000101010101010001010001010102010101020202030202030303020403030404040304040304040405050505060605070706080807070808080909080A0909090B0A0A0C0B0B0D0D0D0D0F0E0E10101010121211131212141414141616161817171A1919191B1B1B1C1C1C1E1E1E1E201F1F212020222222222424>00<BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF>4 %_Br<B1B2B2B3B4B5B5B6B7B7B8B9BABABBBCBCBDBEBEBFBFC0C1C1C2C3C3C4C4C5C5C6C7C7C8C9CACACBCCCCCDCDCECECFD0D0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9DADBDBDCDCDDDDDEDFDFDFE0E0E1E1E2E2E3E3E3E4E5E5E5E6E6E7E7E7E8E8E8E9EAEAEAEBEAEBECECECECEDEDEDEEEEEEEEEFF0EFF0F1F0F1F1F2F2F2F2F2F2F2F3F2F3F3F3F3F4F4F3F3F4F4F4F4F4F4F4F5F5F4F4F5F4F4F4F4F3F3F4F3F2F3F3F2F2F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEAEAE8E7E7E6E5E4E3E2E0DFDEDDDBDBDAD8D7D7D5D4D3D2D0CFCDCBCAC8C7C5C4C3C1C0BEBDBAB9B8B6B5B4><24252426272928292B2A2C2D2F2E3031333234363537383A393B3C3C3E3F4141424444454748484A4B4D4D4E5050525355555658585A5C5D5D5F61606264656567696A6A6C6D6D6F707271737574767779797A7C7B7D7F818082838584868787888A8B8A8C8E8D8E9091909293929495979697999A999B9C9B9D9E9F9EA0A1A0A1A3A4A3A4A5A4A5A7A8A7A8A9AAA9AAACAAABADAEACADAFADAEAFB0AFB0B1AFB0B1B3B1B2B3B4B3B4B4B3B4B5B6B4B5B5B4B4B5B6B4B5B6B4B5B5B6B4B5B6B6B4B5B5B3B4B5B6B4B4B5B3B3B4B4B2B3B4B2B2B3B3B1B2B2B2B1B1B1B0B1B1B1B0B0><00000000000000000000000000000000000000000000000002020304040505070708090A0B0B0D0E0E0F111112131415151718191B1B1C1D1F1F202222232426262727292A2A2C2D2D2E2F3031333334353737383A3A3B3B3D3E3E3F414142444445454748484A4B4B4C4E4E4F51515253545555565758585A5B5B5C5D5D5E606061616363646566676769696A6A6C6C6C6E6E6F6F717172737474757677777979797A7C7C7C7D7F7F7F81818282838484868686868888888A8A8A8A8C8C8D8D8F909092929292949495969697979899999B9C9C9C9E9E9F9FA1A1A2A3A3A3A3A5A5><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010202020202030303030404040505060607080809090A0B0B0C0D0E0E0F101112131415151617191A1B1C1D1E1F20212224252627292A2B2C2E2F303233343637383A3C3D3F404243444648494B4C4E5052535557595B5C5E6062646668696B6D6F71737577797A7C7E81838587898B8D8F91939597999B9D9FA2A4A6A8A9ABADAFB1B3B5B7B8BABCBDBFC0C2C3C4C5C7C8C9CBCCCDCECFD0D1D2D3D4D5><00000000000001010101010101010101010102020202020202020202020203030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606060707070707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010111111111111111111111111121212121212121212121212131313131313><AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A59585857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B3B2B0B0AEADABAAA9A9A7A6A4A4A2A2A0A09E9E9D9D9C9C9A9A989896969595939391918F8F8C8C8988868684848383818180807E7F7D7D7C7B7A7A79797777757574747272717170706F6F6E6E6D6D6C6C6B6B6A6A696968686767666665656464636462626162616160605F5F5E5E5D5D5C5C5B5C5A5A5959585857575656555554545353525150504F4F4E4E4D4C4B4B4A4A49494747464645444343424140403F3E3D3D3C3B3A39383837363534333231302F2E2D2C2B2A282726242322201F1E1C1B1A181716141312100F0E0C0B0A080706050403020000><B0B1B2B3B3B4B5B6B8B8BABABCBDBFC0C2C3C5C4C5C5C6C6C7C7C8C8C9C9CBCBCDCCCECFD1D1D3D5D7D7D9DBDDDEDFE0E0E0E1E2E3E3E4E3E4E5E6E6E8E8EAEAEBECEDEEEFEFEFEFF0F1F1F2F3F2F2F2F3F3F4F4F4F4F5F5F6F6F7F7F6F7F7F7F8F8F9F8F8F9F9FAFAFAFAFAFBFBFBFBFCFCFBFCFCFCFCFDFDFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F2F2F1F1><A5A5A3A3A3A3A1A19FA09FA09F9F9E9E9D9D9C9D9C9C9B9B9A9A9A9A999998989798979796979596949594949394939393949293929291929192909190908F908F908E8F8E8F8E8F8E8F8D8E8D8E8D8E8C8D8B8C8B8C8B8C8A8B8A8B8A8B898A898A888A8889888887888788868786868586858684858384838482838182808180807F7F7E7E7D7D7C7D7B7C7A7B797A787977787677757674757373717270706F6F6D6E6C6D6B6B696A686866666464626260615F5F5D5D5B5B595A57575454525250504E4E4B4B49494646444441413F3F3D3D3A3A383836363434><D5D5D4D3D2D2D1D1D0CFCECECDCDCCCBCACAC9C9C7C7C5C5C4C3C2C1C0BFBDBDBBBAB9B8B6B6B4B3B1B0AFAEACABA9A8A6A5A3A2A0A09D9D9B9A9796949391908E8D8B8A8887858482817F7E7C7A7877757472716F6E6C6B696866656362605F5D5C5A595756545351504F4E4C4B49484646444341403E3D3C3B39383736343332312F2E2D2C2A2928272525232221201F1E1D1C1A1A181816161414131211100F0F0E0D0C0B0A0A09090807070606050404030302020202010101010101000000000000000000000000000000000000000000000000000000000000><131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F101010101010101111111111111111121212121212121313131313131314141414141414141515151515151516161616161616171717171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F202020202020202121212121212122222222222222222323232323232324242424242424252525252525252526262626262626272727272727272828282828282828292929292929292A2A2A2A><0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7B7B>4 %_Br<0000000000000000000101010101010101010101010101010102020202020202020202020202030202020304030404040404050505050505050505060606060606060606070707070707070809090909090909090A0A0A0A09090A0A0B0B0B0B0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0D0D0D0D0E0E0E0E0E0E0E0E0E0E101010101011111111><F1F1F0EFEFEEEDEDECECEBEBEAE9E8E8E7E6E6E5E4E3E3E2E1E0DFDFDEDDDDDCDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBCBBBAB9B7B6B5B4B3B2B1B0AEADACAAA9A8A6A5A3A2A19F9E9D9B9A999796949391908E8D8B8A888786848382807E7D7B7A787776747372706F6E6C6B6A686765646261605E5D><343233302E2F2D2E2B292A2826272523232120201F1F1E1C1D1B1A1A1917181617151314131112100F100E0F0D0C0D0C0B0C0B0A0B0A090A090908070807060605040505060504050404040303040304030203020203020102020102010202010101000100000000010000000000000000000000000000000000000000000000000000000000>0<EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6><2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF><7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F9091919293939495959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCDCECFCFD0>4 %_Br<1111111110101010100E0E0E0E0E0E0E0E0E0E0D0D0D0D0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0B0B0B0B0A0A09090A0A0A0A090909090909090908070707070707070606060606060606060505050505050505050404040404030403020202030202020202020202020202020201010101010101010101010101010101000000000000000000><5D5E606162646567686A6B6C6E6F707273747677787A7B7D7E808283848687888A8B8D8E909193949697999A9B9D9E9FA1A2A3A5A6A8A9AAACADAEB0B1B2B3B4B5B6B7B9BABBBCBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDCDDDDDEDFDFE0E1E2E3E3E4E5E6E6E7E8E8E9EAEBEBECECEDEDEEEFEFF0F1F1><0000000000000000000000000000000000000000000000000000000000010000000001000101010202010201020201020302020302030403040303040404050405060505040506060708070809090A090A0B0A0B0C0B0C0D0C0D0F0E100F1012111314131517161817191A1A1B1D1C1E1F1F2020212323252726282A292B2E2D2F2E30333234>0<E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEE><AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A><D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A8988888787868585848383828181807F7F7E7E7D7C7C7B>4 %_Br<0000020304050607080A0B0C0E0F101213141617181A1B1C1E1F202223242627282A2B2C2D2E2F30313233343536373838393A3B3C3D3D3E3F40404142434344454646474749494A4A4B4B4C4D4E4E4F4F5050515253535454555556565757585859595A5A5C5B5C5C5D5D5E5E5F5F606061616261626264636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727274747575777779797A7A7B7C7D7D7F7E8080818183838484868688898C8C8F8F919193939595969698989A9A9C9C9D9D9E9EA0A0A2A2A4A4A6A7A9A9AAABADAEB0B0B2B3B4><F1F1F2F2F3F3F3F4F4F4F4F5F5F5F5F6F6F6F6F7F7F7F7F7F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFDFDFCFCFCFCFBFCFCFBFBFBFBFAFAFAFAFAF9F9F8F8F9F8F8F7F7F7F6F7F7F6F6F5F5F4F4F4F4F3F3F2F2F2F3F2F1F1F0EFEFEFEFEEEDECEBEAEAE8E8E6E6E5E4E3E4E3E3E2E1E0E0E0DFDEDDDBD9D7D7D5D3D1D1CFCECCCDCBCBC9C9C8C8C7C7C6C6C5C5C4C5C3C2C0BFBDBCBABAB8B8B6B5B4B3B3B2B1B0><3434363638383A3A3D3D3F3F41414444464649494B4B4E4E50505252545457575A595B5B5D5D5F5F616062626464666668686A696B6B6D6C6E6D6F6F707072717373757476757776787779787A797B7A7C7B7D7C7D7D7E7E7F7F8080818082818382848384838584868586858686878688878887888889888A888A898A898B8A8B8A8B8A8C8B8C8B8C8B8D8C8E8D8E8D8E8D8F8E8F8E8F8E8F8E908F908F909091909291929192929392949393939493949495949695979697979897989899999A9A9A9A9B9B9C9C9D9C9D9D9E9E9F9FA09FA09FA1A1A3A3A3A3A5A5><000000000000000000000000000000000000000000000000000000000000010101010101020202020303040405060607070809090A0A0B0C0D0E0F0F101112131414161618181A1A1C1D1E1F2021222325252728292A2C2D2E2F31323334363738393B3C3D3E40414344464648494B4C4E4F505153545657595A5C5D5F606263656668696B6C6E6F7172747577787A7C7E7F8182848587888A8B8D8E9091939496979A9B9D9DA0A0A2A3A5A6A8A9ABACAEAFB0B1B3B4B6B6B8B9BABBBDBDBFC0C1C2C3C4C5C5C7C7C9C9CACACBCCCDCDCECECFD0D1D1D2D2D3D4D5D5><EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413><2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A191919191919191818181818181818171717171717171616161616161615151515151515141414141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C><7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br<B4B4B5B4B4B4B5B5B4B4B6B6B6B5B7B7B7B7B9B9B9BBBBBBBABCBCBCBCBEBDBDBCBEBEBEBEBFBFBFBFC0C1C0C2C2C1C1C2C2C2C2C3C3C2C2C3C3C3C2C3C3C3C4C4C3C3C4C4C3C3C4C3C3C2C4C3C3C2C3C2C2C1C2C1C0C2C1C0BFC0C0BFBFBFBFBEBDBDBDBCBBBCBBBABABAB9B8B8B8B6B6B6B5B4B3B4B2B1B0B0AFAEADADACAAAAA9A8A6A6A5A3A2A2A09F9D9D9C9A989896><B0B2B1B3B3B5B5B7B8B9B9BCBEBEC0C0C2C2C4C4C6C6C8CACACCCCCECDCFCFD0D0D1D3D3D5D4D6D5D7D7D8D8DADBDBDCDCDDDCDEDDDEDEDFE0DFE1E0E1E1E2E1E2E1E3E4E3E4E3E4E3E4E3E4E4E5E4E5E6E4E5E4E5E4E5E4E5E4E5E5E4E5E4E5E4E4E3E4E3E3E4E3E3E2E3E1E2E1E1E0E0E1DFE0DEDFDEDEDDDDDCDCDDDBDBDADAD9D9D8D8D7D7D7D6D6D4D4D3D3D2D2D1D1><A5A3A3A2A2A0A09E9E9C9C9A9898969594939191908F8E8C8C8A898887868584838281807F7E7D7C7B7B797978777675747373727170706F6D6D6C6B6A6A69686766656463626160605E5E5C5C5B5A595857565554535251504F4E4D4C4A4A48474645444342403F3D3C3B3A383736353331302E2E2C2B292826252321201D1C1A1917151312100E0D0B0A09080605030200><D5D4D3D2D1D0CECDCCCBCAC9C7C6C5C3C2C1BFBEBCBBB9B7B5B3B1AFADABA9A7A5A3A19F9C9A989693918F8D8B888684827F7D7B79777572706E6C6A68666462605E5B59575553514F4D4B4948454442403E3C3A38363533312F2E2C2A292726242221201E1D1B1A181715141312100F0E0D0C0A0A0808070605050403030302020201010101010101000000000000000000><1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E><0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F303030313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F>4 %_Br<96959392908F8D8C8A898786848382807F7D7B7A787775747371706F6D6C6B69686665646261605E5D5C5A59575655545251504F4C4B4A48474645444241403E3D3C3B3A39383735343332302F2D2C2B2928272625242221201F1E1D1C1B1A191817161514131211><D1CFCECCCBC9C8C7C5C5C4C2C1C0BFBDBCBBBAB9B7B6B5B3B2B1B1AFAEACABAAA9A7A6A5A3A2A1A09E9D9C9C9B99989795949391918F8E8D8C8B898887878685848381807F7E7D7C7B7A7977767575747372706F6E6D6C6B6A6968676665646463636261605F5E5D>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6><4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF><9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0>4 %_Br<1112131415161718191A1B1C1D1E1F2021222425262728292B2C2D2F30323334353738393A3B3C3D3E40414244454647484A4B4C4F50515254555657595A5C5D5E60616264656668696B6C6D6F707173747577787A7B7D7F808283848687898A8C8D8F9092939596><5D5E5F6061626363646465666768696A6B6C6D6E6F7072737475757677797A7B7C7D7E7F808183848586878788898B8C8D8E8F91919394959798999B9C9C9D9EA0A1A2A3A5A6A7A9AAABACAEAFB1B1B2B3B5B6B7B9BABBBCBDBFC0C1C2C4C5C5C7C8C9CBCCCECFD1>0<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E><AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756565554535251504F4E><D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F>4 %_Br<9698989A9C9D9D9FA0A2A2A3A5A6A6A8A9AAAAACADADAEAFB0B0B1B2B4B3B4B5B6B6B6B8B8B8B9BABABABBBCBBBCBDBDBDBEBFBFBFBFC0C0BFC0C1C2C0C1C2C1C2C2C3C2C3C3C4C2C3C3C4C3C3C4C4C3C3C4C4C3C3C3C2C3C3C3C2C2C3C3C2C2C2C2C1C1C2C2C0C1C0BFBFBFBFBEBEBEBEBCBDBDBEBCBCBCBCBABBBBBBB9B9B9B7B7B7B7B5B6B6B6B4B4B5B5B4B4B4B5B4B4><D1D1D2D2D3D3D4D4D6D6D7D7D7D8D8D9D9DADADBDBDDDCDCDDDDDEDEDFDEE0DFE1E0E0E1E1E2E1E3E2E3E3E4E3E3E4E3E4E4E5E4E5E4E5E5E4E5E4E5E4E5E4E5E4E6E5E4E5E4E4E3E4E3E4E3E4E3E4E3E1E2E1E2E1E1E0E1DFE0DFDEDEDDDEDCDDDCDCDBDBDAD8D8D7D7D5D6D4D5D3D3D1D0D0CFCFCDCECCCCCACAC8C6C6C4C4C2C2C0C0BEBEBCB9B9B8B7B5B5B3B3B1B2B0><000203050608090A0B0D0E1012131517191A1C1D202123252628292B2C2E2E303133353637383A3B3C3D3F40424344454647484A4A4C4D4E4F505152535455565758595A5B5C5C5E5E60606162636465666768696A6A6B6C6D6D6F707071727373747576777879797B7B7C7D7E7F808182838485868788898A8C8C8E8F9091919394959698989A9C9C9E9EA0A0A2A2A3A3A5><00000000000000000001010101010101020202030303040505060708080A0A0C0D0E0F101213141517181A1B1D1E202122242627292A2C2E2F31333536383A3C3E4042444548494B4D4F51535557595B5E60626466686A6C6E70727577797B7D7F828486888B8D8F919396989A9C9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBCBEBFC1C2C3C5C6C7C9CACBCCCDCED0D1D2D3D4D5><7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A69696867666665646363626160605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A494847474645444443424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A29282827262525242322222120201F1E1D1D1C1B1A1A191817171615141413><4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A191918181717161616151514141313121211111110100F0F0E0E0D0D0C0C><9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7073320.6909440.6457470.8361490.074510.0470590.0549024 %_Br[0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 87.8493 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 88.1542 Bs0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS%_0.23563 0.002045 0 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS%_0.693446 0.140078 0 0 0 0.682353 0.937255 2 50 89.2704 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 89.6428 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 90.8946 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 91.2834 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 %_BS%_0 0.946166 0.204593 0 0.933333 0.164706 0.482353 2 50 92.7625 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 93.1133 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 94.3587 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 94.7866 Bs0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS%_0.066621 0.365332 0 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 %_BS%_0.589197 0.818265 0 0.000122 0.494118 0.305882 0.623529 2 50 96.3828 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 %_BS%_0.707332 0.690944 0.645747 0.836149 0.07451 0.047059 0.054902 2 50 99.929 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink Radial)(Pink Radial) 1 2 Bd[0<00000102030405060708090B0C0D0E1011121314141617191A1C1D1E202122232426272728292A2C2D2E2F31313234353638393A3A3B3C3E3F414242434546474848494B4C4D4D4E4F51525254555758585A5B5C5D5D5F60616162636565666869696A6B6C6C6E6F6F707273737576767779797A7B7B7D7E7E7F8181828383848585878888898A8A8C8C8D8E8E8F8F91929294939596969898999B9A9C9C9D9D9F9FA0A2A2A3A3A4A4A6A6A7A7A8A8A9A9AAAAACACADADAEAEAFAFB1B1B2B2B3B3B3B4B4B5B5B6B6B6B7B7B9B9BAB9B9BABABBBBBBBCBCBEBDBDBFBFBFC0C0C0C1C1C2C2C2C3C3C3C4C4C4C4C5C5C5C6C6C6C7C7C7C7C8C8C8C9C9C9C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCCCDCDCDCDCDCDCECECECECECECFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1><0000000001010102020303030303040405050606070808090909090A0A0B0C0C0D0E0E0E0F0F10101112121113131415151615161818191A191A1A1C1C1C1C1D1E1F1E1F20212221222324252425262727282829282A2B2C2B2D2D2E2D2F302F3031323132343334363536373837383A393A3C3B3C3E3D3E403F40404142424445454647474847494A4A4B4A4C4D4D4E4D4F4E505150525153525355555756585759585A5A5B5B5D5D5E5E5F5F616162626363646465656767686869696A6A696B6B6D6D6E6E6D6F6F7171707272747473757577777678787A7A797B7B7A7C7C7C7E7D7D7F7F7F8180808282818184838385858587878686888888888A8A8A8A8C8B8B8B8B8D8D8D8D8F8E8E8E8E909090909090919191919191939292929292929294949494949494949494949595959595959595959595959595>01<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A89888887878685858484838382828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F6F6E6E6D6D6C6C6C6B6B6A6A6A69696868686767676666666565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A59595959595858585858585757575757575656565656565656555555555555555555555454545454545454545454545454><FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777776767575747474737372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A6969696868686767676666666665656564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959>4 %_Br[0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 %_BS%_0 0.819882 0.584924 0 1 0.329412 0.34902 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 3 Bd[0<A9A9AAAAABABADADAEAEAEAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B8B9B9BABABABBBBBCBCBDBDBDBEBEBFBFC0C0C1C1C1C2C2C3C3C4C4C5C5C5C6C6C7C7C8C8C8C9C9C9C9CACACBCB><080A0B0C0D0F1012131517191B1C1E1F2123242627292B2D2E3032333537383A3C3D3F414244484A4B4E505153545657595B5D5F6062636567696A6C6F70727476787A7C7D7F81838587898B>01<7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A><ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160>4 %_Br0<8282828383838383838585858585858686878787878888888888888A8A8A8A8A8A8C8C8C8C8C8C8D8D8D8D8D8D8F8F8F8F8F8F90909090909192929292929294949494949495959595959797979797979999999999999B9B9B9B9B9B9D9D9D9D9D9D9E9E9E9E9F9FA0A0A0A0A0A0A2A2A2A2A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7A7A7A7A9A9A9><F5F4F4F3F2F1F0EFEEEDECEAE9E8E6E6E5E4E3E2E1E0DFDEDDDBDAD8D7D6D4D3D2D1D0CFCDCCCAC8C6C5C4C2C1C0BFBEBDBCBAB9B7B6B4B3B1AFADACAAA9A7A5A3A2A09F9D9B9998969492908E8C8A88868482817F7D7A78777573716F6D6B69676562605F5D5B59565452504F4D4A484644413F3C3B39373533302E2D2B29272422201E1C1A17151312100E0B0A08>01<9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A89898989898988888888888887878787878686868686868585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B><1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 %_BS%_0 0.796872 0.544518 0 1 0.352941 0.376471 2 50 100 Bs0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 %_BS%_0 0.661738 0.032776 0 1 0.482353 0.67451 2 50 61.7977 Bs0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 %_BS%_0 0.508354 0.961639 0 1 0.576471 0.117647 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 139)(Unnamed gradient 139) 1 2 Bd[00001114 %_Br[0 0 0 0 1 1 1 2 87 36.6667 %_BS%_0 0 0 0 1 1 1 2 87 36.6667 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F50525354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBBBCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F80818182838384858686878889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACACADADADADADADADAD><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F4041424344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F8081818283848485858687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E80838587898C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Water)(Water) 0 5 Bd[<D5D6D6D7D7D8D9D9D9DADADBDCDCDDDEDEDFDFE0E1E1E1E2E3E3E4E4E5><5253545657595A5A5B5D5E606163646567686A6B6C6C6D6E7071727475><3F3F404141424345454647474848494B4B4C4C4D4D4F4F505151525353><02020203030304040505050606070709090A0A0B0C0C0D0E0F10101112>0<8A89888786858484838281807F7E7D7C7B7A7978777776757473727170><A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C>4 %_Br<B9BABBBBBCBDBDBEBFBFC0C1C1C2C2C3C3C4C4C5C5C6C6C7C8C8C9C9CACBCCCCCDCDCECFD0D0D0D1D2D2D3D4D4D4D5><17181A1A1B1D1E2021212324262829292B2D2E3032313335363838393B3C3E403F414344464747494A4C4D4F4F5052><15161718191A1A1B1B1D1E1E1F1F202223232425252728292B2C2E2E2F30303133343535363738393A3A3B3C3D3E3F><0000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010202>0<B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929191908F8E8D8C8C8B8A><D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9>4 %_Br<7576777879797A7B7C7D7E7E7F808182828384858586878888898A8B8C8C8D8E8E8F9090919293939494959696979899999A9A9B9C9C9D9E9E9E9FA0A1A1A2A2A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAAAABABACACADADADADAEAEAFAFB0B0B0B1B2B2B2B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B8B8B8B8B8B9B9B9B9B9><02020202020102020201020202010202020102020101020201010202010102010101020202010302020203030202030303030404030304040404050404040505040505050506060605070706060707070708080808090909080A0A09090B0B0B0A0C0C0C0C0E0E0E0E10100F0F111111111212121214141414151515151717><10111010121211111111101112121212121211111313121313131212141413141414131315151414141513141516141515151414161614151515141416161414151414161615151515141416161515151615151617161616161515171716161617161618181717171716161717161616161515171716161616151516171515>0<7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B1B1B1B1B0B0><E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9D9D9D9D8D8D8D8>4 %_Br<000001010203040505060708090A0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233343535363738393A3A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F616162636465666768696A6B6B6C6D6E6F70707172737475><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000010100010102010102010102010202010202><000000000000000000010101010102010202010103020202020203030303030403040403040404050405060506050506060606060607060706060707080807080808090808080909090909080A0A09090A0A0B0B0A0B0A0B0C0B0B0C0C0C0C0C0C0B0D0D0C0C0D0D0E0D0D0D0D0E0F0E0E0E0E0F0F0F0F0E101010100F0F111010>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F><FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0><FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8>4 %_Br[0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 %_BS%_0.897429 0.459052 0.325963 0.070954 0 0.439216 0.54902 2 50 98.8764 Bs0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 %_BS%_0.835508 0.320409 0.246159 0.006683 0 0.541176 0.662745 2 50 77.5281 Bs0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 %_BS%_0.727382 0.088624 0.08365 0 0 0.690196 0.847059 2 50 52.2472 Bs0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS%_0.459419 0.007385 0.064607 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Diamond Cubes)(Diamond Cubes) 6.5605 11.3652 85.3018 79.5596 [%AI3_Tile(0 O 0 R 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 Xa 0.175937 0.165347 0.272679 0 0.827451 0.792157 0.717647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR45.9316 56.8281 m39.3691 45.4609 L26.2471 45.4609 L32.8066 56.8281 L45.9316 56.8281 Lf45.9316 34.0957 m39.3691 22.7305 L26.2471 22.7305 L32.8066 34.0957 L45.9316 34.0957 Lf65.6162 22.7305 m59.0537 11.3652 L45.9316 11.3652 L52.4932 22.7305 L65.6162 22.7305 Lf65.6162 45.4609 m59.0537 34.0977 L45.9316 34.0977 L52.4932 45.4609 L65.6162 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L6.5605 11.3652 L13.123 22.7305 L26.2471 22.7305 Lf26.2471 45.4609 m19.6846 34.0977 L6.5605 34.0977 L13.123 45.4609 L26.2471 45.4609 Lf45.9316 79.5586 m39.3691 68.1924 L26.2471 68.1924 L32.8066 79.5586 L45.9316 79.5586 Lf65.6162 68.1934 m59.0537 56.8281 L45.9316 56.8281 L52.4932 68.1924 L65.6162 68.1934 Lf85.3018 56.8281 m78.7402 45.4609 L65.6162 45.4609 L72.1777 56.8281 L85.3018 56.8281 Lf85.3018 34.0957 m78.7402 22.7305 L65.6162 22.7305 L72.1777 34.0957 L85.3018 34.0957 Lf85.3018 79.5586 m78.7402 68.1924 L65.6162 68.1924 L72.1777 79.5586 L85.3018 79.5586 Lf26.2471 68.1924 m19.6846 56.8281 L6.5605 56.8281 L13.123 68.1924 L26.2471 68.1924 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 Xa 0.48307 0.366674 0.215518 0.002136 0.54902 0.584314 0.67451 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR26.2471 68.1924 m19.6846 56.8281 L26.2471 45.4609 L32.8066 56.8281 L26.2471 68.1924 Lf26.2471 45.4609 m19.6846 34.0957 L26.2471 22.7305 L32.8066 34.0957 L26.2471 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L26.2471 0 L32.8066 11.3652 L26.2471 22.7305 Lf45.9316 34.0957 m39.3691 22.7305 L45.9316 11.3652 L52.4932 22.7305 L45.9316 34.0957 Lf45.9316 56.8281 m39.3691 45.4609 L45.9316 34.0977 L52.4932 45.4609 L45.9316 56.8281 Lf6.5605 34.0957 m0 22.7305 L6.5605 11.3652 L13.123 22.7305 L6.5605 34.0957 Lf6.5605 56.8281 m0 45.4609 L6.5605 34.0977 L13.123 45.4609 L6.5605 56.8281 Lf26.2471 90.9238 m19.6846 79.5586 L26.2471 68.1924 L32.8066 79.5586 L26.2471 90.9238 Lf45.9316 79.5586 m39.3691 68.1924 L45.9316 56.8281 L52.4932 68.1924 L45.9316 79.5586 Lf65.6162 68.1924 m59.0537 56.8281 L65.6162 45.4609 L72.1777 56.8281 L65.6162 68.1924 Lf65.6162 45.4609 m59.0537 34.0957 L65.6162 22.7305 L72.1777 34.0957 L65.6162 45.4609 Lf65.6162 22.7305 m59.0537 11.3652 L65.6162 0 L72.1777 11.3652 L65.6162 22.7305 Lf85.3018 34.0957 m78.7402 22.7305 L85.3018 11.3652 L91.8643 22.7305 L85.3018 34.0957 Lf85.3018 56.8281 m78.7402 45.4609 L85.3018 34.0977 L91.8643 45.4609 L85.3018 56.8281 Lf65.6162 90.9238 m59.0537 79.5586 L65.6162 68.1924 L72.1777 79.5586 L65.6162 90.9238 Lf85.3018 79.5586 m78.7402 68.1924 L85.3018 56.8281 L91.8643 68.1924 L85.3018 79.5586 Lf6.5605 79.5576 m0 68.1924 L6.5605 56.8281 L13.123 68.1924 L6.5605 79.5576 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6091.6558 7111 L-6091.6558 7075.8271 L-6271 7075.8271 L-6271 7111 Lnuu0 O0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa0 R0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA0.5 w-6109.8286 7076.0781 m-6252.8276 7076.0781 L-6252.8276 7078.647 L-6109.8286 7078.647 L-6109.8286 7076.0781 Lb-6252.8276 7101.4829 m-6109.8286 7101.4829 L-6109.8286 7098.7109 L-6252.8276 7098.7109 L-6252.8276 7101.4829 Lb0 0 0 0 1 1 1 Xa-6252.8276 7078.647 m-6252.8276 7098.7109 L-6109.8286 7098.7109 L-6109.8286 7078.647 L-6252.8276 7078.647 LbU0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7110.6191 m-6092.2544 7110.6191 L-6094.4292 7108.3984 L-6125.9976 7108.3984 L-6131.1978 7110.6191 Lb-6092.2544 7086.5854 m-6109.8286 7086.5854 L-6109.8286 7088.6797 L-6094.3237 7088.6797 L-6092.2544 7086.5854 Lb0 0 0 0 1 1 1 Xa-6094.3237 7088.6797 m-6109.8286 7088.6797 L-6109.8286 7101.4829 L-6125.9976 7108.3984 L-6094.4292 7108.3984 L-6104.6465 7099.1279 L-6094.3237 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6270.4019 7110.6191 m-6231.4595 7110.6191 L-6236.6587 7108.3984 L-6268.2285 7108.3984 L-6270.4019 7110.6191 Lb0 0 0 0 1 1 1 Xa-6252.8286 7088.6797 m-6268.3345 7088.6797 L-6258.0112 7099.1279 L-6268.2285 7108.3984 L-6236.6587 7108.3984 L-6252.8286 7101.4829 L-6252.8286 7088.6797 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6252.8286 7086.5854 m-6270.4019 7086.5854 L-6268.3345 7088.6797 L-6252.8286 7088.6797 L-6252.8286 7086.5854 Lb-6231.4595 7110.6191 m-6252.8286 7101.4829 LSu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6131.1978 7101.4829 m-6131.1978 7108.1836 L-6115.5269 7101.4829 L-6131.1978 7101.4829 Lb0.000397 0.462379 0.988952 0 0.972549 0.603922 0.109804 Xa-6131.1978 7108.1836 m-6131.1978 7110.6191 L-6109.8286 7101.4829 L-6115.5269 7101.4829 L-6131.1978 7108.1836 Lb-6252.8286 7101.4829 m-6231.4595 7110.6191 L-6231.4595 7108.1836 L-6247.1294 7101.4829 L-6252.8286 7101.4829 Lb0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa-6247.1294 7101.4829 m-6231.4595 7108.1836 L-6231.4595 7101.4829 L-6247.1294 7101.4829 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 44)0 Au1 Ap0 J 0 j 1 w 4 M []0 d1 XR-6266.6665 7111 m-6271 7111 L-6271 7107.3989 L-6266.6665 7107.3989 L-6266.6665 7111 Lnu0 Ap0 XR-6269.9702 7110.3359 m-6267.6963 7110.3359 L-6267.6963 7108.062 L-6269.9702 7108.062 L-6269.9702 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6267.6963 7109.1992 m-6267.6963 7109.8271 -6268.2056 7110.3359 -6268.8335 7110.3359 c-6269.4614 7110.3359 -6269.9702 7109.8271 -6269.9702 7109.1992 c-6269.9702 7108.5718 -6269.4614 7108.062 -6268.8335 7108.062 c-6268.2056 7108.062 -6267.6963 7108.5718 -6267.6963 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 47)0 Au0 Ap0 J 0 j 1 w 4 M []0 d1 XR-6264.6064 7111 m-6271 7111 L-6271 7107.3989 L-6264.6064 7107.3989 L-6264.6064 7111 Lnu0 XR-6268.9404 7110.3359 m-6266.6665 7110.3359 L-6266.6665 7108.062 L-6268.9404 7108.062 L-6268.9404 7110.3359 Ln1 Ap0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa1 XR-6266.6665 7109.1992 m-6266.6665 7109.8271 -6267.1753 7110.3359 -6267.8032 7110.3359 c-6268.4312 7110.3359 -6268.9404 7109.8271 -6268.9404 7109.1992 c-6268.9404 7108.5718 -6268.4312 7108.062 -6267.8032 7108.062 c-6267.1753 7108.062 -6266.6665 7108.5718 -6266.6665 7109.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 48)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-6271 7111 m-6263.1465 7111 L-6263.1465 7102.5957 L-6271 7102.5957 L-6271 7111 Lnu0 O0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa3.86371 M-6270.1582 7102.5957 m-6269.6812 7102.5845 -6269.2842 7102.9595 -6269.2725 7103.4375 c-6269.2593 7103.9141 -6269.6357 7104.3101 -6270.1138 7104.3237 c-6270.5903 7104.3359 -6270.9878 7103.96 -6270.9995 7103.4824 c-6271.0122 7103.0054 -6270.6357 7102.6069 -6270.1582 7102.5957 cf-6270.1357 7103.46 mFUu-6270.1558 7104.8188 m-6269.6782 7104.8086 -6269.2813 7105.1846 -6269.2686 7105.6621 c-6269.2563 7106.1382 -6269.6333 7106.5356 -6270.1104 7106.5488 c-6270.5874 7106.5615 -6270.9849 7106.1846 -6270.9971 7105.7075 c-6271.0093 7105.23 -6270.6328 7104.8345 -6270.1558 7104.8188 cf-6270.1333 7105.6846 mFUu-6270.1523 7107.0469 m-6269.6753 7107.0342 -6269.2783 7107.4102 -6269.2661 7107.8877 c-6269.2539 7108.3638 -6269.6304 7108.7612 -6270.1074 7108.7744 c-6270.5845 7108.7871 -6270.9814 7108.4102 -6270.9937 7107.9326 c-6271.0068 7107.4561 -6270.6299 7107.0581 -6270.1523 7107.0469 cf-6270.1299 7107.9102 mFUu-6270.1499 7109.2725 m-6269.6724 7109.2588 -6269.2754 7109.6357 -6269.2627 7110.1133 c-6269.25 7110.5894 -6269.6274 7110.9863 -6270.1045 7111 c-6270.5815 7111.0127 -6270.9785 7110.6357 -6270.9912 7110.1582 c-6271.0029 7109.6816 -6270.6274 7109.2832 -6270.1499 7109.2725 cf-6270.1274 7110.1357 mFUu-6268.1538 7103.6665 m-6267.6763 7103.6533 -6267.2793 7104.0293 -6267.2666 7104.5068 c-6267.2539 7104.9829 -6267.6309 7105.3809 -6268.1084 7105.394 c-6268.5854 7105.4063 -6268.9824 7105.0293 -6268.9946 7104.5527 c-6269.0068 7104.0752 -6268.6304 7103.6768 -6268.1538 7103.6665 cf-6268.1304 7104.5293 mFUu-6268.1499 7105.8901 m-6267.6729 7105.8789 -6267.2764 7106.2549 -6267.2632 7106.7324 c-6267.2515 7107.21 -6267.6274 7107.6069 -6268.1055 7107.6191 c-6268.5825 7107.6318 -6268.9795 7107.2549 -6268.9917 7106.7773 c-6269.0039 7106.3008 -6268.6274 7105.9023 -6268.1499 7105.8901 cf-6268.1274 7106.7549 mFUu-6268.1475 7108.1157 m-6267.6699 7108.1045 -6267.2729 7108.4805 -6267.2607 7108.9595 c-6267.2485 7109.4341 -6267.6255 7109.8325 -6268.1025 7109.8447 c-6268.5791 7109.8574 -6268.9766 7109.4814 -6268.9888 7109.0029 c-6269.0015 7108.5264 -6268.6245 7108.1279 -6268.1475 7108.1157 cf-6268.1245 7108.9805 mFUu-6266.0723 7104.7119 m-6265.5952 7104.6997 -6265.1987 7105.0781 -6265.1865 7105.5532 c-6265.1738 7106.0303 -6265.5508 7106.4287 -6266.0273 7106.4414 c-6266.5054 7106.4541 -6266.9019 7106.0757 -6266.9141 7105.5996 c-6266.9272 7105.1235 -6266.5498 7104.7261 -6266.0723 7104.7119 cf-6266.0503 7105.5781 mFUu-6266.0698 7106.939 m-6265.5928 7106.9253 -6265.1953 7107.3013 -6265.1831 7107.7788 c-6265.1704 7108.2573 -6265.5474 7108.6543 -6266.0249 7108.6685 c-6266.5024 7108.6797 -6266.8994 7108.3013 -6266.9116 7107.8252 c-6266.9233 7107.3486 -6266.5469 7106.9512 -6266.0698 7106.939 cf-6266.0474 7107.8013 mFUu-6264.0332 7105.7822 m-6263.5557 7105.7695 -6263.1592 7106.147 -6263.1465 7106.6255 c-6263.1333 7107.1016 -6263.5103 7107.4985 -6263.9883 7107.5117 c-6264.4653 7107.5229 -6264.8618 7107.147 -6264.8745 7106.6685 c-6264.8862 7106.1909 -6264.5098 7105.7949 -6264.0332 7105.7822 cf-6264.0103 7106.647 mFUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Banner/ Adobe Patte) -(rnOnPath Brush Tool/ Arrow Brush Circles/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Arrow Brush Circles)(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -( 1 0 4 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(Black)Pc0 0.993988 1 0 1 0 0 Xa(RGB Red)Pc0.061982 0 0.965148 0 1 1 0 Xa(RGB Yellow)Pc0.627649 0 1 0 0 1 0 Xa(RGB Green)Pc0.517937 0 0.125399 0 0 1 1 Xa(RGB Cyan)Pc0.883665 0.769161 0 0 0 0 1 Xa(RGB Blue)Pc0.269902 0.816403 0 0 1 0 1 Xa(RGB Magenta)Pc0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0.000366 0.500664 0.985656 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0.000214 0.348486 0.871305 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.045136 0 0.931884 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188968 0.000397 0.98233 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501091 0.001373 0.990387 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.746151 0 0.99704 0.000092 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.761959 0 0.749783 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.6972 0.14847 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.875364 0.526451 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262516 0.245243 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.970001 0.204959 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.22855 0.274266 0.39942 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.362341 0.574029 0.840574 0.226139 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Fade To Edge Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Fade To Edge Black)PcBb0 0 0 0 Bh2 (Neon Rings Vignette) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Neon Rings Vignette)PcBb2 (Water) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Water)PcBb0 0 0 0 Bh2 (Pink Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Pink Radial)Pc(Diamond Cubes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Diamond Cubes)Pc0.75021 0.679683 0.670222 0.90164 0 0 0 Xa(R=0 G=0 B=0)Pc0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.306798 0.242466 0.247654 0 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.193668 0.150057 0.155337 0 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.084596 0.061311 0.065766 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.037049 0.025086 0.025086 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.6318 0.219425 0 0 0.247059 0.662745 0.960784 Xa(R=63 G=169 B=245)Pc0.55407 0 0.965515 0 0.478431 0.788235 0.262745 Xa(R=122 G=201 B=67)Pc0 0.508354 0.961639 0 1 0.576471 0.117647 Xa(R=255 G=147 B=30)Pc0 0.965057 0.900572 0 1 0.113725 0.145098 Xa(R=255 G=29 B=37)Pc0 0.661738 0.032776 0 1 0.482353 0.67451 Xa(R=255 G=123 B=172)Pc0.253758 0.127169 0.116762 0 0.741176 0.8 0.831373 Xa(R=189 G=204 B=212)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 50 Lb(Layer 2) Ln0 Au0 O0.706355 0.476051 0 0 0.247059 0.52549 1 Xa0 J 0 j 1 w 10 M []0 d0 XR845.9814 -1 m842.8789 -11.3447 836.6133 -20.4375 828.0122 -27.5293 c821.1475 -33.1895 814.4941 -39.2104 807.145 -44.2896 c799.7676 -49.3887 791.856 -53.6899 783.9033 -57.811 c779.9258 -59.8726 775.9043 -62.2397 771.7041 -63.8076 c767.5747 -65.3491 763.0366 -65.2129 758.7031 -65.2188 c755.9043 -65.2227 752.937 -64.3325 750.1475 -64.0239 c745.6631 -63.5273 741.5278 -64.3711 737.4204 -66.106 c734.7563 -67.2314 733.7734 -70.9019 734.4336 -73.4468 c737.0205 -83.4233 741.2642 -93.2437 739.1016 -103.7188 c737.2026 -112.9146 734.0361 -120.7939 726.3662 -126.5732 c710.7095 -138.3696 691.2642 -146.5459 673.0098 -153.3115 c652.6714 -160.8496 630.3247 -166.2139 608.5366 -163.2451 c603.123 -162.5078 597.8208 -161.1279 592.6548 -159.373 c588.0078 -157.7939 583.8169 -155.2612 579.2559 -153.4985 c570.8701 -150.2578 564.7158 -154.4873 563.4292 -162.437 C561.6763 -165.2607 560.7876 -168.3228 560.4658 -171.8286 c560.0215 -176.6743 559.9321 -180.0308 557.561 -184.3877 c555.5605 -188.0635 552.8125 -191.1816 549.2495 -193.3843 c545.7407 -195.5532 541.5732 -197.8066 537.647 -199.1348 c521.3149 -204.6597 503.1855 -192.4185 494.2891 -179.4492 c490.8521 -174.439 481.9116 -175.8389 482.1763 -182.73 c482.4131 -188.8916 484.5723 -194.1016 486.6943 -199.7876 c489.1797 -206.4478 488.3018 -214.1797 487.7217 -221.1338 c487.2368 -226.9443 485.8569 -233.6919 482.1724 -238.3857 c478.2402 -243.395 472.7871 -247.0112 467.397 -250.2554 c454.627 -257.9414 440.625 -264.1436 427.0347 -270.2168 c412.2041 -276.8442 396.959 -281.4336 381.0439 -284.6274 c350.6348 -290.7305 317.936 -292.1519 287.0557 -289.21 c272.2183 -287.7959 257.6948 -283.21 244.8335 -275.6738 c232.7842 -268.6138 224.4756 -258.7207 217.9565 -246.5479 c215.1953 -241.3921 212.2817 -236.4146 208.2437 -232.1392 c206.4272 -230.2163 202.6055 -229.4102 200.3667 -231.1226 c191.2324 -238.1099 182.6294 -248.6538 171.0571 -251.417 c162.5078 -253.458 152.21 -246.5879 146.9946 -240.3276 c144.0449 -236.7861 141.7925 -232.856 137.8999 -230.1997 c132.7969 -226.7178 127.373 -226.5195 122.1172 -229.7227 c117.5464 -232.5078 114.4126 -237.2134 111.3491 -241.4595 c107.9556 -246.1626 103.6763 -249.627 99.5078 -253.5879 c90.2598 -262.375 77.2476 -268.6846 65.3828 -273.1333 c51.8047 -278.2246 37.874 -279.0015 23.564 -277.4082 c18.8433 -276.8828 13.8843 -275.9653 9 -274.6074 C9 -287.8584 L12.2593 -288.6191 15.4922 -289.2383 18.605 -289.7334 c32.7061 -291.9751 47.0513 -291.79 60.9033 -288.1929 c74.0483 -284.7788 85.4692 -277.96 97.3008 -271.606 c102.6133 -268.7529 107.2344 -264.2822 111.4902 -260.0752 c115.8345 -255.7808 119.7397 -251.9482 123.3599 -246.9312 c124.7954 -244.9419 126.3076 -243.0981 128.0938 -241.4097 c129.4458 -240.1318 129.2061 -239.7495 130.8486 -241.0737 c134.4648 -243.9893 136.5449 -248.4893 139.8311 -251.7456 c147.2876 -259.1353 157.0469 -263.6313 167.4219 -264.5947 c179.7158 -265.7363 190.5771 -256.2373 199.1958 -248.8325 c200.334 -247.8545 201.4663 -246.8657 202.6074 -245.8872 C205.1025 -249.6367 207.0645 -253.7827 209.2207 -257.7041 c212.6904 -264.0127 217.0791 -269.5234 222.187 -274.5811 c231.9155 -284.2139 243.9048 -290.5088 256.5254 -295.4644 c270.7446 -301.0479 286.3086 -302.6094 301.4575 -303.0884 c317.0581 -303.5811 332.7393 -303.2754 348.3003 -302.0796 c364.3535 -300.8462 380.3311 -298.3784 395.9902 -294.6401 c411.5049 -290.9365 426.1245 -284.9619 440.5645 -278.2686 c453.5898 -272.2314 467.1284 -266.2349 479.0869 -258.2271 c490.2764 -250.7344 497.1567 -241.5449 499.7612 -228.2622 c501.2866 -220.481 501.8335 -211.6943 500.9585 -203.7988 C514.0713 -212.7056 530.2598 -216.7251 545.3687 -210.0278 c557.2017 -204.7822 566.2676 -197.6729 571.3994 -185.4878 c572.7144 -182.3643 573.1689 -179.8647 573.2021 -176.4746 c573.2212 -174.5283 572.916 -170.9521 574.2803 -169.3242 c575.1572 -168.2773 575.7324 -167.2876 576.0059 -166.0845 C577.3613 -166.6982 578.6748 -167.4712 579.9268 -168.0811 c605.2212 -180.3936 634.2827 -178.3179 660.6768 -170.9932 c685.0381 -164.2319 709.7046 -153.3408 730.7749 -139.3164 c735.6201 -136.0918 740.0967 -132.2861 743.5449 -127.5718 c747.4102 -122.2861 748.4209 -116.6196 750.6328 -110.6646 c754.8657 -99.2695 751.9214 -87.9287 748.8242 -76.7861 C750.8091 -76.9492 752.8271 -77.4082 754.5269 -77.6987 c758.6387 -78.4009 762.7378 -78.2856 766.8857 -77.937 c777.0542 -77.0825 786.085 -71.3799 794.9229 -66.7017 c803.8809 -61.9595 812.5386 -56.6909 820.5781 -50.5059 c824.5898 -47.4189 828.1211 -43.2871 832.2612 -40.4604 c835.9839 -37.9189 839.4492 -34.9775 842.6387 -31.7993 c851.1934 -23.2759 856.6504 -12.519 859.3027 -1 C845.9814 -1 Lf2832.5225 -423.9878 m2827.0938 -415.6084 2817.6543 -408.3745 2809.8994 -402.2158 c2805.585 -398.7896 2801.0762 -395.6875 2796.1875 -393.1387 c2791.8047 -390.8545 2786.9492 -390.0718 2782.2998 -388.6494 C2783.6826 -384.7402 2786.334 -380.9404 2788.1797 -377.5757 c2791.3379 -371.8188 2791.5137 -365.103 2791.7129 -358.6396 c2791.9238 -351.7725 2791.3721 -344.8853 2790.9141 -338.0391 c2790.4941 -331.748 2790.4766 -325.9165 2788.7021 -319.8315 c2781.5117 -295.1699 2770.1367 -271.2026 2751.832 -252.8384 c2733.167 -234.1123 2707.8418 -223.3979 2681.9355 -219.7549 c2675.5225 -218.853 2669.0879 -218.3599 2662.6133 -218.2441 c2656.1758 -218.1289 2648.9844 -220.5322 2642.6641 -221.8418 c2637.041 -223.0063 2627.3896 -224.8105 2623.2949 -229.1387 c2621.6895 -230.8359 2619.4092 -234.4185 2616.9531 -236.8315 C2615.0068 -229.1099 2613.9805 -221.1357 2610.7041 -213.8135 c2606.0488 -203.4136 2596.3369 -194.7407 2587.1445 -188.2759 c2568.8418 -175.4023 2544.5693 -173.2866 2522.8799 -173.2295 c2497.4336 -173.1626 2471.6104 -173.3374 2446.7207 -179.252 c2434.3633 -182.188 2422.5566 -186.8232 2412.5664 -194.7314 c2407.2832 -198.9141 2401.9551 -203.7549 2397.5781 -208.8789 c2395.8359 -210.918 2394.7451 -213.3276 2393.6553 -215.7251 C2392.5391 -213.6201 2391.5215 -211.4673 2390.4775 -209.3828 c2388.5508 -205.5371 2382.6191 -202.9614 2378.9531 -201.27 c2369.8633 -197.0757 2359.5645 -193.7632 2349.9521 -191.0283 c2327.8672 -184.7441 2304.8672 -191.5986 2285.2695 -202.0342 c2266.3408 -212.1138 2249.4707 -225.1865 2236.6074 -242.4419 c2230.3809 -250.7939 2225.7305 -260.1904 2222.8506 -270.1904 c2221.002 -276.6069 2220.0059 -283.2173 2219.1191 -289.8486 C2218.9863 -289.541 2218.8506 -289.2437 2218.709 -288.9614 c2215.6973 -282.9585 2212.1221 -277.8179 2206.5674 -273.9375 c2204.0156 -272.1543 2202.0391 -268.9106 2199.7334 -266.7563 c2197.3945 -264.5713 2194.748 -262.666 2192.0928 -260.8896 c2186.7158 -257.2915 2180.4541 -254.9033 2174.2832 -253.0781 c2160.6348 -249.042 2146.0225 -252.8286 2133.7598 -259.4219 c2127.4199 -262.8306 2121.7012 -267.3589 2117.4229 -273.1548 c2115.1855 -276.1851 2113.2217 -279.6274 2110.8857 -282.707 C2108.9658 -278.4248 2107.0361 -274.1533 2104.6973 -270.0513 c2100.7617 -263.1509 2094.1465 -258.5337 2087.3896 -254.5967 c2073.3311 -246.4053 2056.4336 -242.2363 2040.2998 -242.2363 c2031.4512 -242.2363 2022.6025 -242.2319 2013.7529 -242.2378 c2005.8662 -242.2427 1997.3203 -242.2124 1989.9824 -245.4839 c1983.4033 -248.4165 1978.25 -250.8091 1973.7168 -256.7344 c1971.168 -260.0645 1969.2139 -263.75 1967.6436 -267.606 C1967.0107 -266.6387 1966.4121 -265.6455 1965.7998 -264.6968 c1963.4238 -261.0166 1961.0674 -257.3672 1958.2363 -254.0127 c1951.4941 -246.0215 1939.7852 -247.374 1930.5293 -248.043 c1919.4175 -248.8457 1909.2329 -253.3135 1899.0371 -257.6899 c1887.5181 -262.6348 1876.416 -268.5718 1865.7432 -275.1353 c1846.7388 -286.8237 1835.6641 -310.0386 1826.4771 -329.6284 c1821.7231 -339.7656 1818.0264 -349.7803 1815.8584 -360.7949 c1814.874 -365.7949 1814.3145 -370.8921 1814.3076 -375.9863 c1814.3037 -378.7158 1814.6309 -383.2461 1812.8711 -385.8306 C1800.2422 -384.0923 1789.8398 -388.6763 1778.3945 -394.7725 c1764.4585 -402.1948 1753.0259 -412.915 1741.5508 -423.5566 c1721.2549 -442.3784 1715.4297 -471.2085 1715.2998 -497.7612 c1715.2588 -506.1465 1728.2588 -506.1426 1728.2998 -497.7612 c1728.3711 -483.2236 1730.1509 -468.9468 1735.4438 -455.3276 c1741.1084 -440.752 1752.7671 -430.1782 1764.3564 -420.2266 c1770.2544 -415.1616 1776.6587 -410.7432 1783.3901 -406.8652 c1789.6465 -403.2612 1797.0444 -398.8857 1804.3633 -398.1396 c1808.0098 -397.7681 1811.2671 -399.251 1814.8086 -399.251 c1817.8032 -399.251 1820.4648 -397.0259 1822.333 -394.8989 c1826.5195 -390.1323 1827.1436 -383.3506 1827.2954 -377.2881 c1827.6787 -361.9766 1832.0459 -348.2505 1838.5059 -334.4756 c1845.1201 -320.3716 1852.6973 -306.3184 1862.772 -294.3589 c1867.6323 -288.5894 1874.1069 -285.1597 1880.5801 -281.4453 c1888.0957 -277.1333 1895.8643 -273.2686 1903.7666 -269.7202 c1916.3462 -264.0708 1932.2354 -257.4487 1946.3037 -261.2065 c1951.0088 -262.4634 1954.5313 -271.292 1957.0293 -274.9756 c1960.5127 -280.1118 1964.377 -284.5244 1970.8242 -285.2393 c1973.6279 -285.5503 1976.4229 -283.0293 1977.0918 -280.4673 c1978.458 -275.2349 1980.2402 -270.3789 1983.1289 -265.7856 c1986.3184 -260.7119 1991.125 -258.6113 1996.5254 -256.7036 c2003.1807 -254.353 2011.1133 -255 2018.0459 -255 C2040.2998 -255 L2054.4102 -255 2068.4219 -258.8931 2080.8281 -265.7036 c2087.377 -269.2983 2091.8945 -273.5269 2095.4414 -280.104 c2098.3828 -285.5581 2100.5254 -291.4238 2103.2256 -296.9922 c2104.667 -299.9658 2109.3994 -301.3027 2112.1191 -299.3389 c2121.6504 -292.4551 2125.4932 -280.875 2134.9209 -274.0386 c2140.958 -269.6602 2147.7246 -266.8462 2154.9707 -265.2324 c2161.7422 -263.7241 2167.5137 -264.5093 2174.0225 -266.5967 c2179.124 -268.2329 2183.7988 -270.811 2188.1416 -273.9209 c2190.3086 -275.4731 2192.1992 -277.4819 2194.0156 -279.416 c2195.1768 -280.6514 2196.2148 -281.9971 2197.252 -283.335 c2198.1934 -284.5508 2200.0635 -285.1128 2201.2363 -286.1016 c2210.3359 -293.7778 2208.8262 -308.0449 2219.5684 -314.3555 c2222.9727 -316.3545 2228.3193 -314.6431 2229.1172 -310.4707 c2231.0645 -300.2944 2231.9189 -289.9517 2233.9229 -279.7856 c2235.8232 -270.1445 2239.5586 -261.5698 2244.8379 -253.332 c2255.1807 -237.1929 2270.415 -225.9639 2286.585 -216.2446 c2303.9609 -205.8013 2324.2051 -198.666 2344.5713 -203.0981 c2353.3291 -205.0039 2362.3477 -208.7319 2370.7617 -211.875 c2375.4336 -213.6206 2378.9678 -215.4771 2381.2529 -219.981 c2383.4912 -224.3916 2385.9434 -228.647 2389.2715 -232.3306 c2391.5762 -234.8828 2396.1504 -234.8408 2398.4629 -232.3306 c2402.0215 -228.4673 2404.2813 -224.3643 2406.2969 -219.5571 c2408.2178 -214.9731 2413.4277 -211.3794 2416.9941 -208.0625 c2426.0625 -199.6279 2436.5781 -195.3838 2448.4072 -192.2329 c2471.374 -186.1152 2495.7305 -186.2529 2519.3232 -186.23 c2538.8242 -186.2114 2559.0625 -187.2212 2576.4854 -196.9331 c2580.7871 -199.3311 2584.5566 -202.3701 2588.0273 -205.8452 c2592.1699 -209.9932 2596.1797 -213.645 2598.8467 -218.9634 c2603.2217 -227.6875 2603.1533 -238.3408 2606.6211 -247.4644 c2607.583 -249.9961 2609.8555 -252.5288 2612.8887 -252.2363 c2618.0645 -251.7373 2621.7949 -249.4429 2625.5801 -245.9766 c2627.3184 -244.3848 2628.8262 -242.5225 2630.3506 -240.7314 c2632.2529 -238.4951 2634.4707 -237.7964 2637.2402 -236.7925 c2649.1914 -232.4609 2662.3037 -230.7725 2674.873 -231.9077 c2700.0664 -234.1836 2724.415 -244.3398 2742.6396 -262.0308 c2759.6162 -278.5098 2769.4824 -300.9663 2776.166 -323.2871 c2777.7813 -328.6812 2777.6592 -334.2197 2778.0332 -339.814 c2778.4951 -346.7251 2778.8662 -353.625 2778.6543 -360.5537 c2778.5742 -363.1436 2778.8652 -367.3574 2777.6563 -369.7065 c2776.4375 -372.0747 2775.0928 -374.3809 2773.8281 -376.7251 c2771.1113 -381.7632 2768.7646 -386.9775 2768.4043 -392.751 c2768.2754 -394.812 2769.6914 -397.4971 2771.623 -398.3633 c2776.042 -400.3452 2780.5068 -401.5664 2785.1777 -402.7969 c2790.2861 -404.1421 2794.7002 -407.1138 2798.9648 -410.1255 c2806.6924 -415.5825 2813.4463 -422.502 2820.123 -429.1602 c2823.0947 -432.123 2825.1172 -436.5713 2827.21 -440.1724 c2829.8594 -444.73 2832.2295 -449.4409 2834.4307 -454.2285 c2838.9766 -464.1147 2842.1641 -474.917 2843.1689 -485.7637 c2844.8223 -503.6011 2831.002 -517.5615 2818.6279 -528.415 c2802.7773 -542.3184 2785.4766 -554.5176 2768.623 -567.1563 c2762.0029 -572.1216 2768.4707 -583.4165 2775.1855 -578.3818 c2793.3789 -564.7363 2811.9619 -551.5171 2829.0742 -536.5078 c2843.0664 -524.2349 2857.1084 -507.5005 2856.3027 -487.7612 c2855.3682 -464.8447 2844.7793 -442.9063 2832.5225 -423.9878 cf3813.3975 -377.4688 m3806.665 -386.5845 3801.6221 -398.0142 3790.5703 -402.6602 c3767.6475 -412.2964 3741.2227 -406.4688 3719.7803 -395.7739 c3709.248 -390.5215 3699.4756 -383.7739 3690.9307 -375.6841 c3689.0684 -373.9214 3687.3086 -372.0562 3685.5918 -370.1528 c3683.9512 -368.332 3681.7422 -367.2363 3680.0957 -365.2612 c3676.3311 -360.7471 3673.4316 -355.7822 3667.7227 -353.4795 c3661.9189 -351.1396 3656.9365 -353.438 3652.3301 -357.0415 c3647.3477 -360.9385 3641.2402 -362.9282 3635.3379 -365.0352 c3623.1611 -369.3818 3610.4414 -372.271 3597.4805 -372.4277 c3567.4912 -372.79 3539.6816 -351.6353 3532.9229 -322.4253 c3531.6348 -316.8584 3531.123 -311.0278 3531.8281 -305.3521 c3532.4395 -300.4458 3532.877 -294.1616 3529.1084 -290.3062 c3528.3965 -289.5786 3527.5977 -288.981 3526.7402 -288.437 C3526.0166 -288.0854 3525.2715 -287.791 3524.5049 -287.5527 C3524.4717 -287.5479 3524.4502 -287.5449 3524.418 -287.54 C3521.9277 -285.8945 3518.123 -286.3569 3515.4922 -287.1323 c3511.7559 -288.2334 3507.0645 -291.1641 3504.8652 -294.9336 C3491.1758 -300.8721 3477.6758 -307.2266 3464.0986 -313.4165 c3451.4512 -319.1826 3438.8555 -324.9238 3425.0557 -327.2729 c3412.9111 -329.3398 3401.0762 -326.3032 3393.6758 -316.0342 c3386.7617 -306.439 3383.5342 -294.6245 3377.5771 -284.4595 c3375.3232 -280.6128 3372.3994 -276.0352 3368.4424 -273.7549 c3364.1045 -271.2563 3357.999 -272.1904 3353.3867 -273.019 c3348.3506 -273.9238 3344.0781 -275.3779 3338.9141 -275.625 c3333.6104 -275.8789 3328.2959 -275.7876 3323 -275.4316 c3305.0654 -274.2271 3285.2734 -268.271 3275.6875 -251.8643 c3264.0977 -232.0278 3273.9316 -207.3237 3284.1406 -189.1465 c3290.0723 -178.5859 3296.793 -169.6519 3305.2979 -161.0674 c3307.1689 -159.1782 3308.957 -157.2222 3310.6719 -155.1904 c3311.7188 -153.9512 3312.6797 -152.6338 3313.6494 -151.335 c3312.8916 -152.3496 3316.625 -150.1045 3316.3936 -150.2246 c3321.9668 -147.3335 3327.0342 -143.6733 3331.5566 -139.3213 c3334.0684 -136.9033 3334.0781 -132.5454 3331.5566 -130.1289 c3326.6914 -125.4663 3320.5391 -122.6499 3315.6104 -118.1777 c3312.8789 -115.6997 3312.2813 -111.9331 3310.7539 -108.728 c3308.7305 -104.4839 3307.6855 -99.5024 3307.1055 -94.8638 c3304.8838 -77.1094 3308.4189 -59.0928 3313.9453 -42.2412 c3318.8857 -27.1787 3326.6426 -13.1333 3336.8037 -1 C3320.4629 -1 L3313.5273 -10.834 3307.9268 -21.5337 3303.5 -32.9399 c3296.1523 -51.8721 3292.2666 -72.8789 3293.9297 -93.1494 c3294.7578 -103.2568 3297.4473 -114.687 3302.9102 -123.3447 c3306.1436 -128.4707 3311.3652 -131.4678 3316.2705 -134.8247 C3312.9014 -137.2134 3309.3301 -139.1924 3305.4961 -141.1133 c3302.96 -142.3843 3301.1729 -146.2988 3299.3018 -148.4116 c3296.8418 -151.1895 3294.1816 -153.7529 3291.5723 -156.3872 c3282.0977 -165.9502 3275.0459 -177.9482 3268.9844 -189.894 c3257.8037 -211.9297 3251.7813 -239.3032 3266.2285 -261.2949 c3277.4473 -278.3706 3297.582 -285.3174 3316.9287 -287.8384 c3326.6982 -289.1108 3337.8359 -289.7578 3347.5771 -287.9375 c3352.5977 -286.9995 3357.0488 -285.1729 3362.2188 -285.29 C3362.3887 -285.4941 3362.8613 -285.918 3362.957 -286.0449 c3365.043 -288.814 3366.8486 -291.7778 3368.4883 -294.8267 c3374.0898 -305.2495 3377.4727 -316.8223 3385.0889 -326.0898 c3393.2939 -336.0752 3404.7832 -340.6904 3417.5518 -340.834 c3430.4238 -340.979 3443.3662 -336.6108 3455.0469 -331.585 c3469.3389 -325.4351 3483.3857 -318.7319 3497.5508 -312.2979 c3500.998 -310.7324 3504.4561 -309.1929 3507.9209 -307.6689 c3510.8281 -306.3906 3515.5869 -305.2827 3516.2354 -301.5151 C3516.3213 -301.4277 3516.418 -301.3301 3516.5293 -301.2173 c3517.1143 -300.6265 3517.8867 -300.2549 3518.6016 -299.8472 c3518.7207 -299.7793 3518.8613 -299.7271 3519.0049 -299.6841 C3519.1475 -299.7319 3519.3262 -299.7832 3519.541 -299.8384 C3519.6768 -301.9575 3518.7344 -306.0288 3518.5518 -307.6587 c3517.9404 -313.1226 3519.082 -319.1479 3520.0967 -324.499 c3524.9014 -349.8477 3543.1846 -368.2744 3565.915 -378.9121 c3589.8408 -390.1094 3617.8096 -385.2837 3641.6729 -376.5288 c3647.2324 -374.4893 3653.2139 -372.4634 3658.0215 -368.9517 c3658.8066 -368.3784 3661.8555 -365.2598 3662.9316 -365.4771 c3665.0605 -365.9072 3667.083 -369.4653 3668.2793 -371.0581 c3671.4883 -375.332 3675.3516 -378.3193 3678.9775 -382.1265 c3683.0693 -386.4224 3687.626 -390.2676 3692.3379 -393.8613 c3712.0273 -408.875 3735.9697 -418.8887 3760.8066 -420.3799 c3773.082 -421.1167 3785.708 -418.9961 3796.9375 -413.9692 c3808.1113 -408.9673 3814.2666 -399.1255 3820.8389 -389.3564 c3824.5859 -383.7866 3830.4688 -379.3247 3837 -376.9976 C3837 -363.52 L3827.918 -365.7056 3818.4795 -370.5874 3813.3975 -377.4688 cf*u1 D399.8936 -1530.1543 m395.4629 -1522.8877 389.1958 -1517.2754 383.2422 -1511.167 c375.1548 -1502.8701 368.6191 -1493.3936 360.228 -1485.4414 c359.5195 -1484.7695 358.7886 -1484.125 358.0728 -1483.4619 C357.0918 -1478.2549 355.7344 -1472.2998 352.2568 -1468.2637 c349.7988 -1465.4102 343.9092 -1465.8232 342.1714 -1469.3457 C342.0791 -1469.3428 341.9873 -1469.3398 341.895 -1469.3418 C330.6934 -1460.0215 319.2251 -1451.0176 308.4585 -1441.1807 c307.647 -1440.4395 306.8613 -1439.6787 306.062 -1438.9287 C305.8179 -1437.1113 304.8452 -1435.6973 303.5215 -1434.7852 C305.5146 -1427.7412 307.6289 -1420.7236 310.3652 -1414.0352 c318.9082 -1393.1592 328.7803 -1373.0088 335.9277 -1351.5742 c337.4111 -1347.1279 332.5215 -1341.8311 327.9321 -1343.5791 c322.6509 -1345.5898 318.5483 -1348.8711 314.5317 -1352.7891 c312.5645 -1354.708 310.6538 -1356.6738 308.6152 -1358.5186 c306.375 -1360.5459 303.1323 -1361.2109 301.0615 -1363.252 c300.4482 -1363.8564 299.8257 -1364.4629 299.1958 -1365.0703 C296.5215 -1364.1133 293.1235 -1364.7705 291.0439 -1367.5684 c288.3066 -1371.252 285.6851 -1375.0156 283.1338 -1378.8271 C278.228 -1382.4512 273.0981 -1385.665 267.8564 -1388.0908 c265.9097 -1388.9912 264.0381 -1390.0176 262.2163 -1391.124 C254.9131 -1382.5645 246.6201 -1374.4287 240.5488 -1364.9199 c234.8354 -1355.9717 230.0913 -1346.4443 224.2617 -1337.5654 c220.7993 -1332.292 212.1416 -1334.1396 212.1489 -1340.8457 c212.1738 -1363.5029 213.063 -1386.1406 215.2271 -1408.6992 c215.7407 -1414.0557 216.3696 -1419.3867 217.0693 -1424.7021 C215.4937 -1425.0742 214.0229 -1425.998 213.0361 -1427.5742 c212.6606 -1428.1738 212.3086 -1428.7803 211.9751 -1429.3916 C210.6958 -1430.1611 209.4155 -1430.9258 208.1362 -1431.6865 C205.252 -1429.25 199.832 -1430.793 197.8018 -1434.2686 C195.3848 -1432.9209 192.1855 -1432.9707 190.0503 -1435.2598 c187.9346 -1437.5273 186.1528 -1440.082 184.6777 -1442.8193 C182.0322 -1442.1611 178.8555 -1443.0547 177.0327 -1445.5762 c174.8975 -1448.5303 173.1333 -1451.6748 171.5547 -1454.916 C168.6372 -1457.1318 165.769 -1459.3955 162.7422 -1461.5508 c153.1567 -1468.375 140.9946 -1473.875 135.0283 -1484.5801 c132.728 -1488.707 131.2329 -1493.5371 134.291 -1497.7715 c137.1738 -1501.7637 141.8892 -1503.1191 146.397 -1504.4746 c151.1313 -1505.8984 155.5981 -1507.8125 160.5103 -1508.6748 c165.7515 -1509.5957 171.0103 -1509.1631 176.2886 -1509.5068 c180.2788 -1509.7656 183.3647 -1512.3135 187.4458 -1512.4004 c192.9063 -1512.5166 198.3271 -1513.8506 203.7197 -1514.6035 c213.3188 -1515.9453 222.9648 -1515.9805 232.5874 -1517.3027 C233.7192 -1526.1953 234.73 -1535.1045 235.7227 -1544.0088 c236.7925 -1553.6055 237.2056 -1563.1553 238.7075 -1572.7344 c240.3828 -1583.4258 242.0601 -1594.0225 242.1523 -1604.8721 c242.1572 -1605.4258 242.2217 -1605.9414 242.332 -1606.4219 C242.2026 -1607.8984 242.1563 -1609.3867 242.1523 -1610.873 c242.1309 -1619.2578 255.1309 -1619.2549 255.1523 -1610.873 c255.1611 -1607.3184 255.5073 -1605.1523 257.2646 -1602.1514 c259.6123 -1598.1445 260.4346 -1592.5166 261.71 -1588.082 c263.1069 -1583.2246 264.4775 -1578.3604 265.9736 -1573.5313 c267.7173 -1567.9033 268.4014 -1561.9434 269.7754 -1556.1953 c272.1733 -1546.1641 275.2852 -1536.3203 277.9307 -1526.3525 C280.1094 -1527.4668 283.1104 -1527.3281 285.3223 -1525.9063 C288.8242 -1526.5449 292.3589 -1527.0332 295.96 -1527.2676 c301.0156 -1527.5957 305.9907 -1528.7666 311.0269 -1529.4033 c316.6758 -1530.1162 322.3945 -1530.2559 328.0811 -1530.3359 c338.1538 -1530.4785 347.6973 -1532.9258 357.3662 -1535.6992 c366.0322 -1538.1846 374.0659 -1541.6953 382.3398 -1545.1592 c389.9487 -1548.3447 398.2412 -1550.4375 406.396 -1548.1338 c410.0493 -1547.1025 411.5459 -1543.6455 410.9355 -1540.1387 c410.0249 -1534.9033 404.9561 -1531.5996 399.8936 -1530.1543 Cf0 D146.3462 -1490.8477 m147.7515 -1488.5244 149.6357 -1486.6738 151.7568 -1484.9043 c152.0078 -1484.6953 152.2646 -1484.4951 152.5181 -1484.2891 C152.3223 -1485.4355 152.1909 -1486.6211 152.1431 -1487.8604 c152.0283 -1490.8125 153.5669 -1492.7168 155.6206 -1493.5859 C155.6924 -1493.7617 155.7588 -1493.9424 155.8457 -1494.1045 C152.6577 -1493.1025 149.4937 -1491.9219 146.3462 -1490.8477 Cf212.6484 -1502.3623 m204.7744 -1502.2734 197.0698 -1500.2305 189.2461 -1499.5078 c185.1602 -1499.1309 181.3086 -1497.541 177.1519 -1496.7842 C179.1563 -1494.8652 180.8433 -1492.7246 182.3003 -1490.4307 C184.7314 -1491.9268 188.0371 -1491.9756 190.2417 -1489.666 c190.4512 -1489.4463 190.6479 -1489.2207 190.8511 -1488.999 C190.8931 -1491.2119 191.0552 -1493.4395 191.3794 -1495.6934 c192.1807 -1501.2627 200.9136 -1501.9434 203.2598 -1497.1934 c203.3735 -1496.9629 203.4785 -1496.7305 203.5913 -1496.5 C205.9888 -1497.7715 209.1201 -1497.6758 211.2441 -1495.458 c213.6182 -1492.9785 215.6382 -1490.3438 217.377 -1487.5381 C217.6978 -1488.8682 218.2129 -1490.0938 219.0181 -1491.1406 c221.6323 -1494.54 226.209 -1495.1982 229.0078 -1492.6328 C229.6279 -1496.3867 230.2168 -1500.1465 230.7642 -1503.9121 C224.7573 -1503.0518 218.7236 -1502.4307 212.6484 -1502.3623 cf252.0786 -1574.5137 m252.0708 -1574.4648 252.064 -1574.417 252.0562 -1574.3691 c251.9165 -1573.4883 251.7935 -1572.6094 251.668 -1571.7285 C252.2656 -1571.4551 252.812 -1571.0771 253.2803 -1570.5898 C252.8696 -1571.8945 252.4683 -1573.2021 252.0786 -1574.5137 Cf252 -1424.8223 m252 -1417.4775 L252.0083 -1416.8613 252.0166 -1416.2451 252.0239 -1415.6289 C252.3677 -1415.2939 252.7129 -1414.9609 253.0552 -1414.625 c255.2666 -1412.46 257.6719 -1410.6064 260.1328 -1408.791 C261.1187 -1409.9814 262.1094 -1411.167 263.0977 -1412.3545 C262.9805 -1413.6572 263.3242 -1414.8711 263.9731 -1415.9063 C262.7065 -1416.3994 261.6304 -1417.2725 261.041 -1418.5732 c260.5396 -1419.6797 260.1074 -1420.8008 259.731 -1421.9336 C256.9399 -1421.0898 253.5796 -1421.9629 252 -1424.8223 Cf258.769 -1546.8877 m258.8135 -1544.5977 258.7847 -1542.2969 258.7134 -1539.9883 C259.355 -1535.7705 259.9966 -1531.5527 260.6045 -1527.332 C262.0029 -1527.4307 263.3989 -1527.1143 264.5283 -1526.293 C262.6694 -1533.1738 260.6245 -1540.0059 258.769 -1546.8877 Cf272.1851 -1494.8066 m271.585 -1496.8066 L271.6606 -1495.8721 271.7412 -1494.9375 271.8276 -1494.0029 C272.103 -1491.8711 272.3203 -1489.7314 272.4902 -1487.5869 C272.875 -1487.4229 273.2373 -1487.2148 273.582 -1486.9805 C273.0874 -1489.584 272.623 -1492.1924 272.1851 -1494.8066 Cf282.1709 -1452.2158 m280.6436 -1459.8545 278.2109 -1467.3164 276.2397 -1474.8877 C276.3198 -1471.8096 276.4731 -1468.7344 276.8022 -1465.6621 c277.0659 -1463.2051 277.7188 -1460.7676 278.3613 -1458.3877 c279.144 -1455.4893 279.1758 -1452.7031 279.478 -1449.7236 c279.5332 -1449.1797 279.604 -1448.6387 279.6768 -1448.0977 C281.7393 -1444.4434 283.5566 -1440.6738 285.2373 -1436.8428 C285.2393 -1436.8447 285.2417 -1436.8477 285.2441 -1436.8496 C284.2197 -1441.9717 283.1953 -1447.0938 282.1709 -1452.2158 cf308.2417 -1458.3232 m307.8052 -1458.583 307.4053 -1458.8945 307.062 -1459.2617 c306.5938 -1459.7637 306.1489 -1460.2773 305.7188 -1460.7988 C304.4385 -1459.917 303.1299 -1459.1348 301.8081 -1458.5049 C302.2139 -1456.9238 302.6143 -1455.3408 303.0112 -1453.7578 C304.7363 -1455.3018 306.4805 -1456.8232 308.2417 -1458.3232 Cf300.0493 -1381.5225 m300.6826 -1381.0127 301.3242 -1380.5156 301.9512 -1379.998 c303.1714 -1378.9922 304.3574 -1377.9473 305.542 -1376.9004 c306.0317 -1376.4678 309.6611 -1373.25 308.543 -1373.6758 c311.0576 -1372.7178 313.1929 -1371.3242 315.2861 -1369.7441 C312.2925 -1377.0684 309.1348 -1384.3223 305.9736 -1391.5811 C306.0605 -1390.6738 306.1289 -1389.7646 306.1572 -1388.8506 c306.2842 -1384.7256 303.0039 -1382.4941 299.6602 -1382.5488 C299.7915 -1382.207 299.9214 -1381.8652 300.0493 -1381.5225 Cf303.2803 -1515.0449 m299.2002 -1514.1787 295.064 -1513.8096 290.9233 -1513.3584 C291.0918 -1512.834 291.2607 -1512.3105 291.4292 -1511.7861 C292.6797 -1512.2539 294.0596 -1512.4072 295.3848 -1512.1299 c297.3945 -1511.709 298.9604 -1510.5098 300.2036 -1508.8701 C302.0337 -1509.7109 304.1748 -1509.7539 305.938 -1508.4746 c309.7686 -1505.6963 312.6162 -1502.4199 314.9868 -1498.4395 C314.625 -1501.9424 314.2153 -1505.4365 314.1592 -1508.8623 c314.085 -1513.3945 319.2632 -1516.5967 323.1675 -1514.9648 C323.1641 -1515.793 323.3345 -1516.5576 323.6289 -1517.2539 C316.7852 -1517.0635 309.9971 -1516.4697 303.2803 -1515.0449 cf330.3311 -1481.8008 m330.1816 -1481.6787 330.0322 -1481.5566 329.8965 -1481.4482 c329.1025 -1480.8105 328.3145 -1480.1777 327.5278 -1479.5449 C327.3555 -1478.7393 327.1631 -1477.9355 326.9268 -1477.1318 c326.0244 -1474.0645 322.4937 -1471.6943 319.3203 -1472.3828 C319.4419 -1470.7119 319.4097 -1469.041 319.1914 -1467.3711 C322.7793 -1470.2773 326.3774 -1473.1719 329.9395 -1476.1133 c331.5391 -1477.4346 333.1172 -1478.7803 334.6997 -1480.1211 C334.7705 -1480.708 334.8809 -1481.291 335.02 -1481.8711 C333.5508 -1481.2891 331.8813 -1481.2119 330.3311 -1481.8008 Cf376.0215 -1528.4736 m377.1377 -1527.4336 377.8423 -1526.0576 377.9609 -1524.3535 C379.333 -1525.7266 380.7051 -1527.0957 382.0698 -1528.4609 c383.4404 -1529.832 384.6807 -1531.2119 385.8252 -1532.6523 C382.5254 -1531.3086 379.2949 -1529.8516 376.0215 -1528.4736 Cf*U3661.2656 -1430.5879 m3648.5938 -1432.8896 3636.9092 -1438.7256 3626.1191 -1445.5859 c3620.5801 -1449.1074 3615.3389 -1453.0674 3610.1523 -1457.082 c3605.2734 -1460.8584 3599.6797 -1463.5049 3594.876 -1467.5166 c3586.7939 -1474.2676 3581.4336 -1483.4229 3576.457 -1492.5371 c3574.1318 -1496.7949 3572.0498 -1501.1797 3569.6699 -1505.4102 c3568.4922 -1507.502 3566.8838 -1510.6953 3564.8135 -1512.7949 C3562.1289 -1508.8965 3560.6943 -1502.3213 3559.0469 -1498.8447 c3557.377 -1495.3184 3554.79 -1492.1084 3552.9268 -1488.6387 c3550.0947 -1483.3662 3547.6143 -1477.9297 3544.5957 -1472.7549 c3539.2695 -1463.624 3533.7344 -1455.0615 3526.8105 -1447.0264 c3519.8711 -1438.9736 3512.2695 -1431.5273 3505.5742 -1423.2578 c3500.2959 -1416.7402 3491.1563 -1425.999 3496.3809 -1432.4512 c3503.4092 -1441.1289 3511.374 -1448.9727 3518.6592 -1457.4268 c3526.7451 -1466.8105 3532.9297 -1477.8184 3538.4717 -1488.8467 c3543.0293 -1497.9141 3547.1387 -1503.8086 3550.8174 -1512.6309 c3554.1182 -1520.5488 3559.8779 -1531.3193 3569.7969 -1525.2051 c3577.3057 -1520.5762 3581.4395 -1511.2002 3585.2988 -1503.6689 c3589.876 -1494.7363 3594.6357 -1485.7461 3601.8848 -1478.6797 c3605.4316 -1475.2227 3609.5645 -1472.5361 3613.8975 -1470.1768 c3619.4678 -1467.1436 3624.3828 -1462.4082 3629.6504 -1458.8105 c3640.3242 -1451.5215 3651.9102 -1445.4512 3664.7227 -1443.123 c3672.9619 -1441.627 3669.4609 -1429.0996 3661.2656 -1430.5879 cf*u1 D1713.8765 -2011.8203 m1704.7466 -2012.5225 1695.6494 -2012.4141 1686.4873 -2012.4141 c1685.625 -2012.4141 1684.7744 -2012.4404 1683.9219 -2012.4619 C1684.1509 -2012.2236 1684.3809 -2011.9873 1684.6064 -2011.7393 c1693.3896 -2002.0967 1700.2373 -1986.3389 1687.605 -1976.8916 c1681.6104 -1972.4082 1671.9634 -1972.6641 1664.9082 -1973.291 c1660.7227 -1973.6631 1656.6123 -1974.5469 1652.688 -1975.9541 C1652.6826 -1975.9141 1652.6792 -1975.874 1652.6738 -1975.834 c1650.3594 -1958.7041 1624.5889 -1956.9033 1611.3516 -1958.6172 c1592.7271 -1961.0283 1583.3228 -1986.0566 1591.6216 -2001.6992 c1593.9424 -2006.0732 1597.6895 -2009.7109 1601.7397 -2012.8711 C1601.1982 -2012.7939 1600.6567 -2012.7178 1600.1128 -2012.6523 c1588.6377 -2011.2793 1577.1025 -2015.7773 1567.7148 -2022.0654 c1559.7896 -2027.373 1551.5684 -2035.2637 1549.3267 -2044.8701 c1547.6602 -2052.0137 1550.8535 -2058.8721 1557.4707 -2062.0576 c1563.6021 -2065.0098 1570.7642 -2065.2832 1577.4517 -2065.1953 c1583.4238 -2065.1172 1590.4009 -2065.2881 1596.1895 -2063.7373 c1601.5439 -2062.3018 1606.624 -2059.7393 1611.2808 -2056.7764 c1613.25 -2055.5234 1615.1362 -2054.1367 1617.0293 -2052.7734 c1618.2075 -2051.9258 1619.3867 -2051.0791 1620.5718 -2050.2402 c1621.3154 -2049.7139 1621.5811 -2049.4189 1621.606 -2049.2627 C1621.8252 -2049.2256 1622.0854 -2049.1768 1622.4053 -2049.1113 c1622.6748 -2049.0566 1622.9351 -2048.9766 1623.2012 -2048.9121 C1622.8003 -2049.5586 1622.4287 -2050.2168 1622.123 -2050.8984 c1618.8545 -2058.1914 1616.1426 -2066.8887 1616.3506 -2074.8281 c1616.4824 -2079.8633 1617.333 -2084.9629 1619.4312 -2089.5645 c1621.2412 -2093.5342 1625.0889 -2095.9424 1628.8423 -2097.9414 c1635.5703 -2101.5244 1643.4922 -2103.4277 1651.0977 -2103.4209 c1658.1108 -2103.415 1663.6011 -2102.3145 1667.9155 -2096.4043 c1672.9819 -2089.4648 1671 -2079.1758 1671 -2071.1299 C1671 -2058.2588 L1671 -2055.0879 1672.0493 -2050.2266 1670.9146 -2047.1885 c1670.1875 -2045.2412 1669.3774 -2043.4316 1668.3867 -2041.7373 C1673.4746 -2042.4941 1678.5283 -2043.5127 1683.5571 -2044.6338 c1687.2803 -2045.4639 1690.749 -2046.585 1694.585 -2046.2734 c1697.627 -2046.0273 1700.6646 -2045.5117 1703.6528 -2044.9033 c1714.2783 -2042.7402 1732.7197 -2036.6113 1731.4551 -2022.7051 c1730.6338 -2013.6768 1721.5464 -2011.2305 1713.8765 -2011.8203 cf0 D1652.9463 -1989.9756 m1656.4331 -1988.1094 1660.2441 -1987.04 1664.1919 -1986.3721 c1668.9941 -1985.5605 1675.8081 -1985.3213 1680.2334 -1987.6113 c1686.187 -1990.6934 1675.3516 -2002.8223 1672.376 -2005.6533 c1668.1807 -2009.6436 1661.457 -2011.7871 1656.1289 -2013.8457 c1652.7378 -2015.1563 1650.127 -2016.2773 1647.252 -2018.207 C1649.605 -2008.8242 1652.1411 -1999.5264 1652.9463 -1989.9756 Cf1602.46 -1983.1211 m1603.7485 -1977.7021 1607.7246 -1971.6689 1613.7886 -1971.4082 c1620.0557 -1971.1387 1626.7339 -1971.4102 1632.8193 -1972.9678 c1638.4507 -1974.4092 1640.0674 -1976.4922 1640.2617 -1982.0625 c1640.2725 -1982.3613 1640.2637 -1982.6563 1640.269 -1982.9531 C1631.3838 -1990.416 1626.873 -2001.4844 1625.6455 -2012.9629 C1618.4717 -2009.0879 1611.542 -2004.7109 1605.8477 -1999.0098 c1601.3652 -1994.5205 1601.0229 -1989.1631 1602.46 -1983.1211 cf1624.335 -2034.4316 m1620.9683 -2036.543 1617.3037 -2036.7285 1614.0107 -2039.0156 c1610.1279 -2041.7109 1606.3857 -2044.5771 1602.3379 -2047.0303 c1592.9277 -2052.7334 1579.2036 -2053.415 1568.4927 -2051.8457 c1566.2549 -2051.5176 1564.3169 -2051.0293 1562.7944 -2050.1973 c1561.8115 -2049.6602 1561.811 -2050.2637 1561.874 -2048.2109 c1562.0728 -2041.7012 1571.7476 -2034.8389 1576.8408 -2031.6221 c1584.7749 -2026.6113 1593.4697 -2024.4824 1602.7412 -2026.0527 c1611.5835 -2027.5508 1620.0615 -2030.0801 1628.9194 -2031.0371 C1627.2827 -2031.8242 1625.77 -2033.5322 1624.335 -2034.4316 cf1658 -2055.3721 m1658 -2086.5908 L1658 -2091.4541 1653.1763 -2090.4189 1649.645 -2090.4219 c1644.3052 -2090.4268 1638.8047 -2088.5664 1634.1416 -2086.084 c1627.1074 -2082.3379 1629.0708 -2071.8838 1630.895 -2065.5557 c1631.6255 -2063.0195 1632.2988 -2060.4707 1633.166 -2057.9766 c1634.1777 -2055.0645 1636.6558 -2052.9863 1638.519 -2050.5918 c1642.0244 -2046.0889 1645.1553 -2041.1211 1646.5503 -2035.6074 C1646.6865 -2036.1475 1646.8926 -2036.6816 1647.1797 -2037.1953 c1649.7622 -2041.8105 1654.3594 -2043.957 1657.1987 -2048.1904 c1658.6392 -2050.3379 1658 -2052.8135 1658 -2055.3721 Cf1716.4492 -2026.2168 m1714.9517 -2027.5195 1712.7832 -2028.3701 1710.9961 -2029.1826 c1706.4473 -2031.251 1701.2119 -2032.29 1696.3062 -2033.0791 c1690.4028 -2034.0293 1684.1973 -2031.4229 1678.417 -2030.3057 c1673.6602 -2029.3857 1668.8477 -2028.6221 1664.0137 -2028.1064 C1665.5977 -2027.9258 1667.1797 -2027.6582 1668.7441 -2027.4043 c1672.8633 -2026.7354 1676.8545 -2025.7178 1681.0342 -2025.4521 c1688.9282 -2024.9512 1697.0015 -2025.4141 1704.9131 -2025.4141 c1707.9336 -2025.4141 1710.875 -2025.1133 1713.877 -2024.8203 c1715.1924 -2024.6924 1716.7324 -2024.4805 1718.0488 -2024.6641 C1718.0552 -2024.667 1718.0601 -2024.668 1718.0664 -2024.6709 C1717.7017 -2025.127 1716.9272 -2025.8008 1716.4492 -2026.2168 cf*U579.3896 -2153 m576.9961 -2151.7695 574.6455 -2150.4678 572.3613 -2149.041 c571.6709 -2148.6094 571.0137 -2148.1543 570.3765 -2147.6719 C579.3018 -2144.8662 590.0986 -2145.4365 598.8369 -2145.4258 c602.9663 -2145.4209 606.1353 -2149.4814 608.415 -2153 C630.6006 -2153 L626.0967 -2139.71 617.3491 -2127.3828 617.3779 -2112.9736 C617.2617 -2112.4727 617.2319 -2112.1836 617.2705 -2112.0596 C617.3574 -2112.2295 617.6357 -2112.3145 618.3218 -2112.0332 c620.0156 -2111.3398 621.6768 -2111.8086 623.2417 -2112.5918 c627.6875 -2114.8125 629.0444 -2119.4893 631.3652 -2123.4746 c636.3857 -2132.0977 637.9038 -2143.1211 637.9912 -2153 C651.0107 -2153 L651.1191 -2140.9121 653.4087 -2128.7666 662.9844 -2120.4717 c667.1626 -2116.8516 674.4185 -2115.1836 679.7354 -2114.5107 c682.2085 -2114.1973 690.3174 -2113.3613 691.7993 -2115.6152 c693.3799 -2118.0215 691.6592 -2123.1523 690.9365 -2125.7305 c689.9785 -2129.1523 688.6479 -2132.4629 687.0781 -2135.6445 c683.6099 -2142.6758 677.6094 -2147.7021 671.917 -2153 C690.541 -2153 L694.5938 -2148.6533 697.7729 -2143.7148 700.1265 -2138.2441 c704.3647 -2128.3936 709.7383 -2112.6797 699.167 -2104.873 c693.9238 -2101 685.9746 -2100.9209 679.7832 -2101.5107 c671.5757 -2102.292 663.3833 -2104.9102 656.4126 -2109.3477 c651.4351 -2112.5156 647.7485 -2116.8574 645.0439 -2121.8359 C644.146 -2119.7617 643.1436 -2117.7373 642.0093 -2115.7891 c638.8086 -2110.291 636.3022 -2105.8584 630.9399 -2102.0693 c625.6729 -2098.3467 617.7603 -2097.4961 612.0566 -2100.6758 c606.5273 -2103.7598 604.3877 -2107.7988 604.376 -2113.9805 c604.3652 -2119.3438 605.8501 -2124.8555 607.3667 -2129.957 c607.936 -2131.8711 608.6079 -2133.7441 609.3208 -2135.5996 C606.3755 -2133.6836 603.1011 -2132.4248 599.6875 -2132.4258 c586.0591 -2132.4287 569.4004 -2131.8506 557.4028 -2139.3135 c555.5835 -2140.4453 553.9731 -2142.6602 554.1836 -2144.9258 c554.4741 -2148.0498 555.6592 -2150.6973 557.373 -2153 C579.3896 -2153 Lf*u1 D1555.3726 -170.064 m1551.5566 -161.4204 1538.71 -157.083 1530.4424 -154.9067 c1524.9937 -153.4727 1519.3027 -152.7744 1513.6914 -152.3838 c1513.1523 -152.3462 1512.6333 -152.2959 1512.1216 -152.2393 C1516.1396 -150.252 1520.0791 -148.0693 1523.8369 -145.3638 c1528.0864 -142.3037 1531.7051 -138.9263 1534.7974 -134.6958 c1537.7788 -130.6177 1540.4971 -123.0527 1539.0479 -117.9956 c1536.1475 -107.8716 1528.2822 -101.5361 1518.1943 -99.2236 c1497.5684 -94.4956 1481.0337 -104.3877 1469.9502 -119.7373 C1469.3198 -116.0776 1468.3682 -112.4912 1467.041 -108.9946 c1465.0874 -103.8477 1463.4292 -98.3901 1460.6914 -93.5947 c1454.7627 -83.2114 1443.834 -84.5684 1433.5352 -85.7612 c1428.7256 -86.3184 1425.124 -86.251 1421.1953 -89.4751 c1417.7769 -92.2808 1415.1758 -95.8809 1413.3477 -99.8936 c1409.876 -107.5132 1409.1182 -116.0166 1409.0264 -124.2959 c1408.9414 -131.9521 1408.417 -140.7104 1410.9014 -148.0156 c1412.8584 -153.77 1416.4043 -157.9453 1420.8252 -161.0747 C1416.1152 -161.2417 1411.4272 -161.5537 1406.8232 -162.4023 c1390.9336 -165.3306 1376.5854 -178.5874 1379.6636 -196.0688 c1381.5967 -207.0474 1389.8936 -211.8657 1399.1758 -216.1221 c1411.1836 -221.6284 1422.4907 -216.9634 1432.7622 -210.2002 c1437.6709 -206.9683 1442.9966 -204.6108 1448.1006 -201.8022 C1448.0254 -207.8774 1448.2725 -213.9243 1448.2725 -219.5977 c1448.2725 -228.1533 1456.439 -234.5908 1463.6494 -237.9429 c1470.064 -240.9248 1478.1797 -241.269 1484.0898 -236.8833 c1494.2456 -229.3467 1492.3711 -215.1826 1491.4497 -204.1479 c1491.1582 -200.6572 1491.0635 -197.2061 1490.7422 -193.7905 C1492.6982 -194.4712 1494.6846 -195.0835 1496.7012 -195.6182 c1502.4868 -197.1528 1508.5415 -197.8628 1514.5078 -198.165 c1518.585 -198.3711 1521.9644 -197.2427 1525.8311 -196.1958 c1537.3267 -193.084 1562.9209 -187.1602 1555.3726 -170.064 cf0 D1449.5771 -185.2261 m1448.2334 -186.4092 1446.8037 -187.4438 1445.5464 -188.314 c1439.4468 -192.5361 1432.311 -194.8994 1426.1865 -198.9751 c1422.4771 -201.4438 1418.7422 -203.8516 1414.458 -205.1689 c1409.6006 -206.6626 1405.6489 -204.5889 1401.1636 -202.9922 c1394.2227 -200.521 1391.2598 -194.7861 1393.0186 -187.8467 c1395.7891 -176.9199 1407.9902 -174.8096 1417.624 -174.0063 c1429.5156 -173.0151 1441.8735 -174.1577 1453.5 -170.9956 c1453.9707 -170.8677 1454.3945 -170.6743 1454.7959 -170.4541 C1454.8462 -170.5684 1454.9053 -170.6748 1454.9609 -170.7837 C1452.2578 -175.2212 1450.5898 -180.1118 1449.5771 -185.2261 Cf1457.7627 -145.0986 m1456.416 -149.6929 1455.4492 -154.3472 1454.8789 -158.9224 C1454.457 -158.7275 1454.0078 -158.5605 1453.5 -158.46 c1443.374 -156.4497 1429.1543 -155.1665 1423.6855 -145.0293 c1421.248 -140.5112 1422.1826 -133.8403 1422.0669 -128.8604 c1421.9141 -122.2944 1422.0337 -115.7251 1423.687 -109.3359 c1424.3584 -106.7427 1425.4209 -103.958 1427.0811 -101.8223 c1427.8672 -100.8105 1428.8203 -100 1429.8486 -99 C1429.8496 -99 1429.8496 -99 1429.8506 -99 c1430.6499 -99 1431.4482 -98.9287 1432.2456 -98.8398 c1435.9321 -98.4629 1439.5894 -98.0044 1443.2969 -97.8652 c1444.8809 -97.8062 1446.418 -97.8823 1447.9639 -98.2134 c1449.4766 -98.5376 1450.9033 -102.856 1451.3838 -104.1338 c1454.5474 -112.5532 1457.5088 -120.4751 1457.9492 -129.5537 c1458.2002 -134.7266 1458.0059 -139.9136 1457.7627 -145.0986 Cf1470.5996 -147.8823 m1472.5532 -141.7446 1475.2705 -135.8384 1478.5098 -130.396 c1481.8271 -124.8237 1486.1064 -119.582 1491.4482 -115.8413 c1497.2813 -111.7563 1502.9321 -111.146 1509.8296 -111.2358 c1516.1816 -111.3184 1522.6416 -113.3428 1525.7881 -119.2002 c1529.3945 -125.9126 1518.126 -133.6177 1513.8403 -136.5444 c1506.3608 -141.6514 1498.0239 -144.7754 1489.8721 -148.5547 C1483.2651 -148.0698 1476.3418 -148.4058 1470.4888 -150.5029 C1470.5239 -149.6294 1470.5615 -148.7559 1470.5996 -147.8823 Cf1477.3853 -225.5542 m1474.9814 -228.4722 1470.6157 -227.0156 1467.7451 -225.4893 c1465.2876 -224.1826 1463.1626 -222.3486 1461.332 -220.2813 c1461.1938 -220.125 1461.085 -220.0288 1460.9897 -219.958 C1460.9951 -219.8501 1461 -219.7373 1461 -219.5977 C1461 -213.7412 L1461 -206.707 1460.5474 -198.8379 1461.5273 -191.3984 C1464.335 -188.0293 1466.2524 -184.2412 1467.0039 -180.0239 C1469.7925 -182.5259 1472.7666 -184.7554 1475.8965 -186.7217 C1478.2383 -191.8071 1478.0244 -198.6011 1478.4497 -204.1479 c1478.8965 -209.9834 1481.4224 -220.6533 1477.3853 -225.5542 cf1543.2363 -175.8477 m1542.0889 -176.7007 1540.7983 -177.3628 1539.5273 -178.0068 c1534.1987 -180.7085 1528.1113 -182.105 1522.375 -183.6602 c1520.4414 -184.1851 1518.1187 -185.2344 1516.1431 -185.2144 c1510.7241 -185.1597 1505.4141 -184.3555 1500.1572 -183.0825 c1494.9907 -181.8315 1490.0356 -179.8931 1485.439 -177.3203 C1483.3193 -174.2554 1480.5991 -171.7524 1477.355 -169.9092 C1482.3677 -167.9155 1487.0923 -164.7173 1492.0801 -161.9346 c1492.1963 -161.8696 1492.3135 -161.8091 1492.4297 -161.7451 C1495.5205 -162.1904 1498.3701 -162.7852 1500.5703 -163.2583 c1502.7568 -163.729 1504.9233 -164.3042 1507.0503 -164.9951 c1510.5347 -166.1274 1515.3354 -165.4521 1519.0107 -165.8784 c1526.9531 -166.8003 1536.0957 -169.167 1542.2871 -174.4722 c1542.7197 -174.8423 1543.0771 -175.187 1543.3931 -175.5547 C1543.2148 -175.7764 1543.1006 -175.9487 1543.2363 -175.8477 cf*UUu*u1 D0 0.411658 0.493629 0 1 0.658824 0.498039 Xa3678.1855 -614.3384 m3674.4619 -613.5044 3670.7148 -613.8413 3666.9688 -614.2148 c3662.2061 -614.6895 3656.7793 -612.8145 3652.7715 -610.353 c3646.9395 -606.7705 3640.0391 -604.6367 3633.6582 -602.0239 c3626.4277 -599.0635 3619.2559 -595.9644 3612.2051 -592.5981 c3603.5957 -588.4883 3592.2637 -589.0415 3585.9971 -580.7354 c3581.0059 -574.1201 3580 -566.1714 3578.126 -558.3652 c3575.957 -549.3291 3572.0947 -539.9463 3568.3965 -531.4199 c3565.8535 -525.5586 3563.1738 -519.2871 3559.2598 -514.2031 c3557.1094 -511.4106 3554.7246 -509.2222 3551.2861 -508.1748 c3550.0039 -507.7837 3547.6865 -507.7397 3546.4092 -508.1899 c3545.6348 -508.4468 3544.8789 -508.7495 3544.1406 -509.0977 C3543.9004 -509.2417 3543.6611 -509.3853 3543.4219 -509.5288 C3543.2725 -509.6362 3543.1572 -509.7212 3543.0332 -509.8115 C3537.5605 -511.6167 3535.457 -520.1421 3533.2627 -524.5879 c3529.5205 -532.1719 3525.4141 -540.3994 3522.0918 -548.6616 c3515.0342 -566.2109 3508.3535 -583.7446 3497.5938 -599.3623 C3484.709 -599.8652 3471.9854 -602.272 3459.0342 -602.272 c3446.9912 -602.272 3434.8984 -601.9287 3422.8623 -602.3794 c3413.6504 -602.7246 3402.9551 -603.8125 3395.2861 -609.4131 c3390.2559 -613.0864 3388.334 -617.1611 3391.21 -623.0039 c3393.5996 -627.8584 3398.6191 -631.4482 3403.0215 -634.2998 c3411.9658 -640.0923 3422.1934 -642.5015 3431.54 -647.3359 c3444.0664 -653.8149 3450.8467 -666.5747 3460.377 -676.3745 c3462.1348 -678.1812 3463.8994 -679.9619 3465.5645 -681.856 c3466.25 -682.6353 3466.7871 -683.4199 3467.3262 -684.2793 C3467.2344 -684.2754 3467.1191 -684.3311 3466.9727 -684.5186 c3463.082 -689.5132 3464.9365 -695.6851 3464.0586 -701.6611 c3463.2393 -707.2422 3460.3418 -712.582 3457.7578 -717.5127 c3456.3545 -720.189 3455.1113 -722.9175 3454.0332 -725.7402 c3452.8828 -728.75 3452.9844 -731.9243 3452.2227 -734.9941 c3448.332 -750.6455 3443.2881 -771.6929 3453.3604 -786.0698 c3455.2295 -788.7383 3457.5557 -789.4805 3460.7012 -789.0566 c3464.1426 -788.5928 3467.3965 -785.4448 3470.001 -783.4248 c3471.7285 -782.085 3473.4209 -780.6978 3475.1387 -779.3447 c3475.7275 -778.8809 3476.3496 -778.4551 3476.9609 -778.0229 c3477.3223 -777.7681 3479.8008 -776.6221 3478.3174 -777.1079 c3483.6348 -775.3672 3488.2617 -770.1523 3492.1729 -766.2808 c3496.124 -762.3691 3500.7344 -759.2637 3504.5742 -755.3569 c3513.0586 -746.7236 3521.1172 -737.5483 3532.084 -732.0093 c3536.5391 -729.7588 3542.2949 -728.0073 3547.2207 -729.2236 c3554.0947 -730.9209 3560.416 -735.4414 3566.5752 -738.7734 c3578.7373 -745.353 3593.9063 -748.1689 3604.585 -757.2954 c3612.9629 -764.4546 3625.5059 -770.7515 3636.5947 -767.1367 c3647.9531 -763.4331 3643.2695 -751.0654 3640.8066 -742.9146 c3638.6982 -735.9429 3635.8701 -729.1963 3633.4238 -722.3408 c3631.0742 -715.7539 3629.2725 -709.1597 3626.5059 -702.7163 c3622.6973 -693.8472 3617.248 -680.9429 3626.8945 -674.0151 c3633.1934 -669.4922 3640.7607 -666.0771 3647.5449 -662.2622 c3655.2871 -657.9092 3663.1484 -653.7832 3670.7188 -649.1279 c3677.291 -645.0854 3684.8066 -640.48 3688.9414 -633.7476 c3694.1064 -625.3384 3686.541 -616.2095 3678.1855 -614.3384 cf0 D3677.0322 -628.1577 m3675.8516 -629.5249 3674.4502 -630.7095 3673.0625 -631.853 c3666.2871 -637.4365 3658.0928 -641.5981 3650.4434 -645.8286 c3643.9717 -649.4072 3637.6543 -653.3511 3631.1318 -656.8145 c3622.1113 -661.605 3613.7451 -665.8408 3609.7393 -675.8413 c3605.0742 -687.4858 3611.915 -701.0703 3616.2793 -711.644 c3618.8564 -717.8896 3620.4072 -724.5869 3622.7598 -730.9404 c3625.4258 -738.1362 3627.7109 -745.3745 3630.0957 -752.6543 c3630.3633 -753.4702 3630.6338 -754.3301 3630.8359 -755.1445 C3625.1826 -755.6606 3619.123 -751.8721 3614.6396 -748.7656 c3612.1143 -747.0166 3610.3457 -744.7119 3607.5547 -743.3164 c3604.1699 -741.6245 3600.7793 -739.9429 3597.3789 -738.2837 c3590.8242 -735.0874 3584.1836 -732.042 3577.3633 -729.4526 c3564.7793 -724.6758 3552.7646 -712.5605 3538.252 -716.5156 c3531.8887 -718.2495 3526.1514 -720.1079 3520.4766 -723.6157 c3514.625 -727.2324 3509.4414 -731.9761 3504.5527 -736.7764 c3495.6826 -745.4868 3486.7725 -754.0615 3477.4434 -762.3032 c3474 -765.3447 3469.6797 -767.2568 3465.9463 -770.1523 c3464.5146 -771.2632 3463.1094 -772.4087 3461.6846 -773.5293 C3458.2627 -762.624 3462.2334 -748.6997 3464.7578 -738.4502 c3465.6211 -734.9458 3465.5547 -731.4282 3467.0098 -728.0532 c3468.8428 -723.8008 3471.3271 -719.874 3473.0732 -715.5723 c3476.2891 -707.6499 3477.2988 -700.416 3477.4512 -692.0986 C3479.541 -689.1685 3480.751 -685.7412 3480.2422 -682.0513 c3479.6328 -677.6284 3475.8115 -673.7705 3472.9297 -670.6289 c3465.2275 -662.2305 3458.4004 -652.7881 3450.2178 -644.874 c3445.9063 -640.7041 3440.7813 -637.3623 3435.4014 -634.7593 c3431.002 -632.6304 3426.1436 -631.5454 3421.7764 -629.4458 c3416.6621 -626.9863 3408.0879 -623.9756 3403.9814 -618.9443 C3407.8281 -616.6143 3413.8789 -616.1147 3417.6123 -615.7334 c3424.498 -615.0293 3431.4824 -615.272 3438.3906 -615.272 c3448.7578 -615.272 3459.1885 -615.5967 3469.543 -615.0313 c3480.0566 -614.457 3490.4316 -612.3828 3500.9766 -612.2715 c3503.3623 -612.2461 3505.0664 -611.1729 3506.0938 -609.6543 C3506.2656 -609.4668 3506.4307 -609.2666 3506.5889 -609.0522 c3515.2832 -597.272 3521.5605 -584.2412 3527.1738 -570.7764 c3529.752 -564.5947 3532.1445 -558.3369 3534.627 -552.1177 c3537.0664 -546.0078 3539.3066 -538.8701 3543.0664 -533.4995 c3545.5244 -529.9883 3546.7773 -525.7539 3548.752 -521.9722 c3548.7813 -521.917 3548.8037 -521.874 3548.8301 -521.8257 C3549.4805 -522.6284 3549.9961 -523.5723 3550.5215 -524.4434 c3556.8945 -534.9971 3559.3447 -546.9663 3564.3721 -558.0474 c3566.7559 -563.3032 3566.9209 -569.4658 3568.6621 -574.9507 c3570.4541 -580.5947 3573.4814 -585.8926 3577.2305 -590.4414 c3580.0996 -593.9238 3584.125 -596.5454 3588.2041 -598.375 c3590.4932 -599.4019 3592.8418 -600.2319 3595.2451 -600.9438 c3598.0156 -601.7646 3601.5957 -601.8325 3604.1621 -603.103 c3610.4219 -606.2026 3616.8477 -608.9692 3623.2832 -611.6792 c3626.7559 -613.1416 3630.2383 -614.5781 3633.7285 -616 c3635.5088 -616.7251 3637.293 -617.4419 3639.0762 -618.1602 c3640.2715 -618.6406 3641.4688 -619.1211 3642.665 -619.6001 C3644.5068 -620.5781 3644.9766 -620.7002 3644.0732 -619.9678 C3651.5801 -626.6074 3662.2021 -627.3027 3671.6338 -626.8154 c3673.3994 -626.7241 3674.9424 -626.8623 3676.6279 -627.3735 c3676.8037 -627.4268 3677.082 -627.6323 3677.2646 -627.8096 C3677.125 -628.0034 3677.0215 -628.1538 3677.0322 -628.1577 Cf*U*u1 D3389.5234 -1823.4229 m3380.8545 -1824.6553 3371.9033 -1828.4922 3364.125 -1832.3555 c3355.2656 -1836.7568 3347.0596 -1843.1123 3343.2734 -1852.4121 c3341.6699 -1856.3516 3340.2031 -1860.3711 3338.7734 -1864.4072 C3338.1895 -1861.2695 3337.3633 -1858.1787 3336.2275 -1855.1689 c3331.7324 -1843.2598 3320.9395 -1832.5859 3310.9424 -1825.1514 c3300.7793 -1817.5918 3287.4902 -1810.5078 3274.4512 -1811.6172 c3263.8867 -1812.5166 3253.8672 -1817.3574 3248.4502 -1826.7559 c3237.2803 -1846.1387 3253.752 -1870.3008 3269.5781 -1881.0146 c3278.6875 -1887.1826 3289.3398 -1890.9775 3299.543 -1894.8984 c3303.292 -1896.3389 3307.0469 -1897.7422 3310.8008 -1899.1514 C3304.1162 -1901.1982 3297.5605 -1903.6621 3291.124 -1906.6211 c3278.5996 -1912.3789 3264.8135 -1915.5293 3252.0674 -1920.9209 c3245.6885 -1923.6201 3239.5254 -1926.7891 3233.6143 -1930.3975 c3227.6406 -1934.043 3221.7617 -1936.6025 3216.6035 -1941.5596 c3207.6543 -1950.1563 3202.582 -1963.0781 3208.9688 -1974.6182 c3214.6572 -1984.8975 3226.4561 -1985.1504 3236.498 -1987.1807 c3260.8535 -1992.1055 3288.8594 -1982.0352 3306.457 -1965.0596 c3318.7549 -1953.1963 3327.3633 -1937.5039 3332.7754 -1920.9512 C3334.6318 -1929.0215 3335.5684 -1937.334 3337.1416 -1945.6064 c3338.0918 -1950.6035 3339.5527 -1955.4277 3340.3711 -1960.4688 c3341.2695 -1966 3342.1543 -1971.5176 3343.6455 -1976.9268 c3346.6953 -1987.9873 3353.1836 -1998.7012 3365.4648 -2000.1475 c3377.7148 -2001.5908 3389.3945 -1995.0459 3399.248 -1988.5215 c3403.7559 -1985.5371 3406.1563 -1978.665 3407.292 -1973.6475 c3408.6953 -1967.4512 3408.1289 -1961.0547 3406.8945 -1954.8926 c3404.6064 -1943.4697 3398.1797 -1930.4473 3389.6133 -1922.4463 c3379.5283 -1913.0273 3367.0957 -1906.5391 3354.1162 -1901.2432 C3355.0928 -1900.9434 3356.0781 -1900.6582 3357.083 -1900.416 c3360.5 -1899.5918 3364.415 -1900.1895 3367.6914 -1899.168 c3371.8633 -1897.8682 3376.0127 -1897.0684 3380.3652 -1896.7051 c3387.082 -1896.1445 3393.1611 -1896.8496 3399.5469 -1894.4238 c3405.0459 -1892.335 3410.3779 -1889.8096 3415.373 -1886.7012 c3431.1592 -1876.8818 3440.4629 -1859.4932 3433.0781 -1841.2344 c3425.8242 -1823.3047 3406.4531 -1821.0156 3389.5234 -1823.4229 cf0 D3298.418 -1954.709 m3289.8164 -1963.7041 3278.584 -1969.2959 3266.7246 -1972.6875 c3260.8145 -1974.3779 3254.7832 -1975.2256 3248.6436 -1975.3184 c3242.3975 -1975.4131 3236.4121 -1973.7617 3230.2422 -1973.2129 c3226.5625 -1972.8857 3222.293 -1971.2188 3220.1934 -1968.0566 c3216.8926 -1963.0859 3220.4268 -1957.0254 3223.6416 -1953.0859 c3227.9424 -1947.8154 3233.291 -1946.0967 3238.6973 -1942.5566 c3244.9756 -1938.4453 3251.7568 -1935.1309 3258.6289 -1932.1465 c3271.3525 -1926.6201 3285.1875 -1923.793 3297.6855 -1917.8457 c3305.7344 -1914.0166 3314.2061 -1911.333 3322.8389 -1909.2559 C3318.3848 -1926.1758 3310.2656 -1942.3184 3298.418 -1954.709 cf3326.7988 -1883.2178 m3326.6895 -1885.8359 3326.4707 -1888.4736 3326.1855 -1891.1162 C3325.084 -1890.7334 3323.9814 -1890.3506 3322.8916 -1889.9658 c3312.4912 -1886.2959 3302.1787 -1882.2227 3291.9785 -1878.0234 c3282.2715 -1874.0264 3272.9199 -1868.8711 3266.0996 -1860.7334 c3260.4531 -1853.9961 3256.209 -1843.2295 3259.0693 -1834.5859 c3262.1729 -1825.209 3275.1396 -1823.3291 3283.2168 -1825.4131 c3296.1914 -1828.7588 3307.3984 -1837.6807 3316.0371 -1847.6182 c3319.8818 -1852.0391 3323.4404 -1857.208 3325.1123 -1862.8555 c3327.0566 -1869.4238 3327.0811 -1876.4346 3326.7988 -1883.2178 cf3360.2324 -1918.5029 m3368.0703 -1922.376 3377.7109 -1927.2949 3383.0859 -1934.4424 c3389.0205 -1942.334 3393.2383 -1951.4482 3394.8848 -1961.1982 c3395.6143 -1965.5186 3395.0449 -1969.96 3393.6748 -1974.0732 C3393.3926 -1974.8086 3393.0537 -1975.5166 3392.6582 -1976.1982 C3392.3945 -1976.7051 3390.0967 -1979.0107 3391.6621 -1977.9746 c3389.3721 -1979.4902 3387.0244 -1980.9082 3384.6328 -1982.2549 c3377.8936 -1986.0488 3366.2764 -1991.2031 3360.6201 -1983.3936 c3355.7295 -1976.6406 3354.6025 -1967.4746 3353.3008 -1959.4668 c3351.8184 -1950.3506 3349.4189 -1941.4971 3348.1104 -1932.3477 c3347.0664 -1925.0498 3345.7314 -1918.0586 3343.6123 -1911.25 C3349.2422 -1913.4521 3354.8027 -1915.8203 3360.2324 -1918.5029 cf3408.8125 -1875.4766 m3404.4668 -1878.3096 3399.7109 -1880.5137 3394.8711 -1882.3516 c3388.3213 -1884.8398 3380.2002 -1883.3828 3373.2363 -1884.5215 c3369.5957 -1885.1162 3366.0527 -1886.3203 3362.3711 -1886.5527 c3358.8604 -1886.7754 3355.3516 -1887.4648 3351.9395 -1888.2881 c3348.8828 -1889.0244 3345.9219 -1890.1289 3343.0254 -1891.3418 C3343.7217 -1888.3389 3345.1689 -1885.1592 3345.7783 -1883.4443 c3347.7715 -1877.8408 3350.1113 -1872.3867 3352.0195 -1866.751 c3353.6582 -1861.9072 3354.6943 -1856.1816 3358.2246 -1852.3662 c3362.3525 -1847.9043 3367.8369 -1844.9014 3373.2686 -1842.3281 c3388.666 -1835.0342 3417.7266 -1828.0928 3422.4629 -1851.1543 c3424.6406 -1861.7559 3417.0176 -1870.126 3408.8125 -1875.4766 cf*U*u1 D131.6401 -698.2813 m123.3682 -699.0586 123.2925 -712.0659 131.6401 -711.2813 c155.6128 -709.0283 167.3491 -732.0225 179.2178 -748.918 c194.1079 -770.1162 209.3252 -795.542 204.9702 -822.5132 c200.8325 -848.1416 178.9805 -865.5996 156.8262 -876.2622 c138.1138 -885.2686 111.0767 -893.002 91.4165 -882.5625 c81.9385 -877.5293 77.2217 -867.7847 71.2583 -859.4097 c67.2139 -853.73 63.4644 -847.646 60.7729 -841.1978 c57.7373 -833.9243 57.1094 -826.9072 57.1436 -819.1206 c57.2622 -792.1929 65.4043 -765.7476 85.9482 -747.2969 c93.8472 -740.2026 106.2705 -739.4346 115.7163 -743.4663 c125.7739 -747.7588 133.9966 -755.9951 140.4795 -764.6074 c142.1777 -766.8638 143.8271 -769.1821 145.3872 -771.5571 C136.0093 -763.9697 121.9199 -760.5093 110.4478 -762.6758 c89.1655 -766.6953 73.9673 -792.0015 77.7949 -812.5171 c81.5962 -832.8882 103.5303 -845.4316 122.3896 -848.4746 c132.1655 -850.0518 141.9463 -849.2656 150.5771 -844.0742 c158.6738 -839.2046 163.897 -831.0464 167.1606 -822.3955 c170.5034 -813.5371 170.8179 -803.7954 169.4668 -794.5283 c168.1079 -785.2061 163.106 -776.2725 158.4404 -768.2314 c147.3687 -749.1479 129.9521 -730.665 106.9702 -728.1279 c80.438 -725.1987 61.48 -751.3823 52.5156 -772.9424 c47.4346 -785.1631 44.8174 -798.4863 44.2817 -811.6787 c43.9902 -818.8584 43.8887 -826.0601 44.9272 -833.1787 c45.999 -840.5225 49.2046 -847.606 52.6289 -854.1191 c55.8403 -860.2275 60.3354 -865.4482 63.7715 -871.3716 c66.668 -876.3652 70.0972 -881.1045 74.0269 -885.3359 c80.6509 -892.4683 89.5059 -896.8975 98.9717 -898.8022 c123.0981 -903.6572 149.0283 -895.4683 170.1621 -884.0269 c192.2817 -872.0508 211.7988 -852.8916 217.189 -827.6602 c223.7925 -796.7471 207.7988 -766.8008 190.4429 -742.3564 c175.7476 -721.6602 161.0049 -695.5215 131.6401 -698.2813 cf0 D153.9814 -800.7915 m154.8965 -798.2393 155.4199 -795.7842 155.6079 -793.4326 C157.4502 -800.6294 157.7354 -808.1426 155.6162 -815.8813 c153.7739 -822.6099 149.9292 -828.9902 144.0156 -832.8491 c137.6089 -837.0303 129.7192 -836.7886 122.4985 -835.3311 c106.1055 -832.0215 89.0332 -820.5664 90.0142 -802.1094 c90.2363 -797.9321 93.1694 -793.0117 95.2241 -789.4985 c97.3433 -785.8755 100.1934 -782.4688 103.5518 -779.9282 c111.1113 -774.21 119.9512 -773.8105 128.7041 -776.7627 c138.2925 -779.9961 144.5127 -786.9761 141.4458 -797.3354 c140.1377 -801.7539 137.1187 -805.585 133.0767 -807.6572 c131.1909 -808.624 128.8247 -809.0894 126.728 -809.2612 c128.5444 -809.1123 125.8765 -808.3745 125.0464 -807.6621 c123.9785 -806.7461 123.4194 -806.3457 124.2349 -805.3872 c129.6338 -799.043 120.4834 -789.8008 115.0425 -796.1948 c110.5762 -801.4434 109.3853 -807.1382 112.8984 -813.2964 c116.0796 -818.873 122.7417 -822.8442 129.0474 -822.0122 c141.606 -820.3545 149.7822 -812.501 153.9814 -800.7915 cf*U3710.4541 -31.4746 m3680.377 -21.3604 3649 -20.2148 3618 -20.2134 c3610 -20.2129 3610 -33.2129 3618 -33.2134 c3633 -33.2144 3647.8457 -33.2905 3662.7275 -34.5679 c3677.4658 -35.833 3691.5635 -39.1616 3705.6465 -43.5723 c3728.5205 -50.7368 3750.9297 -64.6079 3765.6504 -83.7539 c3779.7129 -102.043 3785.374 -125.1235 3779.8545 -147.5972 c3774.3623 -169.9634 3759.4395 -189.1382 3741.6699 -203.2734 c3707.9824 -230.0723 3661.0449 -231.4204 3624.3486 -209.8804 c3608.2773 -200.4473 3594.4844 -185.1299 3591.9336 -166.0767 c3588.8379 -142.9551 3597.9502 -113.6045 3617.5273 -99.6606 c3627.3594 -92.6577 3640.3076 -91.165 3652.0215 -90.52 c3663.7568 -89.874 3675.6807 -89.9932 3687.418 -90.5366 c3699.0166 -91.0742 3711.0723 -92.6934 3721.2773 -98.5791 c3731.9619 -104.7412 3739.7188 -117.4956 3743.3408 -128.9644 c3746.9766 -140.478 3745.7148 -154.4082 3739.9971 -165.0728 c3734.3613 -175.5825 3723.9912 -183.0322 3713.3398 -187.8364 c3703.8496 -192.1167 3693.8682 -191.5127 3683.7881 -190.1406 c3674.1895 -188.834 3663.4307 -186.4575 3655.8281 -180.064 c3645.3984 -171.2915 3647.5225 -158.3145 3655.1963 -148.4497 c3659.2334 -143.2598 3664.3027 -138.5933 3670.665 -136.627 c3677.2832 -134.5811 3684.6045 -135.5791 3691.2109 -137.1006 c3696.6992 -138.3643 3702.6416 -140.0571 3707.1621 -143.5732 c3710.9082 -146.4883 3712.9023 -150.8345 3707.9521 -153.6177 c3704.4619 -155.5801 3699.5225 -155.251 3695.6182 -155.229 C3697.3447 -151.2383 3695.4902 -145.7773 3689.9961 -146.2261 c3685.1387 -146.6226 3680.1768 -148.603 3677.6934 -153.0522 c3675.083 -157.728 3677.9355 -163.8496 3682.3516 -166.1563 c3689.4443 -169.8623 3701.2891 -168.7012 3708.8105 -167.0103 c3719.9014 -164.5171 3727.4473 -153.0645 3722.4766 -142.1548 c3717.6504 -131.5649 3705.0811 -127.1943 3694.667 -124.5649 c3682.4648 -121.4839 3668.8486 -121.4199 3657.8926 -128.2778 c3647.5859 -134.7285 3639.168 -146.2769 3636.2266 -158.022 c3633.3457 -169.5234 3638.0352 -181.4575 3646.6367 -189.2563 c3654.4629 -196.353 3665.1006 -199.8281 3675.2715 -201.8389 c3685.0869 -203.7788 3696.4473 -205.3857 3706.3652 -203.5459 c3718.2754 -201.3369 3729.3467 -194.8975 3738.46 -187.1265 c3758.1895 -170.3027 3763.2949 -141.3711 3753.0645 -117.981 c3747.9473 -106.2832 3739.6855 -95.1909 3728.9863 -88.0649 c3718.9883 -81.4067 3706.4639 -79.249 3694.7539 -78.062 c3683.0273 -76.8735 3671.0938 -77.0967 3659.3232 -77.2788 c3646.9863 -77.4697 3634.3232 -78.4678 3622.626 -82.6387 c3598.29 -91.3159 3584.2217 -117.2261 3579.9941 -141.4375 c3576.1221 -163.6152 3580.3809 -184.4663 3594.7676 -201.9736 c3607.7021 -217.7148 3627.1465 -227.7139 3646.4238 -233.2754 c3666.2598 -238.9976 3687.7031 -239.6885 3707.7422 -234.6094 c3751.9941 -223.3931 3790.5273 -182.0713 3794.8574 -136.1875 c3799.6738 -85.1528 3754.5811 -46.314 3710.4541 -31.4746 cfUu*u1 D0.300267 0.756374 0 0 0.941176 0.247059 1 Xa3491.0967 -938.4048 m3490.0918 -935.8306 3488.8418 -933.4482 3487.2471 -931.1934 c3485.6875 -928.9883 3483.1982 -927.3999 3481.7148 -925.2734 c3478.2266 -920.2744 3473.5723 -916.1968 3468.1143 -913.4854 c3446.791 -902.8931 3420.7471 -915.3003 3403.3242 -927.9248 c3384.8701 -941.2969 3373.4629 -960.4409 3364.2656 -980.7466 C3363.5605 -976.4312 3362.2871 -972.2002 3360.4902 -968.228 c3355.5088 -957.2207 3346.2168 -952.9863 3336.8467 -946.4902 c3322.043 -936.2271 3283.9551 -920.6768 3274.4248 -945.0522 c3273.3984 -947.6787 3272.9063 -950.4004 3272.6709 -953.1582 C3261.8447 -957.9736 3252.4473 -965.7305 3247.7188 -976.3418 c3236.791 -1000.8633 3258.5225 -1023.2466 3275.1084 -1038.6611 c3280.6836 -1043.8428 3286.4746 -1048.7935 3292.374 -1053.6113 C3294.4775 -1056.8994 3296.7266 -1060.0957 3299.1631 -1063.1572 c3303.1211 -1068.1304 3307.1895 -1072.8213 3310.9814 -1077.9229 c3315.3945 -1083.8594 3320.4922 -1089.1895 3325.8887 -1094.2334 c3330.7383 -1098.7656 3335.8672 -1102.9941 3341.042 -1107.1553 C3343.6758 -1114.1836 3347.0566 -1120.8457 3352.3672 -1126.4199 c3354.7041 -1128.874 3359.2451 -1129.0244 3361.5586 -1126.4199 c3363.5244 -1124.209 3364.8359 -1121.8086 3365.6924 -1119.2832 C3367.9414 -1119.3604 3370.2285 -1118.3066 3371.5752 -1116.0986 c3372.0381 -1115.3398 3372.4346 -1114.5586 3372.8037 -1113.7686 C3376.1211 -1117.8281 3384.4678 -1116.5176 3384.4648 -1109.7969 c3384.4648 -1108.7764 3384.4629 -1107.751 3384.4561 -1106.7227 C3388.6797 -1103.165 3393.4941 -1100.5166 3398.2998 -1097.7559 c3404.5713 -1094.1533 3410.0264 -1089.9561 3415.1348 -1084.8447 c3425.7266 -1074.2451 3436.2246 -1063.5366 3445.6875 -1051.9014 c3455.252 -1040.1416 3463.084 -1027.0854 3471.2822 -1014.3662 c3479.5889 -1001.478 3487.2471 -988.0879 3492.2432 -973.5366 c3494.0264 -968.3442 3494.0801 -961.6934 3494.1426 -956.2515 c3494.2109 -950.2285 3493.29 -944.0225 3491.0967 -938.4048 cf0 D3264.6855 -1007.9966 m3258.6016 -999.4814 3255.1455 -989.646 3260.4404 -979.8672 c3263.2773 -974.6289 3267.5645 -970.5796 3272.6523 -967.5386 C3272.7363 -969.8252 3272.8516 -972.1108 3272.9883 -974.3955 C3272.4082 -975.0117 3271.8271 -975.6196 3271.2451 -976.2134 c3267.3994 -980.1348 3270.0117 -985.4053 3273.9395 -986.9111 C3274.0234 -987.8149 3274.1025 -988.7192 3274.1934 -989.6226 C3272.8438 -992.6641 3271.9561 -995.8853 3271.8535 -999.1904 c3271.7383 -1002.9053 3273.5264 -1006.0244 3276.3184 -1007.6855 C3276.9043 -1012.7241 3277.3369 -1017.9766 3278.4541 -1022.9531 C3278.4385 -1023.3037 3278.458 -1023.6519 3278.5146 -1023.9946 C3273.4971 -1019.0107 3268.7842 -1013.7334 3264.6855 -1007.9966 cf3348.7568 -973.6665 m3353.7422 -983.6357 3351.0381 -995.0195 3352.8164 -1005.6523 C3351.8564 -1003.7959 3350.9756 -1001.9111 3350.1934 -999.9805 C3350.5391 -999.167 3350.8955 -998.3594 3351.2285 -997.5391 c3352.3906 -994.6797 3350.6348 -991.9351 3348.3242 -990.395 C3348.3281 -989.0713 3348.3564 -987.751 3348.3008 -986.4722 c3347.9678 -978.8252 3346.3574 -971.8501 3342.9453 -965.8716 C3345.3643 -968.0532 3347.2598 -970.6738 3348.7568 -973.6665 cf3306 -966.2866 m3307.4775 -964.3535 3308.9033 -962.3916 3310.2051 -960.3506 C3311.5762 -960.4854 3312.9189 -960.6543 3314.2148 -960.8647 c3315.6533 -961.0986 3317.0176 -961.4727 3318.3398 -961.9365 C3313.8643 -965.4536 3309.8867 -969.7139 3306 -973.9917 C3306 -966.2866 Lf3293.9561 -945.3057 m3296.3096 -945.2275 3298.7002 -945.4014 3301.0957 -945.7563 C3300.5947 -946.2578 3300.1094 -946.7744 3299.6436 -947.3115 C3295.6455 -947.3311 3291.5 -947.749 3287.3555 -948.5552 C3288.6855 -946.6528 3290.7637 -945.4116 3293.9561 -945.3057 cf3287.498 -992.3242 m3287.4951 -992.2935 3287.4922 -992.2627 3287.4883 -992.2314 C3287.8018 -991.7393 3288.1045 -991.2734 3288.3682 -990.8481 c3290.6973 -987.0923 3293.54 -983.8428 3295.8535 -980.0596 C3296.9453 -980.6885 3298.2383 -981.0039 3299.5313 -980.999 C3299.4336 -981.0996 3299.3379 -981.2026 3299.2402 -981.3027 c3295.5254 -985.1255 3291.7217 -989.0498 3287.498 -992.3242 Cf3296.6895 -1033.0869 m3296.5898 -1033.521 3296.5488 -1033.9531 3296.5352 -1034.3823 C3295.9375 -1033.123 3295.3545 -1031.8574 3294.791 -1030.584 c3294.3066 -1029.4883 3293.8848 -1028.4004 3293.4902 -1027.314 C3295.709 -1026.3564 3297.8174 -1025.0967 3299.8623 -1023.5508 c3300.2764 -1023.2378 3300.6738 -1022.9038 3301.0801 -1022.582 C3299.1367 -1025.8271 3297.5615 -1029.2705 3296.6895 -1033.0869 cf3319.6543 -1031.4834 m3316.6143 -1036.4707 3311.2324 -1043.2178 3308.9355 -1049.9951 C3306.6133 -1048.1719 3304.29 -1046.3501 3301.9775 -1044.5166 C3301.1416 -1043.1406 3300.3398 -1041.7461 3299.5713 -1040.332 C3300.9863 -1041.2622 3302.7734 -1041.6353 3304.6855 -1041.083 c3311.0244 -1039.2515 3316.3799 -1034.332 3321.084 -1029.0879 C3320.6074 -1029.8872 3320.1357 -1030.6938 3319.6543 -1031.4834 cf3321.3223 -986.4229 m3325.5625 -981.3872 3328.9561 -975.8335 3330.0801 -969.2979 C3333.2598 -973.1592 3334.5684 -978.5767 3335.082 -983.4146 c3335.4209 -986.6045 3335.3994 -989.7036 3335.5508 -992.7739 C3334.7207 -993.4531 3333.9063 -994.1914 3333.1162 -994.9688 C3333.1523 -994.8247 3333.1934 -994.6836 3333.2266 -994.5386 c3334.0771 -990.8174 3332.1064 -987.8604 3328.6875 -986.543 c3326.2021 -985.585 3323.7197 -985.6714 3321.3223 -986.4229 Cf3334.8506 -1055.4292 m3334.7148 -1055.2231 3334.5684 -1055.0215 3334.4277 -1054.8179 C3334.8184 -1054.4507 3335.1982 -1054.0703 3335.5811 -1053.6929 C3335.3369 -1054.2715 3335.0908 -1054.8486 3334.8506 -1055.4292 Cf3344.5137 -1076.3906 m3344.3906 -1076.1406 3344.2637 -1075.8926 3344.1445 -1075.6421 c3344.1348 -1075.6221 3344.127 -1075.6025 3344.1172 -1075.5825 C3344.2969 -1075.4668 3344.4775 -1075.3506 3344.6563 -1075.229 C3344.5967 -1075.6128 3344.5508 -1076 3344.5137 -1076.3906 Cf3341.998 -1026.1152 m3337.3457 -1031.6846 3332.5762 -1038.915 3326.7998 -1044.4902 C3328.7695 -1041.3853 3330.8672 -1038.3511 3332.5713 -1035.0952 c3336.0742 -1028.4048 3339.6797 -1021.791 3343.0918 -1015.0815 C3344.1387 -1016.9854 3345.2236 -1018.8667 3346.3115 -1020.7373 C3344.9004 -1022.5503 3343.4717 -1024.3506 3341.998 -1026.1152 cf3347.7188 -1082.4102 m3349.4502 -1083.4414 3351.5869 -1083.7637 3353.4063 -1082.916 C3353.3711 -1086.9824 3353.3711 -1091.0449 3353.4805 -1095.1299 C3352.2266 -1090.668 3349.9873 -1086.5244 3347.7188 -1082.4102 Cf3437.583 -951.0869 m3438.0059 -950.3584 3438.2715 -949.5864 3438.3926 -948.7749 C3438.3984 -948.7607 3438.4063 -948.7358 3438.4121 -948.7173 c3438.2422 -949.3223 3438.9561 -947.668 3439.0029 -947.582 c3439.3984 -946.8584 3439.8535 -946.1689 3440.3047 -945.479 c3440.6846 -944.8979 3441.1055 -944.3555 3441.5449 -943.8296 C3441.5977 -944.2744 3441.6387 -944.7236 3441.6582 -945.1885 C3439.6885 -948.3335 3437.7949 -951.5269 3435.9434 -954.7471 C3435.7646 -954.603 3435.5762 -954.4727 3435.3848 -954.3462 C3436.1172 -953.2603 3436.8535 -952.1753 3437.583 -951.0869 Cf3373.0313 -1072.1934 m3371.4063 -1075.3579 3368.4551 -1078.2671 3366.1855 -1081.2813 C3366.207 -1078.9019 3366 -1076.5415 3366 -1074.2139 c3366 -1074.1592 3366 -1074.1021 3366 -1074.0474 c3366 -1074.0459 3366 -1074.0449 3366 -1074.0439 c3366 -1074.0293 3366 -1074.0146 3366 -1074 C3366.4609 -1074 L3366.458 -1073.5566 3366.4141 -1073.1396 3366.3428 -1072.7427 C3368.3594 -1070.9678 3370.3232 -1069.1445 3372.252 -1067.2896 C3372.6279 -1067.0415 3372.9941 -1066.7627 3373.3281 -1066.4141 c3373.7617 -1065.9614 3374.1621 -1065.4824 3374.5762 -1065.0151 C3376.4063 -1063.1953 3378.2051 -1061.3486 3379.9648 -1059.4653 C3377.5488 -1063.6572 3375.2334 -1067.9043 3373.0313 -1072.1934 cf3379.3848 -994.21 m3379.2188 -994.061 3379.0488 -993.918 3378.8721 -993.7817 C3380.9238 -989.6416 3383.0527 -985.5283 3385.2793 -981.4683 C3383.333 -985.7246 3381.4004 -989.9863 3379.3848 -994.21 Cf3384.123 -1091.0801 m3386.1006 -1089.2383 3388.0352 -1087.3516 3389.9453 -1085.4404 C3390.1973 -1086.0156 3390.5449 -1086.5293 3390.9551 -1086.9883 C3388.6484 -1088.332 3386.3594 -1089.6738 3384.123 -1091.0801 Cf3408.4395 -1041.2412 m3405.3398 -1046.7529 3401.2344 -1051.7559 3398.4238 -1057.4043 c3398.416 -1057.4199 3398.4082 -1057.436 3398.4004 -1057.4521 C3396.2969 -1059.8066 3394.1934 -1062.1621 3392.0771 -1064.5029 C3396.8262 -1056.4302 3402.0039 -1048.5977 3407.5791 -1041.0962 c3408.624 -1039.6904 3409.6416 -1038.2598 3410.6484 -1036.8184 C3409.9619 -1038.3184 3409.248 -1039.8047 3408.4395 -1041.2412 cf3422.7109 -933.6045 m3422.1826 -934.6104 3421.6582 -935.6182 3421.123 -936.6206 c3420.9238 -936.9941 3420.7197 -937.3652 3420.5195 -937.7388 c3418.2275 -942.0112 3415.877 -946.2515 3413.4795 -950.4663 C3415.1406 -946.0996 3416.0898 -941.6499 3414.2354 -937.0776 c3414.1279 -936.8135 3414.0068 -936.5571 3413.874 -936.3086 C3417.1377 -934.0864 3420.7773 -931.8643 3424.6348 -929.8691 C3423.9961 -931.1152 3423.3604 -932.3628 3422.7109 -933.6045 cf3465.1758 -999.6221 m3457.2549 -1012.7739 3448.959 -1026.1465 3439.8027 -1038.4717 c3435.6201 -1044.1025 3431.0547 -1049.4517 3426.3086 -1054.645 C3429.4951 -1048.2715 3432.6816 -1041.8975 3435.8691 -1035.5239 c3437.4063 -1032.4507 3438.877 -1029.3633 3440.2803 -1026.2515 C3442.2773 -1023.3447 3444.2578 -1020.4258 3446.2119 -1017.4893 c3454.0137 -1005.7642 3461.2422 -993.668 3467.585 -981.0903 c3467.8682 -980.5288 3468.0664 -979.9741 3468.2002 -979.4297 C3469.9043 -981.3066 3471.8955 -982.7896 3474.2227 -983.627 C3471.499 -989.1499 3468.2803 -994.4678 3465.1758 -999.6221 cf3454.1504 -976.063 m3455.1367 -973.5498 3455.8418 -970.9253 3456.2129 -968.3467 C3457.7168 -966.23 3458.8438 -963.9092 3459.8818 -961.5498 C3460.6465 -964.3018 3461.4902 -967.0303 3462.5283 -969.6968 c3462.7832 -970.3506 3463.0547 -971.001 3463.3408 -971.6445 C3461.4365 -971.2085 3459.2754 -971.6035 3457.377 -973.2134 c3456.2793 -974.144 3455.2051 -975.0947 3454.1504 -976.063 Cf3481 -960.5405 m3480.9951 -960.6309 3480.9824 -960.7197 3480.9766 -960.8105 C3479.1523 -957.707 3477.0342 -954.7637 3474.876 -951.9888 c3473.002 -949.5796 3471.0195 -947.2559 3468.9541 -945.0083 C3468.5498 -943.8276 3468.1104 -942.6602 3467.585 -941.5254 c3466.7871 -939.8042 3465.127 -938.7847 3463.3086 -938.457 C3463.0293 -936.5269 3462.4863 -934.5547 3461.585 -932.5244 c3460.1738 -929.3457 3455.1572 -928.3374 3452.3389 -930.3149 C3452.1992 -930.2163 3452.0664 -930.1113 3451.9268 -930.0137 c3448.3145 -927.481 3443.7666 -924.4736 3439.2422 -924.3604 c3438.8721 -924.3511 3438.5127 -924.3599 3438.1592 -924.3789 C3449.5654 -921.1201 3461.2158 -921.6226 3469.6748 -930.8584 c3473.0742 -934.5708 3477.1641 -938.2827 3479.041 -943.0894 c3481.2061 -948.6353 3481.3193 -954.6797 3481 -960.5405 cf*U378.7334 -1874.5635 m377.5952 -1871.6133 375.4995 -1868.8418 374.5024 -1865.9082 c373.582 -1863.2012 372.5283 -1860.8184 370.6973 -1858.6191 c367.2964 -1854.5332 361.1382 -1856.3262 356.6626 -1856.3984 c348.2881 -1856.5332 348.2749 -1869.5332 356.6626 -1869.3984 c358.4541 -1869.3701 360.2227 -1869.2275 362.0005 -1869.0518 C364.3804 -1873.7197 366.6348 -1878.7188 368.1563 -1883.7314 c369.9536 -1889.6543 370.811 -1895.8027 371.1069 -1901.9688 c371.4736 -1909.6182 372.0781 -1916.916 370.7344 -1924.5342 c368.2461 -1938.6416 360.915 -1950.0283 355.2085 -1962.8252 c350.0083 -1974.4873 343.7578 -1985.8594 335.3208 -1995.5068 c326.7876 -2005.2646 315.314 -2012.5127 303.9414 -2018.5439 c292.6079 -2024.5547 280.124 -2028.1543 267.498 -2030.1797 c242.6812 -2034.1611 216.6938 -2030.0449 193.4277 -2021.0156 c182.166 -2016.6445 171.8564 -2010.0977 161.7681 -2003.5322 c151.0928 -1996.585 140.894 -1988.9463 131.1577 -1980.7383 c122.2578 -1973.2354 114.0615 -1965.0088 105.6538 -1956.9746 c97.7456 -1949.417 89.3955 -1941.2061 86.9023 -1930.1768 c85.0547 -1922.001 72.5215 -1925.4688 74.3672 -1933.6318 c77.1421 -1945.9102 85.6768 -1955.6055 94.4233 -1964.1982 c103.7959 -1973.4053 113.231 -1982.5664 123.2803 -1991.0391 c144.3813 -2008.8281 168.0791 -2025.583 194.1377 -2035.1211 c242.5581 -2052.8447 300.3892 -2045.7617 339.1309 -2010.2266 c350.52 -1999.7793 358.6338 -1986.0313 365.1558 -1972.1768 c372.5322 -1956.5098 381.1865 -1941.9307 383.8452 -1924.4922 c385.1494 -1915.9365 384.5029 -1907.5234 383.9341 -1898.9482 c383.3838 -1890.6523 381.7271 -1882.3242 378.7334 -1874.5635 cf148.3696 -1866.165 m154.54 -1864.5137 154.0005 -1856.833 149.8018 -1854.2412 C149.7891 -1853.3955 149.8232 -1852.5469 149.8652 -1851.7021 c150.0884 -1847.2666 150.9395 -1842.8682 151.7583 -1838.5117 c153.2036 -1830.8193 155.9258 -1822.7568 156.1416 -1814.8926 c156.3716 -1806.5039 143.3711 -1806.5264 143.1416 -1814.8926 c143.1357 -1815.1084 143.0776 -1815.6514 143.0591 -1815.8662 C142.9375 -1816.6094 142.8018 -1817.3506 142.6621 -1818.0898 c142.2031 -1820.5225 141.6826 -1822.9434 141.1772 -1825.3662 c139.9609 -1831.1982 138.7637 -1837.0371 137.8735 -1842.9297 c136.7261 -1850.5254 134.5581 -1869.8633 148.3696 -1866.165 cf246.9399 -1818.8438 m248.5454 -1825.5596 250.9893 -1831.9141 251.1523 -1838.8955 c251.3477 -1847.2646 264.3481 -1847.2832 264.1523 -1838.8955 c263.8994 -1828.0547 258.9224 -1818.2773 258.1914 -1807.5869 c258.001 -1804.8027 257.771 -1802.0313 257.5454 -1799.2461 c257.4116 -1797.5996 257.3833 -1795.9531 257.4365 -1794.3027 c257.4482 -1793.9473 257.4746 -1793.6777 257.5059 -1793.4609 C262.7734 -1790.3164 261.8799 -1780.6416 254.6523 -1781.3906 c243.6001 -1782.5371 243.9883 -1794.3711 244.8877 -1802.8682 c245.4585 -1808.2588 245.6694 -1813.5293 246.9399 -1818.8438 cfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF